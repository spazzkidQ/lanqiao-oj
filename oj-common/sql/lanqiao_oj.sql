/*
 Navicat Premium Dump SQL

 Source Server         : aliyun
 Source Server Type    : MySQL
 Source Server Version : 80040 (8.0.40)
 Source Host           : lmxdxl99.com.cn:3306
 Source Schema         : lanqiao_oj

 Target Server Type    : MySQL
 Target Server Version : 80040 (8.0.40)
 File Encoding         : 65001

 Date: 29/06/2025 15:57:11
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for chan_id
-- ----------------------------
DROP TABLE IF EXISTS `chan_id`;
CREATE TABLE `chan_id`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '类型',
  `username` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '账户',
  `chan_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '会话id',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `chan_id_pk_2`(`id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1900130336 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '会话记录ID' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of chan_id
-- ----------------------------
INSERT INTO `chan_id` VALUES (1900130319, 'chat', 'zrxzrx', '1747288182468');
INSERT INTO `chan_id` VALUES (1900130324, 'service', 'zrxzrx', '1747289281287');

-- ----------------------------
-- Table structure for course
-- ----------------------------
DROP TABLE IF EXISTS `course`;
CREATE TABLE `course`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT '课程名称',
  `teacher` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT '教师姓名',
  `avatar` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL COMMENT '老师头像',
  `type` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL COMMENT '课程类型：数据结构、算法、编程',
  `difficultyLevel` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL COMMENT '课程难度：初级、中级、高级',
  `description` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL COMMENT '课程描述',
  `price` int NOT NULL COMMENT '课程价格',
  `startTime` datetime NOT NULL COMMENT '课程开始时间',
  `endTime` datetime NOT NULL COMMENT '课程结束时间',
  `duration` int NOT NULL COMMENT '学习时长',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of course
-- ----------------------------
INSERT INTO `course` VALUES (3, 'Java基础课程', '李明响', '/user-avatars/123615944728158208.jpg', '编程', '初级', '学习Java基础知识，包括面向对象编程和常用的Java库。', 199, '2025-07-01 09:00:00', '2025-07-01 12:00:00', 43);
INSERT INTO `course` VALUES (4, '数据库原理', '彭浪', '/user-avatars/a94fd883-8226-4885-b363-326ebc8e8768.webp', '数据结构', '中级', '介绍数据库管理系统的基本概念、设计和实现。', 249, '2025-07-05 14:00:00', '2025-07-05 17:00:00', 56);
INSERT INTO `course` VALUES (5, '人工智能入门', '郭通', '/user-avatars/b80b7447-1412-4a28-a7bb-9b96a057dc96.webp', '编程', '高级', '学习人工智能的基本原理，包含机器学习和深度学习基础。', 399, '2025-07-10 10:00:00', '2025-07-10 13:00:00', 26);
INSERT INTO `course` VALUES (6, 'Web前端开发', '婶婶', '/user-avatars/72a7c852-6364-4bed-81f1-06093e338304.jpg', '编程', '中级', '学习HTML、CSS、JavaScript以及React框架的基本使用。', 299, '2025-07-15 13:00:00', '2025-07-15 16:00:00', 64);
INSERT INTO `course` VALUES (7, '计算机网络', '陈祥祥', '/user-avatars/9e9053d4-214f-4ac6-82ab-c97dc62ce9ed.png', '编程', '中级', '讲解计算机网络的基础知识，包括协议、架构等。', 229, '2025-07-20 09:00:00', '2025-07-20 12:00:00', 15);
INSERT INTO `course` VALUES (8, '数据分析与可视化', '陈祥祥', '/user-avatars/03c78cc0-7f12-4baf-a8bc-4c3672f45a78.webp', '数据结构', '初级', '介绍数据分析与可视化的基础工具和技巧。', 199, '2025-07-25 10:00:00', '2025-07-25 13:00:00', 74);
INSERT INTO `course` VALUES (9, '前端性能优化', '陈祥祥', '/user-avatars/8d38b471-c038-4174-8d8e-e6483cf6004d.png', '编程', '高级', '探讨前端性能优化的常见问题和解决方案。', 359, '2025-08-01 09:00:00', '2025-08-01 12:00:00', 76);
INSERT INTO `course` VALUES (10, '算法与数据结构', '陈祥祥', '/user-avatars/daaf527c-6ebd-42c5-8744-dcf2c8d5eb78.png', '算法', '高级', '学习常见的算法和数据结构，提升编程能力。', 349, '2025-08-05 14:00:00', '2025-08-05 17:00:00', 33);
INSERT INTO `course` VALUES (11, '软件工程基础', '陈祥祥', '/user-avatars/ce7bd9c7-e6f8-43d4-9ac0-3d260cde1e28.jpg', '编程', '中级', '讲解软件工程的基本原则与实践方法。', 279, '2025-08-10 09:00:00', '2025-08-10 12:00:00', 66);
INSERT INTO `course` VALUES (12, 'Python编程入门', '陈祥祥', '/user-avatars/7fb7275d-c35b-4f07-b7cc-fd93b2826737.png', '编程', '初级', '学习Python语言的基础语法和常用库。', 199, '2025-08-15 10:00:00', '2025-08-15 13:00:00', 71);

-- ----------------------------
-- Table structure for course_reservation
-- ----------------------------
DROP TABLE IF EXISTS `course_reservation`;
CREATE TABLE `course_reservation`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `Course_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT '课程id',
  `student_name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT '学生姓名',
  `contact_info` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL COMMENT '学生联系方式',
  `school` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL COMMENT '预约学校',
  `remark` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL COMMENT '备注',
  `city` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL COMMENT '校区所在城市',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT ' 预约时间 ',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 27 CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of course_reservation
-- ----------------------------
INSERT INTO `course_reservation` VALUES (13, '5', '大司马', '19982556999', '北京理工大学', '嗯嗯', '北京', '2025-06-21 20:45:56');
INSERT INTO `course_reservation` VALUES (14, '4', '大司马', '19982556991', '北京大学', 'aaa', '北京', '2025-06-22 20:45:56');
INSERT INTO `course_reservation` VALUES (15, '4', 'KaMiGui', '19982556991', '北京大学', '666', '北京', '2025-06-23 20:45:56');
INSERT INTO `course_reservation` VALUES (16, '6', '大司马', '1898293743', '清华大学', 'aaa', '北京', '2025-06-24 20:45:56');

-- ----------------------------
-- Table structure for notice_table
-- ----------------------------
DROP TABLE IF EXISTS `notice_table`;
CREATE TABLE `notice_table`  (
  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '类型',
  `datetime` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '内容',
  `id` int NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 24 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '公告' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of notice_table
-- ----------------------------
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:38:43', '开干！！！', 1);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:41:47', '版本1.0', 2);
INSERT INTO `notice_table` VALUES ('orangered', '2025-06-16 08:42:02', '修复了用户权限问题', 3);
INSERT INTO `notice_table` VALUES ('blue', '2025-06-16 08:45:33', '增加了发布公告功能', 4);
INSERT INTO `notice_table` VALUES ('orangered', '2025-06-16 08:42:56', '修复了评测超时问题', 5);
INSERT INTO `notice_table` VALUES ('blue', '2025-06-16 08:46:13', '为公告设置超出隐藏显示', 6);
INSERT INTO `notice_table` VALUES ('blue', '2025-06-16 08:46:25', '添加排行榜', 7);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:44:18', '更新系统版本至1.1.0', 8);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:44:30', '更新系统版本至1.1.1', 9);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:44:35', '更新系统版本至1.1.2', 10);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:44:41', '更新系统版本至1.1.3', 11);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:44:45', '更新系统版本至1.1.4', 12);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:44:50', '更新系统版本至1.1.5', 13);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:44:57', '更新系统版本至1.1.6', 14);
INSERT INTO `notice_table` VALUES ('orangered', '2025-06-16 08:48:07', '解决了前端请求和后端请求不一致的问题', 15);
INSERT INTO `notice_table` VALUES ('orangered', '2025-06-16 08:47:16', '修复了前端无法查询公告发布时间', 16);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:48:26', '更新系统版本至1.1.7', 17);
INSERT INTO `notice_table` VALUES ('blue', '2025-06-16 08:49:00', '添加了用户做题熟练度显示', 18);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:49:22', '更新系统版本至1.1.8', 19);
INSERT INTO `notice_table` VALUES ('orangered', '2025-06-16 08:52:17', '修复了用户排名不能正常显示的问题', 20);
INSERT INTO `notice_table` VALUES ('cyan', '2025-06-16 08:49:36', '更新系统版本至1.1.9', 21);
INSERT INTO `notice_table` VALUES ('blue', '2025-06-16 08:50:13', '添加了广告', 22);
INSERT INTO `notice_table` VALUES ('orangered', '2025-06-16 09:07:35', '111111111111111111111111111111111111', 23);

-- ----------------------------
-- Table structure for oj_post
-- ----------------------------
DROP TABLE IF EXISTS `oj_post`;
CREATE TABLE `oj_post`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '标题',
  `zone` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '帖子分区',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL COMMENT '内容',
  `tags` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '标签列表（json 数组）',
  `view_num` int NULL DEFAULT 0 COMMENT '观看数',
  `thumb_num` int NULL DEFAULT 0 COMMENT '点赞数',
  `favour_num` int NULL DEFAULT 0 COMMENT '收藏数',
  `creator` bigint NULL DEFAULT NULL COMMENT '创建用户 id',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updater` bigint NULL DEFAULT NULL COMMENT '更新人',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `del_flag` tinyint NULL DEFAULT 0 COMMENT '是否删除',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_userId`(`creator` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 296826815140728833 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = '帖子' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of oj_post
-- ----------------------------
INSERT INTO `oj_post` VALUES (1, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 849, 428, 181, 1067246875800000001, '2024-03-23 00:42:51', 777, '2025-06-16 18:37:54', 0);
INSERT INTO `oj_post` VALUES (2, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 392, 80, 159, 123615944728158208, '2024-03-20 18:18:14', 738, '2025-06-15 12:19:14', 0);
INSERT INTO `oj_post` VALUES (3, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 509, 358, 300, 124716087158337536, '2024-03-31 02:34:44', 398, '2025-06-15 12:19:16', 0);
INSERT INTO `oj_post` VALUES (4, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 2335, 187, 145, 135186678792712192, '2024-03-07 14:09:38', 123615944728158208, '2024-05-24 17:07:36', 0);
INSERT INTO `oj_post` VALUES (5, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 373, 455, 77, 1067246875800000001, '2024-03-11 21:25:09', 103, '2025-06-15 12:19:07', 0);
INSERT INTO `oj_post` VALUES (6, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 974, 441, 266, 135186678792712192, '2024-04-08 12:45:11', 109, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (7, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 477, 123, 30, 123615944728158208, '2024-04-07 03:29:03', 368, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (8, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1524, 175, 100, 123615944728158208, '2024-04-22 00:09:43', 536, '2025-06-18 09:10:25', 0);
INSERT INTO `oj_post` VALUES (9, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 524, 452, 239, 123615944728158208, '2024-04-30 05:51:32', 810, '2025-06-13 13:49:05', 0);
INSERT INTO `oj_post` VALUES (10, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1500, 400, 175, 1067246875800000001, '2024-03-02 09:55:58', 126, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (11, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 1475, 53, 226, 124716087158337536, '2024-04-17 22:36:58', 29, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (12, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"后端\"]', 503, 67, 45, 123615944728158208, '2024-05-04 19:44:47', 965, '2025-06-16 20:16:41', 0);
INSERT INTO `oj_post` VALUES (13, 'HarmonyOS 是否能完成安卓替代？(已修改）', 'harmony', '# HarmonyOS 是否能完成安卓替代？\n\n## 目录\n1. [简介](#简介)\n2. [环境配置](#环境配置)\n   - [开发工具](#开发工具)\n   - [创建项目](#创建项目)\n3. [项目结构](#项目结构)\n4. [编写第一个应用](#编写第一个应用)\n5. [调试与运行](#调试与运行)\n6. [构建与部署](#构建与部署)\n7. [开发指南](#开发指南)\n   - [页面与路由](#页面与路由)\n   - [组件与布局](#组件与布局)\n   - [状态管理](#状态管理)\n8. [常见问题](#常见问题)\n9. [参考资料](#参考资料)\n\n## 简介\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\n\n## 环境配置\n\n### 开发工具\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\n\n安装完成后，启动 DevEco Studio 并配置开发环境。\n\n### 创建项目\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\n\n## 项目结构\n一个典型的 HarmonyOS 项目结构如下：\n```\nyour-project-name\n├── entry\n│   ├── src\n│   │   ├── main\n│   │   │   ├── config.json\n│   │   │   ├── js\n│   │   │   │   └── default\n│   │   │   │       └── pages\n│   │   │   │           └── index\n│   │   │   │               ├── index.hml\n│   │   │   │               ├── index.css\n│   │   │   │               └── index.js\n│   │   └── test\n│   └── build.gradle\n├── .gitignore\n└── settings.gradle\n```\n\n## 编写第一个应用\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>My First HarmonyOS App</title>\n    <link rel=\"stylesheet\" href=\"index.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Hello, HarmonyOS!</h1>\n        <button onclick=\"showMessage()\">Click me</button>\n        <p id=\"message\"></p>\n    </div>\n    <script src=\"index.js\"></script>\n</body>\n</html>\n```\n\n编辑 `index.js` 文件：\n```javascript\nfunction showMessage() {\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\n}\n```\n\n编辑 `index.css` 文件：\n```css\n.container {\n    text-align: center;\n    margin-top: 50px;\n}\n\nbutton {\n    padding: 10px 20px;\n    font-size: 16px;\n}\n\np {\n    color: #42b983;\n    font-size: 18px;\n}\n```\n\n## 调试与运行\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\n\n## 构建与部署\n构建 HarmonyOS 应用：\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\n\n构建完成后，将生成的安装包部署到目标设备上运行。\n\n## 开发指南\n\n### 页面与路由\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\n\n### 组件与布局\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\n\n### 状态管理\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\n\n## 常见问题\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\n2. **编译错误**：检查代码语法和配置文件是否正确。\n\n## 参考资料\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\n\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[Harmony]', 1890, 344, 2, 123615944728158208, '2024-03-18 08:00:35', 123615944728158208, '2025-06-18 08:57:54', 0);
INSERT INTO `oj_post` VALUES (14, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Harmony OS\"]', 724, 26, 142, 123615944728158208, '2024-04-28 02:18:54', 456, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (15, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 323, 106, 63, 135186678792712192, '2024-05-02 07:10:58', 679, '2025-06-15 12:02:31', 0);
INSERT INTO `oj_post` VALUES (16, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1358, 31, 10, 1067246875800000001, '2024-04-27 01:53:50', 529, '2025-06-16 11:55:27', 0);
INSERT INTO `oj_post` VALUES (17, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1171, 422, 115, 124716087158337536, '2024-03-22 15:34:13', 177, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (18, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 221, 220, 180, 123615944728158208, '2024-03-21 13:58:54', 555, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (19, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 255, 189, 63, 124716087158337536, '2024-03-14 22:49:44', 270, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (20, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 1664, 431, 154, 124716087158337536, '2024-03-09 03:31:34', 898, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (21, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Java\"]', 443, 264, 265, 123615944728158208, '2024-03-13 02:47:37', 593, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (22, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"后端\"]', 472, 97, 51, 1067246875800000001, '2024-04-01 08:46:15', 762, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (23, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 1374, 335, 246, 1067246875800000001, '2024-05-03 11:15:45', 816, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (24, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Java\"]', 1264, 127, 31, 1067246875800000001, '2024-04-09 00:14:58', 553, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (25, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"前端\"]', 346, 494, 152, 124716087158337536, '2024-03-21 10:14:07', 903, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (26, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"前端\"]', 34, 207, 167, 135186678792712192, '2024-04-20 15:57:38', 253, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (27, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 284, 313, 44, 123615944728158208, '2024-03-19 06:41:00', 384, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (28, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 1803, 365, 53, 1067246875800000001, '2024-03-01 09:11:03', 123615944728158208, '2024-05-17 17:40:28', 0);
INSERT INTO `oj_post` VALUES (29, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 535, 47, 243, 124716087158337536, '2024-03-31 06:12:11', 330, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (30, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 733, 418, 4, 135186678792712192, '2024-04-16 21:10:13', 457, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (31, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 309, 426, 108, 123615944728158208, '2024-03-21 22:34:07', 620, '2025-06-16 20:59:48', 0);
INSERT INTO `oj_post` VALUES (32, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 927, 165, 199, 135186678792712192, '2024-04-08 18:23:47', 123615944728158208, '2024-05-19 20:49:55', 0);
INSERT INTO `oj_post` VALUES (33, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 550, 182, 195, 123615944728158208, '2024-04-18 04:29:27', 858, '2025-06-16 21:00:12', 0);
INSERT INTO `oj_post` VALUES (34, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Java\"]', 773, 182, 91, 123615944728158208, '2024-05-12 15:48:04', 605, '2025-06-16 20:58:48', 0);
INSERT INTO `oj_post` VALUES (35, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 116, 89, 73, 123615944728158208, '2024-05-06 17:49:48', 985, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (36, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1911, 88, 47, 135186678792712192, '2024-03-01 11:47:31', 320, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (37, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 881, 103, 179, 123615944728158208, '2024-05-14 04:09:12', 996, '2025-06-28 18:14:53', 0);
INSERT INTO `oj_post` VALUES (38, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 1677, 247, 115, 1067246875800000001, '2024-03-26 10:57:45', 198, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (39, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 1626, 125, 206, 1067246875800000001, '2024-03-14 01:04:58', 123615944728158208, '2024-05-18 23:14:39', 0);
INSERT INTO `oj_post` VALUES (40, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 513, 401, 271, 123615944728158208, '2024-04-15 21:06:45', 852, '2025-06-16 21:00:38', 0);
INSERT INTO `oj_post` VALUES (41, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 1427, 441, 28, 1067246875800000001, '2024-03-05 21:28:00', 427, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (42, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"前端\"]', 584, 31, 292, 123615944728158208, '2024-03-20 22:06:08', 453, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (43, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 84, 335, 269, 124716087158337536, '2024-05-10 21:10:03', 983, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (44, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Java\"]', 1697, 32, 297, 123615944728158208, '2024-03-25 09:25:56', 685, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (45, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 439, 203, 249, 123615944728158208, '2024-03-07 17:09:14', 480, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (46, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 409, 38, 86, 135186678792712192, '2024-05-09 17:02:26', 588, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (47, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Java\"]', 7, 262, 157, 1067246875800000001, '2024-05-14 05:16:58', 514, '2025-06-19 11:16:34', 0);
INSERT INTO `oj_post` VALUES (48, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"前端\"]', 1846, 239, 232, 1067246875800000001, '2024-03-09 11:23:56', 956, '2024-05-23 18:20:39', 0);
INSERT INTO `oj_post` VALUES (49, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 809, 397, 286, 124716087158337536, '2024-04-03 16:00:17', 611, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (50, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"AIGC\"]', 222, 341, 194, 135186678792712192, '2024-04-04 16:24:45', 510, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (51, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1652, 382, 284, 124716087158337536, '2024-03-20 06:23:42', 663, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (52, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 1506, 217, 255, 123615944728158208, '2024-03-28 05:48:37', 486, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (53, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1750, 84, 6, 1067246875800000001, '2024-03-11 16:30:35', 247, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (54, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Harmony OS\"]', 953, 219, 147, 135186678792712192, '2024-03-20 17:02:53', 747, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (55, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 831, 420, 289, 1067246875800000001, '2024-04-09 06:57:41', 281, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (56, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 790, 23, 69, 123615944728158208, '2024-04-17 09:33:30', 390, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (57, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"前端\"]', 1678, 484, 18, 124716087158337536, '2024-04-13 16:07:11', 123615944728158208, '2024-05-18 23:02:07', 0);
INSERT INTO `oj_post` VALUES (58, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 1365, 104, 203, 123615944728158208, '2024-05-07 16:22:24', 658, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (59, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 1584, 66, 51, 123615944728158208, '2024-04-17 23:04:17', 760, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (60, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 727, 465, 171, 135186678792712192, '2024-04-26 07:05:12', 451, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (61, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"前端\"]', 1122, 181, 79, 123615944728158208, '2024-04-21 16:12:21', 971, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (62, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 556, 274, 263, 135186678792712192, '2024-05-06 15:59:33', 726, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (63, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 1396, 434, 65, 124716087158337536, '2024-05-09 02:54:52', 171, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (64, '关于AI的思考(已修改）', 'aigc', '# 关于AI的思考  (AIGC)\n\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\n\n## AIGC的优势\n\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\n\n## AIGC的应用\n\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\n\n## AIGC的挑战\n\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\n\n## 市面上的AI官网\n\n以下是几个市面上比较火热的AI官网：\n\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[AIGC]', 1860, 11, 53, 123615944728158208, '2024-04-02 19:54:00', 177, '2025-06-18 09:36:38', 0);
INSERT INTO `oj_post` VALUES (65, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Harmony OS\"]', 1875, 74, 122, 1067246875800000001, '2024-04-10 14:13:18', 789, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (66, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 1755, 232, 27, 124716087158337536, '2024-04-08 04:24:09', 280, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (67, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 1485, 394, 288, 135186678792712192, '2024-03-28 17:47:42', 123615944728158208, '2024-05-18 17:14:59', 0);
INSERT INTO `oj_post` VALUES (68, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 1638, 294, 32, 123615944728158208, '2024-03-15 17:20:51', 123615944728158208, '2024-05-20 19:37:25', 0);
INSERT INTO `oj_post` VALUES (69, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 1255, 477, 293, 135186678792712192, '2024-05-08 10:08:33', 215, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (70, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 862, 139, 4, 1067246875800000001, '2024-05-14 22:20:41', 221, '2025-06-19 10:15:10', 0);
INSERT INTO `oj_post` VALUES (71, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 478, 186, 79, 123615944728158208, '2024-04-24 16:59:56', 623, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (72, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 951, 260, 129, 123615944728158208, '2024-04-04 05:52:42', 230, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (73, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"前端\"]', 1188, 466, 7, 124716087158337536, '2024-05-08 22:17:29', 638, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (74, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 415, 186, 103, 124716087158337536, '2024-04-12 03:59:19', 730, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (75, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Java\"]', 898, 145, 203, 124716087158337536, '2024-05-10 00:58:29', 780, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (76, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 1998, 58, 128, 135186678792712192, '2024-03-26 02:22:32', 123615944728158208, '2024-05-22 14:27:23', 0);
INSERT INTO `oj_post` VALUES (77, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Java\"]', 1668, 217, 92, 124716087158337536, '2024-04-23 00:49:25', 978, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (78, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1185, 108, 38, 135186678792712192, '2024-03-31 14:52:48', 63, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (79, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1450, 79, 247, 1067246875800000001, '2024-04-15 01:36:54', 289, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (80, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 638, 93, 101, 1067246875800000001, '2024-05-10 07:26:37', 709, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (81, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"后端\"]', 1513, 53, 269, 135186678792712192, '2024-04-29 06:22:21', 732, '2024-05-23 22:23:47', 0);
INSERT INTO `oj_post` VALUES (82, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 589, 380, 23, 135186678792712192, '2024-03-10 20:59:36', 94, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (83, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1947, 138, 125, 135186678792712192, '2024-04-26 10:53:01', 123615944728158208, '2024-05-18 23:01:44', 0);
INSERT INTO `oj_post` VALUES (84, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 329, 256, 129, 135186678792712192, '2024-04-16 15:48:48', 573, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (85, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 346, 374, 131, 123615944728158208, '2024-03-26 11:03:58', 982, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (86, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 921, 469, 68, 135186678792712192, '2024-04-12 23:29:40', 123615944728158208, '2024-05-19 20:50:05', 0);
INSERT INTO `oj_post` VALUES (87, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 770, 178, 73, 123615944728158208, '2024-04-09 16:24:03', 16, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (88, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1831, 241, 177, 124716087158337536, '2024-05-12 04:53:51', 864, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (89, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 518, 281, 272, 135186678792712192, '2024-03-30 06:47:23', 24, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (90, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 1941, 433, 49, 1067246875800000001, '2024-04-23 07:16:17', 48, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (91, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1543, 484, 199, 123615944728158208, '2024-03-18 04:11:19', 50, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (92, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1027, 195, 52, 124716087158337536, '2024-03-21 11:59:03', 860, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (93, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1315, 434, 233, 135186678792712192, '2024-04-21 20:20:37', 275, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (94, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 694, 299, 126, 1067246875800000001, '2024-04-30 12:49:22', 923, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (95, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 390, 361, 4, 124716087158337536, '2024-04-02 09:21:44', 787, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (96, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1797, 366, 30, 124716087158337536, '2024-03-31 00:28:23', 123615944728158208, '2024-05-15 22:37:20', 0);
INSERT INTO `oj_post` VALUES (97, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"前端\"]', 1887, 416, 46, 124716087158337536, '2024-05-03 19:24:29', 484, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (98, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 957, 13, 169, 135186678792712192, '2024-03-07 11:55:59', 448, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (99, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"前端\"]', 1224, 335, 231, 123615944728158208, '2024-03-22 10:58:29', 647, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (100, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"AIGC\"]', 1279, 297, 270, 123615944728158208, '2024-05-02 02:53:11', 616, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (101, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 532, 407, 196, 135186678792712192, '2024-03-13 23:33:18', 834, '2024-05-23 18:20:30', 0);
INSERT INTO `oj_post` VALUES (102, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1371, 431, 225, 124716087158337536, '2024-03-03 07:00:03', 867, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (103, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 735, 444, 143, 135186678792712192, '2024-03-11 09:28:07', 140, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (104, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"AIGC\"]', 709, 263, 64, 135186678792712192, '2024-03-17 23:35:37', 995, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (105, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 264, 259, 150, 135186678792712192, '2024-03-13 08:41:45', 872, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (106, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 125, 214, 297, 135186678792712192, '2024-03-06 16:27:28', 464, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (107, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 505, 264, 160, 124716087158337536, '2024-03-25 18:19:21', 403, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (108, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 505, 283, 8, 1067246875800000001, '2024-05-11 00:55:24', 266, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (109, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 1094, 457, 151, 123615944728158208, '2024-04-22 17:44:19', 123615944728158208, '2024-05-15 22:37:37', 0);
INSERT INTO `oj_post` VALUES (110, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Harmony OS\"]', 1807, 472, 52, 123615944728158208, '2024-04-10 03:58:34', 187, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (111, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"前端\"]', 1095, 322, 30, 1067246875800000001, '2024-04-05 08:12:33', 412, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (112, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"AIGC\"]', 667, 77, 10, 124716087158337536, '2024-03-05 17:17:10', 675, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (113, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 981, 183, 222, 135186678792712192, '2024-03-12 19:55:18', 825, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (114, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 1799, 63, 33, 123615944728158208, '2024-04-25 14:11:06', 10, '2025-06-19 11:17:46', 0);
INSERT INTO `oj_post` VALUES (115, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"后端\"]', 1329, 392, 36, 135186678792712192, '2024-04-08 03:16:43', 88, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (116, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Java\"]', 154, 273, 34, 124716087158337536, '2024-05-14 07:03:29', 58, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (117, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 1899, 205, 102, 135186678792712192, '2024-04-02 03:46:31', 123615944728158208, '2024-05-18 23:13:57', 0);
INSERT INTO `oj_post` VALUES (118, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 657, 122, 47, 135186678792712192, '2024-03-23 11:38:35', 223, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (119, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Harmony OS\"]', 1875, 447, 277, 123615944728158208, '2024-05-05 02:46:01', 452, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (120, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1149, 145, 211, 123615944728158208, '2024-04-04 04:18:18', 365, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (121, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 897, 19, 19, 124716087158337536, '2024-05-13 08:45:23', 980, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (122, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1097, 372, 295, 123615944728158208, '2024-04-01 14:56:07', 295, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (123, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 794, 313, 80, 1067246875800000001, '2024-03-26 06:05:07', 712, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (124, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 481, 72, 68, 1067246875800000001, '2024-03-19 01:22:49', 889, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (125, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"AIGC\"]', 855, 224, 220, 1067246875800000001, '2024-03-08 07:54:40', 13, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (126, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 693, 475, 229, 123615944728158208, '2024-05-04 00:33:14', 367, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (127, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 136, 475, 146, 1067246875800000001, '2024-04-16 22:58:08', 862, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (128, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 977, 10, 299, 1067246875800000001, '2024-04-04 21:48:49', 554, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (129, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 69, 130, 88, 135186678792712192, '2024-04-17 08:13:09', 397, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (130, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 626, 396, 97, 124716087158337536, '2024-04-11 20:10:07', 325, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (131, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Java\"]', 1476, 57, 1, 123615944728158208, '2024-04-23 15:11:28', 546, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (132, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 501, 249, 150, 123615944728158208, '2024-03-01 19:17:00', 604, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (133, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1940, 23, 195, 1067246875800000001, '2024-03-13 18:13:58', 123615944728158208, '2024-05-19 19:37:49', 0);
INSERT INTO `oj_post` VALUES (134, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 58, 178, 73, 1067246875800000001, '2024-04-14 05:54:53', 298, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (135, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 957, 120, 287, 123615944728158208, '2024-05-04 05:09:40', 483, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (136, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 632, 481, 296, 1067246875800000001, '2024-03-25 06:05:16', 550, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (137, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1919, 116, 86, 135186678792712192, '2024-03-10 13:31:24', 984, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (138, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 1800, 57, 248, 123615944728158208, '2024-03-10 23:50:39', 623, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (139, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 222, 192, 54, 135186678792712192, '2024-03-24 22:36:12', 186, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (140, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1602, 326, 278, 123615944728158208, '2024-04-20 21:26:10', 430, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (141, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Java\"]', 605, 102, 25, 123615944728158208, '2024-04-05 22:53:49', 787, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (142, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 842, 404, 108, 124716087158337536, '2024-05-09 02:03:59', 244, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (143, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 1017, 204, 86, 135186678792712192, '2024-03-24 18:13:17', 329, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (144, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 1872, 310, 70, 124716087158337536, '2024-04-02 13:05:16', 842, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (145, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 365, 154, 15, 1067246875800000001, '2024-04-27 12:10:36', 580, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (146, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1266, 333, 126, 135186678792712192, '2024-04-10 07:09:09', 914, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (147, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 484, 62, 299, 1067246875800000001, '2024-04-29 23:37:22', 957, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (148, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 1657, 22, 33, 124716087158337536, '2024-05-06 19:34:52', 595, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (149, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Java\"]', 309, 153, 153, 1067246875800000001, '2024-03-17 23:30:32', 279, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (150, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 606, 230, 169, 1067246875800000001, '2024-03-08 20:36:14', 52, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (151, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 1506, 290, 198, 123615944728158208, '2024-05-13 09:06:53', 626, '2025-06-19 11:17:44', 0);
INSERT INTO `oj_post` VALUES (152, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 215, 97, 52, 1067246875800000001, '2024-04-21 10:35:42', 697, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (153, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 1712, 373, 275, 1067246875800000001, '2024-04-03 09:35:43', 498, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (154, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 804, 26, 232, 124716087158337536, '2024-03-01 02:02:52', 66, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (155, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 276, 39, 13, 123615944728158208, '2024-04-25 03:19:19', 580, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (156, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 1382, 167, 208, 124716087158337536, '2024-03-16 10:08:35', 338, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (157, 'Vite 与 Vue 3', 'backend', '# 前端技术文档：Vite 与 Vue 3\n\n## 目录\n1. [简介](#简介)\n2. [环境配置](#环境配置)\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\n   - [创建 Vite 项目](#创建-vite-项目)\n3. [项目结构](#项目结构)\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\n5. [开发与热更新](#开发与热更新)\n6. [构建与部署](#构建与部署)\n7. [Vite 配置](#vite-配置)\n   - [vite.config.js](#viteconfigjs)\n8. [Vue 3 特性](#vue-3-特性)\n   - [组合式 API](#组合式-api)\n   - [单文件组件](#单文件组件)\n9. [插件与生态系统](#插件与生态系统)\n10. [结论](#结论)\n11. [参考资料](#参考资料)\n\n## 简介\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\n\n## 环境配置\n\n### 安装 Node.js 和 npm\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\n\n安装完成后，可以使用以下命令检查是否安装成功：\n```bash\nnode -v\nnpm -v\n```\n\n### 创建 Vite 项目\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\n```bash\nnpm create vite@latest\n```\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\n\n进入项目目录并安装依赖：\n```bash\ncd your-project-name\nnpm install\n```\n\n## 项目结构\n生成的项目结构如下：\n```\nyour-project-name\n├── index.html\n├── package.json\n├── src\n│   ├── assets\n│   │   └── logo.png\n│   ├── components\n│   │   └── HelloWorld.vue\n│   ├── App.vue\n│   └── main.js\n├── vite.config.js\n└── node_modules\n```\n\n## 编写第一个 Vue 3 应用\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\n```vue\n<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click=\"updateMessage\">Click me</button>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from \'vue\'\n\nconst message = ref(\'Hello, Vue 3!\')\nconst updateMessage = () => {\n  message.value = \'You clicked the button!\'\n}\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>\n```\n\n在 `App.vue` 中使用新组件：\n```vue\n<template>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n  <MyComponent />\n</template>\n\n<script setup>\nimport MyComponent from \'./components/MyComponent.vue\'\n</script>\n```\n\n## 开发与热更新\n启动开发服务器：\n```bash\nnpm run dev\n```\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\n\n## 构建与部署\n构建生产版本：\n```bash\nnpm run build\n```\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\n\n## Vite 配置\n\n### vite.config.js\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\n```js\nimport { defineConfig } from \'vite\'\nimport vue from \'@vitejs/plugin-vue\'\n\nexport default defineConfig({\n  plugins: [vue()],\n  resolve: {\n    alias: {\n      \'@\': \'/src\'\n    }\n  }\n})\n```\n\n## Vue 3 特性\n\n### 组合式 API\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\n```vue\n<template>\n  <div>{{ count }}</div>\n  <button @click=\"increment\">Increment</button>\n</template>\n\n<script setup>\nimport { ref } from \'vue\'\n\nconst count = ref(0)\nconst increment = () => {\n  count.value++\n}\n</script>\n```\n\n### 单文件组件\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\n\n## 插件与生态系统\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\n\n## 结论\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\n\n## 参考资料\n- [Vite 官方文档](https://vitejs.dev/)\n- [Vue 3 官方文档](https://v3.vuejs.org/)\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[Java]', 291, 451, 81, 123615944728158208, '2024-05-07 06:36:52', 487, '2025-06-18 11:50:37', 0);
INSERT INTO `oj_post` VALUES (158, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 709, 135, 29, 1067246875800000001, '2024-05-08 01:41:54', 544, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (159, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 509, 368, 232, 123615944728158208, '2024-04-14 15:04:04', 881, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (160, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 62, 422, 285, 135186678792712192, '2024-05-07 10:03:15', 438, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (161, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"前端\"]', 1122, 445, 219, 123615944728158208, '2024-03-07 11:08:56', 347, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (162, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 417, 291, 45, 123615944728158208, '2024-03-10 09:47:19', 616, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (163, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 392, 380, 225, 135186678792712192, '2024-03-29 00:36:13', 844, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (164, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 1838, 16, 180, 123615944728158208, '2024-05-10 21:04:38', 123615944728158208, '2024-05-19 19:37:19', 0);
INSERT INTO `oj_post` VALUES (165, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1912, 464, 73, 124716087158337536, '2024-04-22 12:30:59', 123615944728158208, '2024-05-19 19:58:52', 0);
INSERT INTO `oj_post` VALUES (166, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"AIGC\"]', 1090, 60, 63, 124716087158337536, '2024-04-09 15:11:10', 509, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (167, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Java\"]', 1752, 157, 140, 135186678792712192, '2024-04-27 20:13:51', 353, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (168, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Harmony OS\"]', 977, 88, 177, 135186678792712192, '2024-03-17 06:01:24', 300, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (169, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"AIGC\"]', 761, 129, 216, 1067246875800000001, '2024-04-15 10:09:42', 129, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (170, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1760, 354, 210, 135186678792712192, '2024-03-25 00:35:44', 278, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (171, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1345, 47, 296, 1067246875800000001, '2024-04-04 23:29:28', 687, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (172, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1596, 241, 61, 1067246875800000001, '2024-04-29 21:55:46', 128, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (173, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 1673, 294, 194, 124716087158337536, '2024-03-12 17:10:21', 198, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (174, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"后端\"]', 4, 96, 5, 124716087158337536, '2024-03-30 03:55:14', 507, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (175, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 367, 246, 27, 124716087158337536, '2024-03-08 23:06:26', 940, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (176, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 842, 172, 247, 1067246875800000001, '2024-04-19 16:11:50', 449, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (177, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 1369, 160, 106, 123615944728158208, '2024-03-06 20:32:59', 946, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (178, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 829, 492, 264, 123615944728158208, '2024-03-19 15:41:16', 525, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (179, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1524, 108, 89, 123615944728158208, '2024-03-28 04:02:24', 701, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (180, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 1019, 444, 163, 1067246875800000001, '2024-03-05 21:24:43', 748, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (181, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 768, 390, 20, 123615944728158208, '2024-03-25 16:46:10', 155, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (182, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Harmony OS\"]', 647, 153, 121, 1067246875800000001, '2024-04-06 13:50:29', 394, '2024-05-23 22:25:04', 0);
INSERT INTO `oj_post` VALUES (183, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Java\"]', 57, 267, 141, 1067246875800000001, '2024-04-24 21:26:25', 441, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (184, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 1297, 143, 239, 124716087158337536, '2024-05-03 05:17:01', 514, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (185, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 1132, 264, 293, 1067246875800000001, '2024-04-28 08:15:32', 990, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (186, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 1304, 181, 191, 1067246875800000001, '2024-04-07 06:09:48', 471, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (187, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"AIGC\"]', 524, 133, 59, 124716087158337536, '2024-04-02 21:03:57', 70, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (188, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 55, 463, 279, 1067246875800000001, '2024-03-02 05:43:05', 682, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (189, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 1670, 134, 286, 1067246875800000001, '2024-04-11 16:46:55', 349, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (190, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 972, 102, 29, 124716087158337536, '2024-03-09 23:39:10', 315, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (191, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1164, 293, 270, 1067246875800000001, '2024-03-17 10:37:28', 266, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (192, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Harmony OS\"]', 1730, 393, 229, 1067246875800000001, '2024-05-02 23:07:17', 286, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (193, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"前端\"]', 1870, 452, 167, 124716087158337536, '2024-03-03 12:56:14', 923, '2024-05-23 22:24:06', 0);
INSERT INTO `oj_post` VALUES (194, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Java\"]', 614, 232, 289, 124716087158337536, '2024-05-02 12:21:13', 995, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (195, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 108, 192, 187, 124716087158337536, '2024-03-23 22:54:56', 163, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (196, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 178, 382, 64, 123615944728158208, '2024-04-17 04:59:19', 483, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (197, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1526, 274, 77, 123615944728158208, '2024-03-07 03:09:08', 123615944728158208, '2024-05-18 13:48:25', 0);
INSERT INTO `oj_post` VALUES (198, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 1933, 270, 60, 124716087158337536, '2024-04-23 17:38:22', 829, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (199, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 43, 489, 187, 123615944728158208, '2024-04-04 17:44:21', 192, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (200, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1236, 172, 176, 123615944728158208, '2024-03-20 04:04:20', 89, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (201, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 1706, 302, 177, 135186678792712192, '2024-04-28 11:00:12', 636, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (202, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1131, 129, 274, 1067246875800000001, '2024-03-06 13:00:57', 32, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (203, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1094, 90, 209, 124716087158337536, '2024-04-04 01:09:16', 813, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (204, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 406, 327, 185, 1067246875800000001, '2024-04-28 20:55:24', 260, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (205, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 783, 111, 188, 123615944728158208, '2024-03-28 01:09:08', 934, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (206, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 1794, 264, 280, 123615944728158208, '2024-03-11 00:09:58', 24, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (207, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 2, 260, 295, 135186678792712192, '2024-04-30 13:16:41', 227, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (208, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"AIGC\"]', 537, 79, 70, 123615944728158208, '2024-03-05 23:07:02', 500, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (209, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 947, 272, 10, 135186678792712192, '2024-03-04 13:55:00', 891, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (210, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 1312, 78, 236, 1067246875800000001, '2024-04-05 13:41:34', 342, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (211, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"前端\"]', 426, 363, 191, 135186678792712192, '2024-04-09 16:56:23', 238, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (212, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"前端\"]', 376, 282, 230, 135186678792712192, '2024-04-23 00:29:17', 749, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (213, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Java\"]', 566, 130, 63, 124716087158337536, '2024-04-15 01:04:09', 528, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (214, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1308, 186, 164, 124716087158337536, '2024-04-12 09:14:10', 361, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (215, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 1863, 320, 92, 135186678792712192, '2024-03-07 18:14:08', 533, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (216, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 1247, 251, 185, 135186678792712192, '2024-04-26 07:15:59', 766, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (217, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 1789, 402, 90, 123615944728158208, '2024-05-09 08:46:34', 386, '2025-06-19 11:17:02', 0);
INSERT INTO `oj_post` VALUES (218, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 857, 265, 282, 135186678792712192, '2024-04-29 09:34:18', 284, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (219, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 511, 229, 270, 123615944728158208, '2024-04-10 21:23:04', 630, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (220, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 1331, 85, 217, 123615944728158208, '2024-04-02 13:32:29', 874, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (221, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1119, 43, 150, 1067246875800000001, '2024-04-02 07:27:13', 686, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (222, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1092, 487, 66, 1067246875800000001, '2024-05-09 18:16:38', 998, '2025-06-13 13:51:14', 0);
INSERT INTO `oj_post` VALUES (223, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"后端\"]', 1114, 404, 24, 124716087158337536, '2024-04-07 16:21:07', 637, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (224, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 814, 38, 278, 135186678792712192, '2024-05-04 00:49:39', 107, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (225, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 430, 153, 40, 1067246875800000001, '2024-04-26 03:19:47', 358, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (226, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 241, 43, 99, 135186678792712192, '2024-03-19 15:22:59', 328, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (227, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Harmony OS\"]', 1362, 366, 144, 123615944728158208, '2024-04-16 12:25:51', 710, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (228, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"后端\"]', 182, 89, 75, 1067246875800000001, '2024-04-22 20:14:49', 760, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (229, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 156, 400, 200, 1067246875800000001, '2024-03-24 14:25:31', 372, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (230, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1014, 478, 127, 123615944728158208, '2024-03-25 05:33:25', 171, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (231, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 1560, 206, 120, 124716087158337536, '2024-03-06 04:11:35', 188, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (232, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"后端\"]', 1131, 80, 210, 1067246875800000001, '2024-03-08 18:23:01', 730, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (233, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"前端\"]', 128, 146, 297, 1067246875800000001, '2024-05-05 20:02:40', 463, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (234, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"前端\"]', 393, 375, 78, 135186678792712192, '2024-04-24 16:21:42', 991, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (235, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 92, 253, 279, 135186678792712192, '2024-04-21 19:00:47', 556, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (236, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"AIGC\"]', 1951, 33, 145, 124716087158337536, '2024-04-24 01:04:07', 123615944728158208, '2024-05-19 20:48:57', 0);
INSERT INTO `oj_post` VALUES (237, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1341, 372, 201, 123615944728158208, '2024-03-11 21:06:43', 215, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (238, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Java\"]', 769, 98, 123, 1067246875800000001, '2024-04-01 12:53:34', 345, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (239, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1648, 116, 124, 124716087158337536, '2024-03-28 20:53:04', 602, '2024-05-15 22:19:35', 0);
INSERT INTO `oj_post` VALUES (240, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 483, 378, 156, 1067246875800000001, '2024-05-09 06:37:50', 970, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (241, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"AIGC\"]', 1510, 351, 234, 135186678792712192, '2024-04-30 03:45:46', 718, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (242, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"AIGC\"]', 754, 397, 61, 124716087158337536, '2024-04-26 22:08:09', 566, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (243, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Harmony OS\"]', 1418, 121, 223, 123615944728158208, '2024-03-22 10:33:03', 365, '2024-05-15 22:00:30', 0);
INSERT INTO `oj_post` VALUES (244, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 956, 384, 226, 124716087158337536, '2024-05-14 01:25:43', 489, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (245, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'synthesis', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\r\n\r\n## 引言\r\n\r\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\r\n\r\n## Vue3：前端开发的新篇章\r\n\r\n### 组件新特性\r\n\r\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\r\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\r\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\r\n\r\n### 搭建Vue3项目\r\n\r\n```bash\r\n# 使用Vue CLI创建Vue3项目\r\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\r\n```\r\n\r\n## Spring Boot：后端开发的加速器\r\n\r\n### 核心优势\r\n\r\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\r\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\r\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\r\n\r\n### 初始化Spring Boot项目\r\n\r\n```groovy\r\n// build.gradle\r\ndependencies {\r\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\r\n}\r\n```\r\n\r\n## Vue3与Spring Boot集成\r\n\r\n### RESTful API通信\r\n\r\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\r\n\r\n#### Spring Boot端示例（Controller）\r\n\r\n```java\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n    @GetMapping\r\n    public List<User> getUsers() {\r\n        // 返回用户列表逻辑\r\n    }\r\n}\r\n```\r\n\r\n#### Vue3端示例（使用Axios）\r\n\r\n```javascript\r\nimport axios from \'axios\';\r\n\r\nexport default {\r\n    async fetchUsers() {\r\n        const response = await axios.get(\'/api/users\');\r\n        this.users = response.data;\r\n    }\r\n}\r\n```\r\n\r\n### 安全性考量\r\n\r\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\r\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\r\n\r\n## 结语\r\n\r\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[\"Java\"]', 1175, 64, 260, 123615944728158208, '2024-04-05 06:07:59', 111, '2024-05-15 22:31:40', 0);
INSERT INTO `oj_post` VALUES (246, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"前端\"]', 992, 111, 155, 124716087158337536, '2024-03-20 20:20:06', 632, '2024-05-20 19:38:23', 0);
INSERT INTO `oj_post` VALUES (247, '关于AI的思考', 'aigc', '# 关于AI的思考  (AIGC)\r\n\r\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\r\n\r\n## AIGC的优势\r\n\r\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\r\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\r\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\r\n\r\n## AIGC的应用\r\n\r\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\r\n\r\n## AIGC的挑战\r\n\r\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\r\n\r\n## 市面上的AI官网\r\n\r\n以下是几个市面上比较火热的AI官网：\r\n\r\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\r\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\r\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\r\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[\"AIGC\"]', 809, 49, 256, 1067246875800000001, '2024-04-17 20:43:02', 107, '2024-05-15 22:27:25', 0);
INSERT INTO `oj_post` VALUES (248, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"前端\"]', 1341, 249, 206, 124716087158337536, '2024-03-25 09:23:32', 840, '2024-05-15 22:09:08', 0);
INSERT INTO `oj_post` VALUES (249, 'Vite 与 Vue 3', 'frontend', '# 前端技术文档：Vite 与 Vue 3\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\r\n   - [创建 Vite 项目](#创建-vite-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\r\n5. [开发与热更新](#开发与热更新)\r\n6. [构建与部署](#构建与部署)\r\n7. [Vite 配置](#vite-配置)\r\n   - [vite.config.js](#viteconfigjs)\r\n8. [Vue 3 特性](#vue-3-特性)\r\n   - [组合式 API](#组合式-api)\r\n   - [单文件组件](#单文件组件)\r\n9. [插件与生态系统](#插件与生态系统)\r\n10. [结论](#结论)\r\n11. [参考资料](#参考资料)\r\n\r\n## 简介\r\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Node.js 和 npm\r\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\r\n\r\n安装完成后，可以使用以下命令检查是否安装成功：\r\n```bash\r\nnode -v\r\nnpm -v\r\n```\r\n\r\n### 创建 Vite 项目\r\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\r\n```bash\r\nnpm create vite@latest\r\n```\r\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\r\n\r\n进入项目目录并安装依赖：\r\n```bash\r\ncd your-project-name\r\nnpm install\r\n```\r\n\r\n## 项目结构\r\n生成的项目结构如下：\r\n```\r\nyour-project-name\r\n├── index.html\r\n├── package.json\r\n├── src\r\n│   ├── assets\r\n│   │   └── logo.png\r\n│   ├── components\r\n│   │   └── HelloWorld.vue\r\n│   ├── App.vue\r\n│   └── main.js\r\n├── vite.config.js\r\n└── node_modules\r\n```\r\n\r\n## 编写第一个 Vue 3 应用\r\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>{{ message }}</h1>\r\n    <button @click=\"updateMessage\">Click me</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst message = ref(\'Hello, Vue 3!\')\r\nconst updateMessage = () => {\r\n  message.value = \'You clicked the button!\'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #42b983;\r\n}\r\n</style>\r\n```\r\n\r\n在 `App.vue` 中使用新组件：\r\n```vue\r\n<template>\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <MyComponent />\r\n</template>\r\n\r\n<script setup>\r\nimport MyComponent from \'./components/MyComponent.vue\'\r\n</script>\r\n```\r\n\r\n## 开发与热更新\r\n启动开发服务器：\r\n```bash\r\nnpm run dev\r\n```\r\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\r\n\r\n## 构建与部署\r\n构建生产版本：\r\n```bash\r\nnpm run build\r\n```\r\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\r\n\r\n## Vite 配置\r\n\r\n### vite.config.js\r\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport vue from \'@vitejs/plugin-vue\'\r\n\r\nexport default defineConfig({\r\n  plugins: [vue()],\r\n  resolve: {\r\n    alias: {\r\n      \'@\': \'/src\'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Vue 3 特性\r\n\r\n### 组合式 API\r\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\r\n```vue\r\n<template>\r\n  <div>{{ count }}</div>\r\n  <button @click=\"increment\">Increment</button>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst count = ref(0)\r\nconst increment = () => {\r\n  count.value++\r\n}\r\n</script>\r\n```\r\n\r\n### 单文件组件\r\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\r\n\r\n## 插件与生态系统\r\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\r\n\r\n## 结论\r\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\r\n\r\n## 参考资料\r\n- [Vite 官方文档](https://vitejs.dev/)\r\n- [Vue 3 官方文档](https://v3.vuejs.org/)\r\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\r\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[\"Java\"]', 137, 263, 139, 124716087158337536, '2024-04-11 12:59:19', 123615944728158208, '2024-05-19 20:49:18', 0);
INSERT INTO `oj_post` VALUES (250, 'HarmonyOS', 'harmony', '# HarmonyOS 技术文档\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [开发工具](#开发工具)\r\n   - [创建项目](#创建项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [调试与运行](#调试与运行)\r\n6. [构建与部署](#构建与部署)\r\n7. [开发指南](#开发指南)\r\n   - [页面与路由](#页面与路由)\r\n   - [组件与布局](#组件与布局)\r\n   - [状态管理](#状态管理)\r\n8. [常见问题](#常见问题)\r\n9. [参考资料](#参考资料)\r\n\r\n## 简介\r\nHarmonyOS 是由华为开发的一款分布式操作系统，旨在提供跨设备无缝体验。本文档将介绍如何配置开发环境，创建并构建第一个 HarmonyOS 应用。\r\n\r\n## 环境配置\r\n\r\n### 开发工具\r\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\r\n\r\n安装完成后，启动 DevEco Studio 并配置开发环境。\r\n\r\n### 创建项目\r\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\r\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\r\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\r\n\r\n## 项目结构\r\n一个典型的 HarmonyOS 项目结构如下：\r\n```\r\nyour-project-name\r\n├── entry\r\n│   ├── src\r\n│   │   ├── main\r\n│   │   │   ├── config.json\r\n│   │   │   ├── js\r\n│   │   │   │   └── default\r\n│   │   │   │       └── pages\r\n│   │   │   │           └── index\r\n│   │   │   │               ├── index.hml\r\n│   │   │   │               ├── index.css\r\n│   │   │   │               └── index.js\r\n│   │   └── test\r\n│   └── build.gradle\r\n├── .gitignore\r\n└── settings.gradle\r\n```\r\n\r\n## 编写第一个应用\r\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>My First HarmonyOS App</title>\r\n    <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Hello, HarmonyOS!</h1>\r\n        <button onclick=\"showMessage()\">Click me</button>\r\n        <p id=\"message\"></p>\r\n    </div>\r\n    <script src=\"index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n编辑 `index.js` 文件：\r\n```javascript\r\nfunction showMessage() {\r\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\r\n}\r\n```\r\n\r\n编辑 `index.css` 文件：\r\n```css\r\n.container {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n}\r\n\r\np {\r\n    color: #42b983;\r\n    font-size: 18px;\r\n}\r\n```\r\n\r\n## 调试与运行\r\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\r\n\r\n## 构建与部署\r\n构建 HarmonyOS 应用：\r\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\r\n\r\n构建完成后，将生成的安装包部署到目标设备上运行。\r\n\r\n## 开发指南\r\n\r\n### 页面与路由\r\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\r\n\r\n### 组件与布局\r\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\r\n\r\n### 状态管理\r\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\r\n\r\n## 常见问题\r\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\r\n2. **编译错误**：检查代码语法和配置文件是否正确。\r\n\r\n## 参考资料\r\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\r\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\r\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\r\n\r\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[\"HarmonyOS\"]', 1978, 32, 121, 124716087158337536, '2024-05-07 05:51:17', 123615944728158208, '2025-06-19 11:18:00', 0);
INSERT INTO `oj_post` VALUES (251, 'Spring Boot 入门指南', 'backend', '# Spring Boot 入门指南\r\n\r\n## 目录\r\n1. [简介](#简介)\r\n2. [环境配置](#环境配置)\r\n   - [安装 Java](#安装-java)\r\n   - [安装 Maven](#安装-maven)\r\n   - [创建 Spring Boot 项目](#创建-spring-boot-项目)\r\n3. [项目结构](#项目结构)\r\n4. [编写第一个应用](#编写第一个应用)\r\n5. [运行应用](#运行应用)\r\n6. [常见配置](#常见配置)\r\n   - [application.properties 配置](#applicationproperties-配置)\r\n   - [YAML 配置](#yaml-配置)\r\n7. [Spring Boot 特性](#spring-boot-特性)\r\n   - [自动配置](#自动配置)\r\n   - [Spring Boot Starter](#spring-boot-starter)\r\n   - [Spring Boot Actuator](#spring-boot-actuator)\r\n8. [构建和部署](#构建和部署)\r\n   - [使用 Maven 构建](#使用-maven-构建)\r\n   - [Docker 部署](#docker-部署)\r\n9. [结论](#结论)\r\n10. [参考资料](#参考资料)\r\n\r\n## 简介\r\nSpring Boot 是 Spring 框架的一个子项目，旨在简化新 Spring 应用的初始搭建及开发过程。通过提供一系列开箱即用的默认配置，Spring Boot 让开发者可以更快速地构建生产级别的 Spring 应用。\r\n\r\n## 环境配置\r\n\r\n### 安装 Java\r\nSpring Boot 基于 Java，因此需要先安装 Java 开发环境（JDK）。\r\n1. 访问 [Oracle Java 下载页面](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) 下载并安装最新版本的 JDK。\r\n2. 安装完成后，配置环境变量 `JAVA_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 安装 Maven\r\nMaven 是一个项目管理和构建工具，Spring Boot 项目通常使用 Maven 进行构建。\r\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi) 下载并安装最新版本的 Maven。\r\n2. 配置环境变量 `MAVEN_HOME` 并添加 `bin` 目录到 `PATH`。\r\n\r\n### 创建 Spring Boot 项目\r\n可以通过 Spring Initializr 快速创建 Spring Boot 项目：\r\n1. 访问 [Spring Initializr](https://start.spring.io/)，填写项目信息，选择需要的依赖项，然后点击 \"Generate\" 生成项目。\r\n2. 下载生成的项目压缩包并解压。\r\n\r\n## 项目结构\r\n解压后的 Spring Boot 项目结构如下：\r\n```\r\nmy-spring-boot-app\r\n├── src\r\n│   ├── main\r\n│   │   ├── java\r\n│   │   │   └── com\r\n│   │   │       └── example\r\n│   │   │           └── MySpringBootApp.java\r\n│   │   └── resources\r\n│   │       └── application.properties\r\n│   └── test\r\n│       └── java\r\n│           └── com\r\n│               └── example\r\n│                   └── MySpringBootAppTests.java\r\n├── mvnw\r\n├── mvnw.cmd\r\n├── pom.xml\r\n└── README.md\r\n```\r\n\r\n## 编写第一个应用\r\n在 `src/main/java/com/example` 目录下创建一个名为 `MySpringBootApp.java` 的文件：\r\n```java\r\npackage com.example;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\npublic class MySpringBootApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MySpringBootApp.class, args);\r\n    }\r\n\r\n    @RestController\r\n    class HelloController {\r\n        @GetMapping(\"/hello\")\r\n        public String hello() {\r\n            return \"Hello, Spring Boot!\";\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 运行应用\r\n在项目根目录下运行以下命令启动应用：\r\n```bash\r\n./mvnw spring-boot:run\r\n```\r\n启动后，访问 `http://localhost:8080/hello`，应该会看到 \"Hello, Spring Boot!\" 的响应。\r\n\r\n## 常见配置\r\n\r\n### application.properties 配置\r\n`application.properties` 文件用于配置 Spring Boot 应用的各种属性，例如：\r\n```properties\r\nserver.port=8081\r\nspring.application.name=MySpringBootApp\r\n```\r\n\r\n### YAML 配置\r\nSpring Boot 也支持 YAML 格式的配置文件 `application.yml`：\r\n```yaml\r\nserver:\r\n  port: 8081\r\nspring:\r\n  application:\r\n    name: MySpringBootApp\r\n```\r\n\r\n## Spring Boot 特性\r\n\r\n### 自动配置\r\nSpring Boot 提供了大量的自动配置类，极大简化了配置过程。例如，添加 `spring-boot-starter-web` 依赖即可自动配置 Spring MVC。\r\n\r\n### Spring Boot Starter\r\nStarters 是一组方便的依赖描述符，您只需添加一个 starter 依赖，即可获取一组相关的库。例如：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n### Spring Boot Actuator\r\nActuator 提供了生产环境中的监控和管理功能。可以在 `pom.xml` 中添加以下依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 构建和部署\r\n\r\n### 使用 Maven 构建\r\n在项目根目录下运行以下命令构建项目：\r\n```bash\r\n./mvnw clean package\r\n```\r\n构建成功后，`target` 目录下会生成一个可执行的 JAR 文件。\r\n\r\n### Docker 部署\r\n创建一个 `Dockerfile`：\r\n```dockerfile\r\nFROM openjdk:11-jre-slim\r\nCOPY target/my-spring-boot-app.jar /app.jar\r\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\r\n```\r\n构建 Docker 镜像并运行容器：\r\n```bash\r\ndocker build -t my-spring-boot-app .\r\ndocker run -p 8080:8080 my-spring-boot-app\r\n```\r\n\r\n## 结论\r\nSpring Boot 简化了 Spring 应用的开发过程，通过自动配置、Starter 和 Actuator 等特性，开发者可以更专注于业务逻辑的实现。\r\n\r\n## 参考资料\r\n- [Spring Boot 官方文档](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n- [Spring Initializr](https://start.spring.io/)\r\n- [Spring Boot GitHub 仓库](https://github.com/spring-projects/spring-boot)', '[\"Springboot\"]', 5, 1, 1, 123615944728158208, '2024-05-15 21:53:09', 123615944728158208, '2025-06-18 11:49:35', 0);
INSERT INTO `oj_post` VALUES (252, 'Vite 与 Vue 3 (修改)', 'synthesis', '# 前端技术文档：Vite 与 Vue 3\n\n## 目录\n1. [简介](#简介)\n2. [环境配置](#环境配置)\n   - [安装 Node.js 和 npm](#安装-nodejs-和-npm)\n   - [创建 Vite 项目](#创建-vite-项目)\n3. [项目结构](#项目结构)\n4. [编写第一个 Vue 3 应用](#编写第一个-vue-3-应用)\n5. [开发与热更新](#开发与热更新)\n6. [构建与部署](#构建与部署)\n7. [Vite 配置](#vite-配置)\n   - [vite.config.js](#viteconfigjs)\n8. [Vue 3 特性](#vue-3-特性)\n   - [组合式 API](#组合式-api)\n   - [单文件组件](#单文件组件)\n9. [插件与生态系统](#插件与生态系统)\n10. [结论](#结论)\n11. [参考资料](#参考资料)11111111\n\n## 简介\nVite 是一个新型的前端构建工具，具有极速的开发服务器和轻量的生产构建。Vue 3 是 Vue.js 的最新版本，带来了组合式 API 等新特性。本文档将介绍如何使用 Vite 构建一个 Vue 3 应用。\n\n## 环境配置\n\n### 安装 Node.js 和 npm\n首先，需要安装 Node.js 和 npm。可以从 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本。\n\n安装完成后，可以使用以下命令检查是否安装成功：\n```bash\nnode -v\nnpm -v\n```\n\n### 创建 Vite 项目\n使用 Vite 创建一个 Vue 3 项目非常简单。运行以下命令：\n```bash\nnpm create vite@latest\n```\n然后根据提示输入项目名称并选择模板（选择 `vue` 或 `vue-ts`）。\n\n进入项目目录并安装依赖：\n```bash\ncd your-project-name\nnpm install\n```\n\n## 项目结构\n生成的项目结构如下：\n```\nyour-project-name\n├── index.html\n├── package.json\n├── src\n│   ├── assets\n│   │   └── logo.png\n│   ├── components\n│   │   └── HelloWorld.vue\n│   ├── App.vue\n│   └── main.js\n├── vite.config.js\n└── node_modules\n```\n\n## 编写第一个 Vue 3 应用\n在 `src/components` 目录下创建一个新的组件文件 `MyComponent.vue`：\n```vue\n<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click=\"updateMessage\">Click me</button>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from \'vue\'\n\nconst message = ref(\'Hello, Vue 3!\')\nconst updateMessage = () => {\n  message.value = \'You clicked the button!\'\n}\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>\n```\n\n在 `App.vue` 中使用新组件：\n```vue\n<template>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n  <MyComponent />\n</template>\n\n<script setup>\nimport MyComponent from \'./components/MyComponent.vue\'\n</script>\n```\n\n## 开发与热更新\n启动开发服务器：\n```bash\nnpm run dev\n```\n开发服务器启动后，可以在浏览器中打开 `http://localhost:3000` 查看应用效果。Vite 提供了极速的模块热更新（HMR），修改代码后无需刷新页面即可看到变化。\n\n## 构建与部署\n构建生产版本：\n```bash\nnpm run build\n```\n构建完成后，生成的文件位于 `dist` 目录下，可以将该目录下的内容部署到任何静态文件服务器。\n\n## Vite 配置\n\n### vite.config.js\n`vite.config.js` 是 Vite 的配置文件，可以在其中进行各种配置。例如，配置别名：\n```js\nimport { defineConfig } from \'vite\'\nimport vue from \'@vitejs/plugin-vue\'\n\nexport default defineConfig({\n  plugins: [vue()],\n  resolve: {\n    alias: {\n      \'@\': \'/src\'\n    }\n  }\n})\n```\n\n## Vue 3 特性\n\n### 组合式 API\nVue 3 引入了组合式 API，使得逻辑更容易复用和组合。例如：\n```vue\n<template>\n  <div>{{ count }}</div>\n  <button @click=\"increment\">Increment</button>\n</template>\n\n<script setup>\nimport { ref } from \'vue\'\n\nconst count = ref(0)\nconst increment = () => {\n  count.value++\n}\n</script>\n```\n\n### 单文件组件\nVue 3 继续支持单文件组件（SFC），即 `.vue` 文件。单文件组件将模板、逻辑和样式集中在一个文件中，方便开发和维护。\n\n## 插件与生态系统\nVite 和 Vue 3 都有丰富的插件和扩展生态系统。例如，可以使用 `@vitejs/plugin-vue` 来支持 Vue 3 的单文件组件。还可以使用其他插件如 `vite-plugin-pwa` 来添加 PWA 支持。\n\n## 结论\n通过结合 Vite 和 Vue 3，可以快速构建现代的前端应用。Vite 提供了极快的开发体验和轻量的生产构建，而 Vue 3 带来了强大的新特性和更好的性能。\n\n## 参考资料\n- [Vite 官方文档](https://vitejs.dev/)\n- [Vue 3 官方文档](https://v3.vuejs.org/)\n- [Vite GitHub 仓库](https://github.com/vitejs/vite)\n- [Vue 3 GitHub 仓库](https://github.com/vuejs/vue-next)', '[Vue,Vite]', 3, 0, 0, 123615944728158208, '2024-05-15 22:04:53', NULL, '2025-06-18 10:53:20', 0);
INSERT INTO `oj_post` VALUES (253, 'HarmonyOS', 'synthesis', '# HarmonyOS 技术文档\n\n## 目录\n1. [简介](#简介)\n2. [环境配置](#环境配置)\n   - [开发工具](#开发工具)\n   - [创建项目](#创建项目)\n3. [项目结构](#项目结构)\n4. [编写第一个应用](#编写第一个应用)\n5. [调试与运行](#调试与运行)\n6. [构建与部署](#构建与部署)\n7. [开发指南](#开发指南)\n   - [页面与路由](#页面与路由)\n   - [组件与布局](#组件与布局)\n   - [状态管理](#状态管理)\n8. [常见问题](#常见问题)\n9. [参考资料](#参考资料)\n\n## 简介\n\n\n## 环境配置\n\n### 开发工具\n首先，需要安装 HarmonyOS 的开发工具 DevEco Studio。可以从 [DevEco Studio 官网](https://developer.harmonyos.com/cn/develop/deveco-studio) 下载并安装最新版本。\n\n安装完成后，启动 DevEco Studio 并配置开发环境。\n\n### 创建项目\n在 DevEco Studio 中创建一个新的 HarmonyOS 项目：\n1. 打开 DevEco Studio，点击 “Start a new HarmonyOS Project”。\n2. 选择项目模板，输入项目名称和保存位置，点击 “Finish” 创建项目。\n\n## 项目结构\n一个典型的 HarmonyOS 项目结构如下：\n```\nyour-project-name\n├── entry\n│   ├── src\n│   │   ├── main\n│   │   │   ├── config.json\n│   │   │   ├── js\n│   │   │   │   └── default\n│   │   │   │       └── pages\n│   │   │   │           └── index\n│   │   │   │               ├── index.hml\n│   │   │   │               ├── index.css\n│   │   │   │               └── index.js\n│   │   └── test\n│   └── build.gradle\n├── .gitignore\n└── settings.gradle\n```\n\n## 编写第一个应用\n在 `entry/src/main/js/default/pages/index` 目录下，编辑 `index.hml` 文件，添加以下内容：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>My First HarmonyOS App</title>\n    <link rel=\"stylesheet\" href=\"index.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Hello, HarmonyOS!</h1>\n        <button onclick=\"showMessage()\">Click me</button>\n        <p id=\"message\"></p>\n    </div>\n    <script src=\"index.js\"></script>\n</body>\n</html>\n```\n\n编辑 `index.js` 文件：\n```javascript\nfunction showMessage() {\n    document.getElementById(\'message\').innerText = \'Button clicked!\';\n}\n```\n\n编辑 `index.css` 文件：\n```css\n.container {\n    text-align: center;\n    margin-top: 50px;\n}\n\nbutton {\n    padding: 10px 20px;\n    font-size: 16px;\n}\n\np {\n    color: #42b983;\n    font-size: 18px;\n}\n```\n\n## 调试与运行\n在 DevEco Studio 中，点击工具栏中的运行按钮，选择运行目标设备（模拟器或真实设备）。应用将会在指定设备上启动并运行。\n\n## 构建与部署\n构建 HarmonyOS 应用：\n1. 在 DevEco Studio 中，点击 “Build” 菜单，选择 “Build Bundle(s) / APK(s) > Build Bundle(s)”。\n\n构建完成后，将生成的安装包部署到目标设备上运行。\n\n## 开发指南\n\n### 页面与路由\n在 HarmonyOS 中，页面是应用的基本构建单元。可以通过配置 `config.json` 文件中的路由信息来定义页面导航。\n\n### 组件与布局\nHarmonyOS 提供了丰富的 UI 组件和布局，可以通过在 `.hml` 文件中使用内置标签来构建用户界面。\n\n### 状态管理\n可以使用 JavaScript 对象和函数管理应用状态，并在页面组件中通过数据绑定更新视图。\n\n## 常见问题\n1. **无法连接到设备**：确保设备已通过 USB 连接并启用开发者选项。\n2. **编译错误**：检查代码语法和配置文件是否正确。\n\n## 参考资料\n- [HarmonyOS 开发者文档](https://developer.harmonyos.com/cn/docs/documentation/doc-guides)\n- [DevEco Studio 使用指南](https://developer.harmonyos.com/cn/docs/documentation/doc-studio)\n- [HarmonyOS 示例代码](https://github.com/HarmonyOS)\n\n通过阅读本文档，您应该能够熟悉 HarmonyOS 的基本开发流程，并能够创建、运行和调试简单的 HarmonyOS 应用。祝您开发顺利！', '[HarmonyOS]', 2, 0, 0, 123615944728158208, '2024-05-15 22:16:49', NULL, '2025-06-19 10:16:10', 0);
INSERT INTO `oj_post` VALUES (254, '关于AI的思考', 'frontend', '# 关于AI的思考  (AIGC)\n\nAI Generated Content（AIGC）是一种新型的内容生成方式，它利用人工智能技术，特别是自然语言处理（NLP）和机器学习（ML）技术，自动生成文章、故事、诗歌等各种类型的文本内容。这种方式不仅大大提高了内容生成的效率，而且还能保证内容的质量和创新性。\n\n## AIGC的优势\n\n1. **效率高**：AIGC可以快速生成大量的内容，无需人工参与，大大节省了时间和人力。\n2. **质量稳定**：通过训练和优化，AIGC生成的内容可以达到甚至超过人类的写作水平。\n3. **无限创新**：AIGC可以通过学习和模拟人类的思维方式，创造出全新的、独特的内容。\n\n## AIGC的应用\n\nAIGC的应用领域非常广泛，包括但不限于新闻写作、广告创作、社交媒体内容生成、教育材料编写等。例如，一些新闻机构已经开始使用AIGC来自动生成新闻报道，大大提升了新闻生产的效率；一些广告公司则使用AIGC来创作广告文案，以吸引更多的消费者。\n\n## AIGC的挑战\n\n虽然AIGC有很多优势，但也面临一些挑战。首先，AIGC生成的内容可能会缺乏人类的深度和情感，这可能会影响内容的吸引力和说服力。其次，AIGC可能会被用于生成虚假或误导性的内容，这可能会对社会造成负面影响。\n\n## 市面上的AI官网\n\n以下是几个市面上比较火热的AI官网：\n\n- [OpenAI](https://openai.com/)：OpenAI是一个全球领先的AI研究机构，致力于开发和推广安全、有益的AI技术。\n- [Google AI](https://ai.google/)：Google AI是Google的AI研究和开发部门，致力于推动AI技术的发展和应用。\n- [Microsoft AI](https://www.microsoft.com/en-us/ai)：Microsoft AI是Microsoft的AI研究和开发部门，致力于将AI技术应用于各种产品和服务中。\n- [IBM Watson](https://www.ibm.com/watson)：IBM Watson是IBM的AI平台，提供各种AI服务和解决方案。', '[AIGC]', 5, 0, 1, 123615944728158208, '2024-05-15 22:26:18', NULL, '2025-06-28 18:14:49', 0);
INSERT INTO `oj_post` VALUES (255, 'Vue3 与 Springboot：构建现代全栈应用的黄金搭档', 'backend', '# Vue3 与 Springboot：构建现代全栈应用的黄金搭档\n\n## 引言\n\n在当今快速发展的Web开发领域，Vue.js作为前端框架的明星，凭借其简洁的语法、强大的组件化能力以及高效的更新机制，赢得了众多开发者的心。而Spring Boot作为Java领域后端开发的翘楚，以其“约定优于配置”的设计理念和一键式部署的便利性，大大简化了企业级应用的开发流程。当Vue3遇上Spring Boot，无疑为构建高性能、易维护的全栈应用提供了理想的解决方案。\n\n## Vue3：前端开发的新篇章\n\n### 组件新特性\n\n- **Composition API**：Vue3引入了Composition API，它提供了一种更灵活、更模块化的状态管理方式，使得代码组织更加清晰，便于复用和维护。\n- **Teleport**：这一新特性允许开发者将组件“传送”到DOM树中的任何位置，极大地丰富了UI布局的灵活性。\n- **Improved Performance**：Vue3通过Proxy代替Object.defineProperty来实现数据响应式，提升了性能并降低了内存使用。\n\n### 搭建Vue3项目\n\n```bash\n# 使用Vue CLI创建Vue3项目\nvue create my-vue3-app --preset vue-cli-plugin-vue-next\n```\n\n## Spring Boot：后端开发的加速器\n\n### 核心优势\n\n- **自动配置**：Spring Boot自动配置Spring框架，减少了XML配置文件，使开发者能够快速启动和运行应用。\n- **Starter POMs**：提供一系列starter依赖，简化了Maven或Gradle配置，快速集成常用技术栈。\n- **内嵌服务器**：内置Tomcat、Jetty等服务器，无需额外部署即可运行应用。\n\n### 初始化Spring Boot项目\n\n```groovy\n// build.gradle\ndependencies {\n    implementation \'org.springframework.boot:spring-boot-starter-web\'\n}\n```\n\n## Vue3与Spring Boot集成\n\n### RESTful API通信\n\n在前后端分离的架构中，Vue3作为前端通过HTTP请求与后端Spring Boot应用交互。Spring Boot提供RESTful API，Vue3则利用`axios`等库发送请求。\n\n#### Spring Boot端示例（Controller）\n\n```java\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n    @GetMapping\n    public List<User> getUsers() {\n        // 返回用户列表逻辑\n    }\n}\n```\n\n#### Vue3端示例（使用Axios）\n\n```javascript\nimport axios from \'axios\';\n\nexport default {\n    async fetchUsers() {\n        const response = await axios.get(\'/api/users\');\n        this.users = response.data;\n    }\n}\n```\n\n### 安全性考量\n\n- **Spring Security**：为Spring Boot应用添加安全层，处理认证与授权，保护API免受未授权访问。\n- **JWT令牌**：前后端可通过JSON Web Tokens实现安全的身份验证流程。\n\n## 结语\n\nVue3与Spring Boot的结合，不仅能够提升开发效率，还能确保应用的可扩展性和安全性。这种现代技术栈的选择，为构建高质量的Web应用提供了坚实的基础。随着两者社区的不断壮大和技术的持续演进，未来全栈开发的前景无疑更加光明。开始你的Vue3 + Spring Boot之旅，探索无限可能！', '[Vue,Springboot]', 16, 1, 1, 123615944728158208, '2024-05-15 22:30:52', 123615944728158208, '2025-06-29 15:52:14', 0);
INSERT INTO `oj_post` VALUES (296542803404320768, '我的标签', 'synthesis', '我的内容', '[我的标签]', 8, 0, 0, 123615944728158208, '2025-06-28 20:16:14', NULL, '2025-06-29 15:52:09', 0);
INSERT INTO `oj_post` VALUES (296826815140728832, 'SSM框架详解', 'synthesis', '1.SSM框架介绍\nSSM框架是一种经典的Java Web开发框架，它由Spring、SpringMVC和MyBatis三个开源项目整合而成。SSM框架各个组件之间相互配合，提供了一套完整的解决方案，用于开发企业级的Java Web应用程序。\n\n1.1 什么是SSM框架\nSSM框架是指将Spring、SpringMVC和MyBatis三个技术框架结合起来使用的一种开发模式。它的目标是通过整合这三个框架的优势，实现高效、灵活、可扩展的Web应用程序开发。每个框架都有自己的职责和特点：\n\nSpring：提供了IoC（Inverse of Control，控制反转）和AOP（Aspect-Oriented Programming，面向切面编程）等功能，简化了企业级应用的开发流程。\nSpringMVC：基于MVC（Model-View-Controller，模型-视图-控制器）设计模式，用于处理用户请求和响应，并提供了灵活的请求映射和视图渲染功能。\nMyBatis：为数据库访问提供了一个简单而强大的持久层框架，通过SQL映射文件和注解来实现对象关系映射（ORM）。\n1.2 SSM框架包括的技术和组件\nSSM框架整合了以下三个开源项目：\n\nSpring：Spring是一个轻量级的应用框架，提供了丰富的特性和功能。它包含了IoC容器、AOP支持、事务管理等模块，可以帮助开发者构建可维护、灵活和可扩展的Java应用程序。\n\nSpringMVC：SpringMVC是基于MVC设计模式的Web框架。它通过DispatcherServlet统一接收用户请求，并将请求分发给相应的处理器进行处理，最后将处理结果返回给用户。SpringMVC具有良好的解耦性和灵活性，可以方便地实现请求的映射、数据绑定、验证和视图渲染等功能。\n\nMyBatis：MyBatis是一款轻量级的持久层框架，它通过SQL映射文件或注解来实现对象关系映射。MyBatis提供了强大的SQL执行能力和灵活的事务管理机制，使得开发者可以更加高效地进行数据库操作。\n\n这三个技术组件共同作用，形成了SSM框架，为Java Web应用程序提供了一个全面而高效的开发解决方案。\n\nSSM框架整合了Spring、SpringMVC和MyBatis三个项目，为Java Web开发提供了便利。这样的整合使得开发者可以充分利用各框架的优势，并能够以高效、灵活的方式构建可扩展的Web应用程序。\n\n2.SSM框架中的每个组件的作用和特点\n2.1 Spring框架\n2.1.1 Spring的核心功能和特点\nSpring框架是一个轻量级的Java应用程序开发框架，具有以下核心功能和特点：\n\nIoC容器： Spring的核心是IoC容器，它负责管理应用程序中的对象。通过IoC容器，开发者可以将对象的创建、组装和管理交给Spring来处理，大大简化了代码的编写和维护。IoC容器也提供了依赖注入（Dependency Injection，DI）的功能，即自动将依赖关系注入到对象中，降低了组件之间的耦合性。\n\nAOP支持： Spring提供了AOP（Aspect-Oriented Programming，面向切面编程）的支持。AOP可以在不修改原有代码的情况下，通过切面（Aspect）来添加和管理横切关注点（cross-cutting concerns），如日志记录、事务管理等。这种分离关注点的方式使得代码更加模块化和可维护。\n\n声明式事务管理： Spring框架提供了声明式事务管理的能力。通过使用注解或XML配置，开发者可以对方法进行事务管理的声明，而无需显式编写事务控制的代码。Spring的事务管理支持多种事务传播行为和隔离级别，并与JDBC、Hibernate等持久层框架无缝集成，简化了事务管理的开发工作。\n\n面向接口编程： Spring鼓励使用面向接口的编程方式，提倡依赖于接口而非具体实现类。这种松耦合的设计使得代码更加灵活、可扩展和可测试。\n\n2.1.2 Spring的IoC和AOP思想\nIoC（控制反转）： IoC是Spring框架的核心思想之一。传统的开发模式中，对象的创建和管理由开发者手动完成，而在Spring中，这些职责由IoC容器自动托管。通过配置文件或注解，开发者将类的信息交给Spring框架，由Spring框架来管理对象的创建、生命周期和依赖关系的注入。这种反转了对象的创建和管理控制的方式称为控制反转。\n\nAOP（面向切面编程）： AOP是一种通过切面（Aspect）来解决横切关注点的编程思想。横切关注点是指系统中多个模块共同具有的功能需求，如日志记录、事务管理等。在传统编程中，这些功能散布在各个业务模块中，导致代码重复和难以维护。AOP通过将这些共同关注点从业务逻辑中分离出来，形成独立的切面，并在合适的时机织入到目标对象中，实现了关注点与业务逻辑的解耦。\n\n2.2 SpringMVC框架\n2.2.1 SpringMVC的基本原理\nSpringMVC是基于MVC设计模式的Web框架，其基本原理如下：\n\n用户发起请求： 用户在浏览器中输入URL或进行其他操作，向服务器发送请求。\n\nDispatcherServlet拦截请求： DispatcherServlet是SpringMVC的核心组件，它拦截所有请求并负责处理请求的分发工作。\n\n处理器映射器与处理器适配器： DispatcherServlet通过处理器映射器（Handler Mapping）将请求与对应的处理器（Controller）建立映射关系，并通过处理器适配器（Handler Adapter）调用相应的处理器进行处理。\n\n处理器处理请求： 处理器根据请求的具体内容进行相应的处理，如获取请求参数、调用业务逻辑、访问数据库等。\n\n模型与视图生成： 处理器处理完请求后，将处理结果封装到模型（Model）中，并选择合适的视图（View）进行渲染。\n\n响应生成与返回： 视图通过模型生成具体的响应内容，并将响应返回给DispatcherServlet。\n\n响应发送给用户： DispatcherServlet将生成的响应发送回用户的浏览器，完成请求-处理-响应的整个过程。\n\n2.2.2 SpringMVC中的控制器、视图和模型的作用\n控制器（Controller）： 控制器负责处理用户请求并生成相应的响应。它是SpringMVC中的核心组件之一。控制器根据用户请求的具体内容进行相应的业务逻辑处理，如调用服务层方法、处理表单数据、验证输入等。控制器可以返回模型和视图，或通过注解指定响应的URL路径。\n\n视图（View）： 视图负责将模型中的数据渲染成最终的响应内容，通常是HTML页面。在SpringMVC中，视图通过视图解析器（View Resolver）来解析和渲染。视图解析器根据视图名和路径查找对应的视图文件，并将模型中的数据填充到视图中。常见的视图技术包括JSP、Thymeleaf、Freemarker等。\n\n模型（Model）： 模型承载了处理器处理请求后的结果数据。它将数据传递给视图进行渲染。在SpringMVC中，模型可以是一个普通的Java对象，也可以是一个Map、ModelAndView等。开发者通常通过模型将处理结果传递给视图，使得视图能够直接使用模型中的数据。\n\n2.3 MyBatis框架\n2.3.1 MyBatis的优势和特点\nMyBatis是一款轻量级的持久层框架，具有以下优势和特点：\n\n简单易用： MyBatis的配置和使用相对简单，学习门槛低。它采用了简洁的SQL映射语句，使得开发者可以更加专注于SQL编写和数据库操作。\n\n灵活性强： MyBatis支持灵活的SQL编写方式，开发者可以编写原生的SQL语句，充分发挥数据库的特性。同时，MyBatis也支持动态SQL、参数映射和结果集映射等高级特性，便于开发者进行复杂的数据库操作。\n\n性能优秀： MyBatis使用JDBC进行数据库访问，通过优化SQL语句、缓存查询结果和预编译等技术手段，提升了数据库访问的性能。此外，MyBatis还支持二级缓存和本地缓存，进一步提升了系统的性能。\n\n与Spring无缝集成： MyBatis与Spring框架完美结合，通过Spring容器管理MyBatis的SqlSessionFactory和事务管理，使得开发者能够简单地使用MyBatis进行数据库操作，并享受到Spring框架的便利。\n\n2.3.2 MyBatis中的XML映射文件和注解的使用\nXML映射文件： MyBatis中的XML映射文件用于定义SQL语句和与之对应的映射关系。在XML映射文件中，可以定义SELECT、INSERT、UPDATE、DELETE等SQL语句，并指定参数和结果映射规则。XML映射文件还支持动态SQL，可以根据不同的条件生成不同的SQL语句。通过XML映射文件，开发者可以灵活地编写和管理SQL语句。\n\n注解： MyBatis也支持使用注解来进行SQL映射。通过在Java代码中添加注解，开发者可以直接在方法上定义SQL语句和参数映射，省去了编写XML映射文件的过程。注解方式简化了配置，适用于一些简单的SQL查询。同时，MyBatis也支持XML映射文件和注解的混合使用，提供了更大的灵活性。\n\n3.SSM框架的整合方式和配置\n3.1 SSM的整合方式和步骤\nSSM框架的整合方式主要包括以下步骤：\n\n引入依赖： 首先，在项目的构建工具（如Maven）配置文件中添加Spring、SpringMVC和MyBatis的相关依赖。可以通过中央仓库或者其他方式获取这些依赖。\n\n配置Spring： 在Spring的配置文件（通常为applicationContext.xml）中进行Spring框架的配置。配置内容包括对数据源、事务管理器、扫描包等的配置。还可以引入其他模块的配置文件，如SpringMVC和MyBatis的配置文件。\n\n配置SpringMVC： 在SpringMVC的配置文件（通常为springmvc-servlet.xml）中进行SpringMVC框架的配置。配置内容包括对控制器、视图解析器、静态资源路径等的配置。还可以引入其他模块的配置文件，如Spring和MyBatis的配置文件。\n\n配置MyBatis： 在MyBatis的配置文件（通常为mybatis-config.xml）中进行MyBatis框架的配置。配置内容包括数据库连接信息、mapper的扫描路径、缓存配置等。还可以引入其他模块的配置文件，如Spring的配置文件。\n\n编写业务代码： 根据实际需求，编写业务代码。这包括编写实体类、DAO接口以及对应的Mapper映射文件。通过定义好的Mapper接口，MyBatis可以自动生成相应的SQL语句，并与数据库进行交互。\n\n配置web.xml： 在项目的web.xml文件中配置DispatcherServlet和Spring容器的启动参数。同时，配置Servlet的映射路径和加载顺序。\n\n部署和运行： 将完成整合配置的项目部署到Web容器中，如Tomcat等。启动Web容器后，访问项目URL即可运行SSM框架整合项目。\n\n3.2 SSM框架的主要配置文件\n3.2.1 Spring的配置文件\nSpring的配置文件通常为applicationContext.xml，其内容包括以下配置：\n\n数据源配置： 配置数据库连接信息，包括数据库驱动、连接URL、用户名和密码等。可以使用Spring提供的数据源，如org.springframework.jdbc.datasource.DriverManagerDataSource。\n\n事务管理器配置： 配置事务管理器，用于支持数据库事务操作。可以使用Spring提供的事务管理器，如org.springframework.jdbc.datasource.DataSourceTransactionManager。\n\n扫描包配置： 配置需要自动扫描的包路径，使Spring能够自动发现和管理相应的组件和Bean。可以使用context:component-scan标签进行配置。\n\n配置其他模块： 可以通过<import>标签引入其他模块的配置文件，如SpringMVC和MyBatis的配置文件。\n\n3.2.2 SpringMVC的配置文件\nSpringMVC的配置文件通常为springmvc-servlet.xml，其内容包括以下配置：\n\n视图解析器配置： 配置视图解析器，用于将模型（Model）渲染成具体的响应视图。可以使用SpringMVC提供的视图解析器，如InternalResourceViewResolver。\n\n静态资源配置： 配置处理静态资源的映射路径，使得访问静态资源时能够正确加载。可以使用<mvc:resources>标签配置。\n\n控制器配置： 配置控制器（Controller）的扫描路径，使得SpringMVC能够自动发现和管理相应的控制器。可以使用<context:component-scan>标签进行配置。\n\n配置其他模块： 可以通过<import>标签引入其他模块的配置文件，如Spring的配置文件。\n\n3.2.3 MyBatis的配置文件\nMyBatis的配置文件通常为mybatis-config.xml，其内容包括以下配置：\n\n数据库连接配置： 配置数据库连接信息，包括数据库驱动、连接URL、用户名和密码等。\n\nMapper扫描配置： 配置Mapper接口的扫描路径，使得MyBatis能够自动发现和管理Mapper接口。可以使用<mappers>标签进行配置。\n\n缓存配置： 配置MyBatis的缓存方式，包括一级缓存和二级缓存的配置。\n\n其他高级特性配置： MyBatis还支持其他高级特性的配置，如插件（Interceptor）的配置、类型处理器（TypeHandler）的配置等。\n\n4.基于SSM框架的项目开发流程\n4.1 项目需求分析和数据库设计\n在项目开发的初期，进行项目需求分析和数据库设计是非常重要的步骤。下面是项目需求分析和数据库设计的相关内容：\n\n项目需求分析\n项目需求分析是指对项目所需功能和性能的详细描述和规划，包括用户需求、系统需求和非功能性需求等方面。\n\n用户需求： 与用户交流，了解用户对项目的需求和期望。可以通过调研、访谈、问卷调查等方式获取用户反馈和意见，从而明确项目的功能需求。\n\n系统需求： 对项目涉及的各个模块和功能点进行分析和规划，明确各个模块之间的关系和交互方式。例如，确定需要实现哪些功能模块，每个模块需要具备哪些功能。\n\n非功能性需求： 包括项目的性能要求、安全要求、可用性要求等。例如，确定响应时间的要求、数据的安全性要求、系统的可扩展性要求等。\n\n数据库设计\n数据库设计是指根据项目需求，设计数据库的表结构、字段和关系，以满足项目的数据存储和操作需求。\n\n确定实体： 根据项目需求，识别出需要进行数据存储和操作的实体，例如用户、订单、商品等。\n\n设计表结构： 为每个实体设计相应的表结构，确定表名、字段和主键等。根据实体之间的关系，设计合适的外键关联。\n\n字段定义： 为每个表的字段定义适当的数据类型和约束，保证数据的完整性和一致性。根据项目需求，设置合适的字段长度、唯一性约束、非空约束等。\n\n优化性能： 在数据库设计中考虑到系统的性能需求，采用合适的索引、分区、冗余等手段来优化查询和操作性能。\n\n范式设计： 根据业务需求和数据库规范，选择合适的范式设计，使数据存储结构符合规范，并尽量避免数据冗余和更新异常。\n\n以上是项目需求分析和数据库设计的相关内容，这些步骤对于项目开发的成功和顺利进行非常重要。在进行下一步的分层架构设计和代码编写之前，确保项目需求和数据库设计清晰明确，有助于后续工作的顺利进行。\n\n5.SSM框架在实际项目中的应用场景和优势\n5.1 SSM框架适用的项目类型\nSSM框架（Spring + Spring MVC + MyBatis）是一种Java Web开发框架，它结合了三个优秀的开源框架，可以广泛应用于各种项目类型。下面介绍一些适用于SSM框架的项目类型：\n\n企业级应用： SSM框架具有良好的扩展性和灵活性，适用于开发各类企业级应用，如CRM系统、人力资源管理系统、物流管理系统等。\n\n电子商务平台： 在电子商务领域，SSM框架能够提供强大的后台支持和灵活的前端交互，适用于开发电商平台、在线商城等。\n\n社交网络应用： SSM框架可以方便地处理用户间的关系和信息交互，适用于开发社交媒体应用、论坛系统等。\n\n内容管理系统： SSM框架具备良好的数据持久化能力和高效的数据访问方式，适用于构建内容管理系统、新闻发布系统等。\n\n以上仅是一些常见的适用项目类型，SSM框架在其他领域也有广泛的应用。根据具体项目需求和团队技术情况，选择SSM框架作为开发工具可以提高项目的开发效率和质量。\n\n5.2 SSM框架的优点和特点\nSSM框架具有以下优点和特点，使其在实际项目中得到广泛应用：\n\n模块化设计： SSM框架将整个项目拆分成多个模块，每个模块承担不同的职责，使得项目结构清晰、易于管理和维护。\n\n轻量级： SSM框架由三个轻量级的开源框架组成，不会增加过多的额外开销，适合在资源有限的环境下使用。\n\n灵活性： SSM框架采用了面向接口编程的思想，通过依赖注入和控制反转等机制，实现了各个模块之间的解耦合，使得系统更加灵活可拓展。\n\n易于学习和使用： SSM框架文档丰富，社区活跃，大量的教程和案例可供参考，使得开发人员能够快速上手并快速构建项目。\n\n优秀的生态系统： SSM框架在Java开发领域有着庞大和活跃的生态系统，可以方便地集成其他优秀的开源组件和工具，如Spring Security、Redis等。\n\n5.3 实际项目中的案例分析\n以下是SSM框架在实际项目中的一些案例分析：\n\n电商平台： SSM框架可以用于开发电商平台，通过Spring MVC实现用户界面交互，MyBatis进行数据库操作，Spring管理业务逻辑和事务。使用SSM框架可以快速开发一个性能高效、易于扩展的电商平台。\n\n医院管理系统： SSM框架可以用于开发医院管理系统，通过Spring MVC实现前端页面的渲染和交互，MyBatis进行数据库操作，Spring管理医院的各项服务和业务。SSM框架能够满足医院管理系统对于数据操作的高效性和可靠性需求。\n\n社交媒体应用： SSM框架可以用于开发社交媒体应用，通过Spring MVC实现用户间的交互和消息推送，MyBatis进行数据库存取，Spring管理用户关系和业务逻辑。使用SSM框架可以构建出一个高性能、稳定可靠的社交媒体应用。\n\n6.总结和展望\n6.1 对SSM框架的总结和评价\nSSM框架作为一种成熟稳定的Java Web开发框架，在实际项目中得到了广泛的应用。总结和评价SSM框架主要体现在以下几个方面：\n\n高效性： SSM框架通过MyBatis的ORM映射和优化的SQL语句执行，使得数据库操作更加高效。同时，Spring MVC的请求处理机制和Spring的依赖注入机制也能够提高项目的运行效率。\n\n灵活性： SSM框架采用面向接口编程的思想，实现了各个模块之间的解耦合，使得系统更加灵活可拓展。开发人员可以根据项目需求定制各个模块的实现，便于项目的升级、扩展和维护。\n\n易用性： SSM框架具有完善的文档和活跃的社区，对于开发人员来说，学习和使用SSM框架非常容易。丰富的教程和案例可以帮助开发人员快速上手，并且在遇到问题时能够快速找到解决方案。\n\n可靠性： SSM框架经过多年的发展和应用，已经在众多实际项目中得到验证。成熟的设计和丰富的测试保证了SSM框架的稳定性和可靠性。\n\n6.2 对未来发展的展望和建议\n与微服务结合： 随着微服务架构的兴起，SSM框架可以与微服务技术结合，提供更加灵活、可扩展的解决方案。例如，可以使用Spring Cloud等微服务组件，将SSM框架的各个模块拆分成独立的微服务，实现更好的服务隔离和水平扩展。\n\n支持新技术和新特性： 随着技术的不断发展，SSM框架可以考虑集成新的技术和特性，以适应新的需求。例如，对于缓存和消息队列的支持，可以集成Redis和Kafka等新的开源组件。\n\n持续优化和改进： SSM框架可以持续进行性能优化和改进，通过减少不必要的开销、提升框架的稳定性和安全性，更好地满足项目的需求。\n————————————————\n\n                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\n\n原文链接：https://blog.csdn.net/m0_72410588/article/details/131723447', '[]', 2, 0, 0, 123615944728158208, '2025-06-29 15:04:48', NULL, '2025-06-29 15:09:49', 1);

-- ----------------------------
-- Table structure for oj_post_comment
-- ----------------------------
DROP TABLE IF EXISTS `oj_post_comment`;
CREATE TABLE `oj_post_comment`  (
  `id` bigint NOT NULL COMMENT '主键',
  `parent_id` bigint NULL DEFAULT NULL COMMENT '父id',
  `post_id` bigint NULL DEFAULT NULL COMMENT '帖子id',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '内容',
  `author_id` bigint NULL DEFAULT NULL COMMENT '作者id',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `del_flag` tinyint NULL DEFAULT NULL COMMENT '逻辑删除（0-未删除，1-已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '帖子评论' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of oj_post_comment
-- ----------------------------
INSERT INTO `oj_post_comment` VALUES (2, 142194349395795968, 132682575988256768, '这是我的第san条回复评论', 1067246875800000001, '2024-04-29 21:49:34', 0);
INSERT INTO `oj_post_comment` VALUES (142194349395795968, NULL, 132682575988256768, '这是我的第一条评论', 123615944728158208, '2024-04-28 22:10:34', 0);
INSERT INTO `oj_post_comment` VALUES (142194470707650560, 142194349395795968, 132682575988256768, '这是我的第一条回复评论', 123615944728158208, '2024-04-28 22:11:03', 0);
INSERT INTO `oj_post_comment` VALUES (142194546255454208, 142194470707650560, 132682575988256768, '这是我的第一条回复回复评论', 123615944728158208, '2024-04-28 22:11:21', 0);
INSERT INTO `oj_post_comment` VALUES (142194895452233728, NULL, 132682575988256768, '这是我的第二条评论', 123615944728158208, '2024-04-28 22:12:44', 0);
INSERT INTO `oj_post_comment` VALUES (142847422594031616, 142194349395795968, 132682575988256768, '李在干神魔🐛🐛🐛', 123615944728158208, '2024-04-30 17:25:39', 0);
INSERT INTO `oj_post_comment` VALUES (142848418221137920, 142194470707650560, 132682575988256768, '哈哈哈哈哈哈', 123615944728158208, '2024-04-30 17:29:36', 0);
INSERT INTO `oj_post_comment` VALUES (143123851978305536, NULL, 132962499613540352, '这道题好难~🤯', 123615944728158208, '2024-05-01 11:44:05', 0);
INSERT INTO `oj_post_comment` VALUES (143124112859820032, 143123851978305536, 132962499613540352, '那是因为你还没学习dp\n', 1067246875800000001, '2024-05-01 11:45:07', 0);
INSERT INTO `oj_post_comment` VALUES (143125754707537920, 143124112859820032, 132962499613540352, '好吧😂😂', 123615944728158208, '2024-05-01 11:51:39', 0);
INSERT INTO `oj_post_comment` VALUES (143127607268700160, NULL, 140030340132536320, '这道题应该这么做：\n```java\npublic class Service {\n  Sysout.println.out(\"Hello World!\");\n}\n```', 123615944728158208, '2024-05-01 11:59:00', 0);
INSERT INTO `oj_post_comment` VALUES (145004870339764224, 143127607268700160, 140030340132536320, '可以，666', 123615944728158208, '2024-05-06 16:18:35', 0);
INSERT INTO `oj_post_comment` VALUES (145005043463856128, 143127607268700160, 140030340132536320, '确实确实', 123615944728158208, '2024-05-06 16:19:16', 0);
INSERT INTO `oj_post_comment` VALUES (145017015240495104, 143127607268700160, 140030340132536320, '6666666', 123615944728158208, '2024-05-06 17:06:50', 0);
INSERT INTO `oj_post_comment` VALUES (145018701552029696, 145004870339764224, 140030340132536320, '666', 123615944728158208, '2024-05-06 17:13:32', 0);
INSERT INTO `oj_post_comment` VALUES (145019629969608704, 2, 132682575988256768, '这道题难吗', 123615944728158208, '2024-05-06 17:17:14', 0);
INSERT INTO `oj_post_comment` VALUES (145021703071465472, 143125754707537920, 132962499613540352, '嗯嗯，加油！', 123615944728158208, '2024-05-06 17:25:28', 0);
INSERT INTO `oj_post_comment` VALUES (145025953776390144, 145019629969608704, 132682575988256768, '还行，不是很难，建议自己不看答案做一下🌟🌟🌟', 135186678792712192, '2024-05-06 17:42:21', 0);
INSERT INTO `oj_post_comment` VALUES (149784493183266816, 2, 132682575988256768, '```java\n\n\n/**\n * Test\n */\npublic class Test {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n\n}\n```', 123615944728158208, '2024-05-19 20:51:06', 0);
INSERT INTO `oj_post_comment` VALUES (151533520233119744, NULL, 4, '这边文章很有用。感谢作者~', 123615944728158208, '2024-05-24 16:41:06', 0);
INSERT INTO `oj_post_comment` VALUES (151535507997708288, 151533520233119744, 4, '确实有用，Vite真的是下一代前端工具链', 1067246875800000001, '2024-05-24 16:49:00', 0);
INSERT INTO `oj_post_comment` VALUES (151555555555555555, 151535507997708288, 4, '回复确实有用，Vite真是下...', 279800353081098240, '2025-05-15 17:43:30', 0);
INSERT INTO `oj_post_comment` VALUES (290011865609134080, NULL, 4, 'nihao ', 123615944728158208, '2025-06-10 19:44:40', 0);
INSERT INTO `oj_post_comment` VALUES (290205717869895680, NULL, 7, '很好的评论，使我耳朵脱落，爱来自瓷器。', 279800353081098240, '2025-06-11 08:34:53', 0);
INSERT INTO `oj_post_comment` VALUES (290213974894190592, NULL, 4, '你好', 279800353081098240, '2025-06-11 09:07:42', 0);
INSERT INTO `oj_post_comment` VALUES (290219750375383040, 290213974894190592, 4, '回复你好', 279800353081098240, '2025-06-11 09:30:39', 0);
INSERT INTO `oj_post_comment` VALUES (290222203183300608, 290011865609134080, 4, '回复nihao', 279800353081098240, '2025-06-11 09:40:24', 0);
INSERT INTO `oj_post_comment` VALUES (290222439628800000, NULL, 83, '很好的文章', 279800353081098240, '2025-06-11 09:41:20', 0);
INSERT INTO `oj_post_comment` VALUES (290222486479175680, 290222439628800000, 83, '很好的评论', 279800353081098240, '2025-06-11 09:41:31', 0);
INSERT INTO `oj_post_comment` VALUES (290224250397466624, NULL, 1, '111', 123615944728158208, '2025-06-11 09:48:33', 0);
INSERT INTO `oj_post_comment` VALUES (290224466425610240, NULL, 4, '前端技术文档写的很好。', 279800353081098240, '2025-06-11 09:49:23', 0);
INSERT INTO `oj_post_comment` VALUES (290224511459852288, 290224466425610240, 4, '我也觉得', 279800353081098240, '2025-06-11 09:49:34', 0);
INSERT INTO `oj_post_comment` VALUES (292021043486117888, NULL, 1, '谁敢想谁敢想', 123615944728158208, '2025-06-16 08:48:22', 0);
INSERT INTO `oj_post_comment` VALUES (292021120036360192, 292021043486117888, 1, '不曾想不曾想', 123615944728158208, '2025-06-16 08:48:40', 0);
INSERT INTO `oj_post_comment` VALUES (292053076402397184, NULL, 47, 'good', 123615944728158208, '2025-06-16 10:55:40', 0);
INSERT INTO `oj_post_comment` VALUES (292066415591915520, NULL, 16, '有点意思哈', 292062633227288576, '2025-06-16 11:48:39', 0);
INSERT INTO `oj_post_comment` VALUES (292068044093345792, 292066415591915520, 16, '呵呵', 292062633227288576, '2025-06-16 11:55:07', 0);
INSERT INTO `oj_post_comment` VALUES (292157942258745344, NULL, 1, '111', 123615944728158208, '2025-06-16 17:52:31', 0);
INSERT INTO `oj_post_comment` VALUES (292466355680874496, NULL, 292117558425624576, '我的第一条评论', 123615944728158208, '2025-06-17 14:17:54', 0);
INSERT INTO `oj_post_comment` VALUES (292776953354215424, NULL, 254, '写的很好哦', 123615944728158208, '2025-06-18 10:52:05', 0);
INSERT INTO `oj_post_comment` VALUES (292784777241124864, NULL, 255, '很好哦4', 123615944728158208, '2025-06-18 11:23:10', 0);
INSERT INTO `oj_post_comment` VALUES (292791491701071872, NULL, 251, '很好哦', 123615944728158208, '2025-06-18 11:49:51', 0);
INSERT INTO `oj_post_comment` VALUES (293130119673339904, NULL, 70, '很好哦\n', 123615944728158208, '2025-06-19 10:15:26', 0);
INSERT INTO `oj_post_comment` VALUES (293141628327624704, 292784777241124864, 255, '我也觉得', 123615944728158208, '2025-06-19 11:01:10', 0);
INSERT INTO `oj_post_comment` VALUES (293141760586612736, 292784777241124864, 255, '作者写得很好', 123615944728158208, '2025-06-19 11:01:42', 0);
INSERT INTO `oj_post_comment` VALUES (293145176662683648, 292466355680874496, 292117558425624576, '我的回复 ', 123615944728158208, '2025-06-19 11:15:16', 0);
INSERT INTO `oj_post_comment` VALUES (293145267993653248, NULL, 292117558425624576, '我的又一个评论', 123615944728158208, '2025-06-19 11:15:38', 0);
INSERT INTO `oj_post_comment` VALUES (293160211040497664, NULL, 255, '很好\n', 123615944728158208, '2025-06-19 12:15:01', 0);
INSERT INTO `oj_post_comment` VALUES (293160256049573888, 293141628327624704, 255, '加一', 123615944728158208, '2025-06-19 12:15:11', 0);
INSERT INTO `oj_post_comment` VALUES (293160336324358144, 293160211040497664, 255, '加一', 123615944728158208, '2025-06-19 12:15:30', 0);
INSERT INTO `oj_post_comment` VALUES (293174739365928960, NULL, 255, '很嗨', 123615944728158208, '2025-06-19 13:12:45', 0);
INSERT INTO `oj_post_comment` VALUES (296502278280945664, 293174739365928960, 255, '加一', 123615944728158208, '2025-06-28 17:35:13', 0);
INSERT INTO `oj_post_comment` VALUES (296502379829239808, NULL, 255, '很好', 123615944728158208, '2025-06-28 17:35:37', 0);
INSERT INTO `oj_post_comment` VALUES (296511068246089728, NULL, 254, '很好\n', 123615944728158208, '2025-06-28 18:10:07', 0);
INSERT INTO `oj_post_comment` VALUES (296511096658305024, 292776953354215424, 254, '加一', 123615944728158208, '2025-06-28 18:10:14', 0);
INSERT INTO `oj_post_comment` VALUES (296543021294219264, NULL, 296542803404320768, '我添加的内容', 123615944728158208, '2025-06-28 20:17:05', 0);
INSERT INTO `oj_post_comment` VALUES (296543070455656448, 296543021294219264, 296542803404320768, '我给自己的回复', 123615944728158208, '2025-06-28 20:17:17', 0);
INSERT INTO `oj_post_comment` VALUES (296543208821551104, 296543070455656448, 296542803404320768, '我自己的又一个回复', 123615944728158208, '2025-06-28 20:17:50', 0);
INSERT INTO `oj_post_comment` VALUES (296546506421125120, NULL, 296542803404320768, '我的添加评论', 123615944728158208, '2025-06-28 20:30:56', 0);
INSERT INTO `oj_post_comment` VALUES (296826602938306560, NULL, 255, '写的很好哦', 123615944728158208, '2025-06-29 15:03:58', 0);
INSERT INTO `oj_post_comment` VALUES (296826707158372352, 296826602938306560, 255, '加一', 123615944728158208, '2025-06-29 15:04:22', 0);

-- ----------------------------
-- Table structure for oj_post_favour
-- ----------------------------
DROP TABLE IF EXISTS `oj_post_favour`;
CREATE TABLE `oj_post_favour`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `post_id` bigint NOT NULL COMMENT '帖子 id',
  `user_id` bigint NOT NULL COMMENT '创建用户 id',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_postId`(`post_id` ASC) USING BTREE,
  INDEX `idx_userId`(`user_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 296546731013521409 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '帖子收藏' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of oj_post_favour
-- ----------------------------
INSERT INTO `oj_post_favour` VALUES (149454886571622400, 236, 123615944728158208, '2024-05-18 23:01:21');
INSERT INTO `oj_post_favour` VALUES (149455078289063936, 57, 123615944728158208, '2024-05-18 23:02:07');
INSERT INTO `oj_post_favour` VALUES (149727176169418752, 4, 149726522734604288, '2024-05-19 17:03:20');
INSERT INTO `oj_post_favour` VALUES (282967574968098816, 4, 279800353081098240, '2025-05-22 09:13:07');
INSERT INTO `oj_post_favour` VALUES (282967657675579392, 83, 279800353081098240, '2025-05-22 09:13:26');
INSERT INTO `oj_post_favour` VALUES (288433683960090624, 3, 123615944728158208, '2025-06-06 11:13:28');
INSERT INTO `oj_post_favour` VALUES (288472941857968128, 68, 123615944728158208, '2025-06-06 13:49:30');
INSERT INTO `oj_post_favour` VALUES (288489379444396032, 2, 287668746988826624, '2025-06-06 14:54:49');
INSERT INTO `oj_post_favour` VALUES (290012077484294144, 4, 123615944728158208, '2025-06-10 19:45:30');
INSERT INTO `oj_post_favour` VALUES (292776849247395840, 254, 123615944728158208, '2025-06-18 10:51:40');
INSERT INTO `oj_post_favour` VALUES (292791425837916160, 251, 123615944728158208, '2025-06-18 11:49:35');
INSERT INTO `oj_post_favour` VALUES (293130051603980288, 70, 123615944728158208, '2025-06-19 10:15:10');
INSERT INTO `oj_post_favour` VALUES (296502197850972160, 255, 123615944728158208, '2025-06-28 17:34:53');

-- ----------------------------
-- Table structure for oj_post_thumb
-- ----------------------------
DROP TABLE IF EXISTS `oj_post_thumb`;
CREATE TABLE `oj_post_thumb`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `post_id` bigint NOT NULL COMMENT '帖子 id',
  `user_id` bigint NOT NULL COMMENT '创建用户 id',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_postId`(`post_id` ASC) USING BTREE,
  INDEX `idx_userId`(`user_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 296826504112115713 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '帖子点赞' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of oj_post_thumb
-- ----------------------------
INSERT INTO `oj_post_thumb` VALUES (149307199457177600, 250, 123615944728158208, '2024-05-18 13:14:30');
INSERT INTO `oj_post_thumb` VALUES (149316241000869888, 68, 123615944728158208, '2024-05-18 13:50:26');
INSERT INTO `oj_post_thumb` VALUES (149454875674820608, 236, 123615944728158208, '2024-05-18 23:01:19');
INSERT INTO `oj_post_thumb` VALUES (149455076393238528, 57, 123615944728158208, '2024-05-18 23:02:06');
INSERT INTO `oj_post_thumb` VALUES (149727167273299968, 4, 149726522734604288, '2024-05-19 17:03:18');
INSERT INTO `oj_post_thumb` VALUES (151196182894936064, 48, 123615944728158208, '2024-05-23 18:20:39');
INSERT INTO `oj_post_thumb` VALUES (279563792880070656, 83, 123615944728158208, '2025-05-12 23:47:42');
INSERT INTO `oj_post_thumb` VALUES (279814643120914432, 83, 279800353081098240, '2025-05-13 16:24:29');
INSERT INTO `oj_post_thumb` VALUES (288489377833783296, 2, 287668746988826624, '2025-06-06 14:54:49');
INSERT INTO `oj_post_thumb` VALUES (290009131749105664, 1, 123615944728158208, '2025-06-10 19:33:48');
INSERT INTO `oj_post_thumb` VALUES (290010678587449344, 2, 123615944728158208, '2025-06-10 19:39:57');
INSERT INTO `oj_post_thumb` VALUES (290010679338229760, 2, 123615944728158208, '2025-06-10 19:39:57');
INSERT INTO `oj_post_thumb` VALUES (290010784275521536, 5, 123615944728158208, '2025-06-10 19:40:22');
INSERT INTO `oj_post_thumb` VALUES (292791423476523008, 251, 123615944728158208, '2025-06-18 11:49:35');
INSERT INTO `oj_post_thumb` VALUES (293130047686500352, 70, 123615944728158208, '2025-06-19 10:15:09');
INSERT INTO `oj_post_thumb` VALUES (296826504112115712, 255, 123615944728158208, '2025-06-29 15:03:34');

-- ----------------------------
-- Table structure for oj_problem
-- ----------------------------
DROP TABLE IF EXISTS `oj_problem`;
CREATE TABLE `oj_problem`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标题',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '内容',
  `tags` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标签列表（json 数组）',
  `difficulty` tinyint NULL DEFAULT NULL COMMENT '题目难度，0简单，1中等，2困难',
  `ans_language` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '题目答案语言',
  `answer` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '题目答案',
  `submit_num` int NULL DEFAULT 0 COMMENT '题目提交数',
  `accepted_num` int NULL DEFAULT 0 COMMENT '题目通过数',
  `judge_case` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '判题用例（json 数组）',
  `judge_config` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '判题配置（json 对象）',
  `thumb_num` int NULL DEFAULT 0 COMMENT '点赞数',
  `favour_num` int NULL DEFAULT 0 COMMENT '收藏数',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `creator` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人（id）',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `updater` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '更新人（id）',
  `del_flag` tinyint NOT NULL DEFAULT 0 COMMENT '逻辑删除，0未删除，1删除',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1770353538222379110 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '题目' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of oj_problem
-- ----------------------------
INSERT INTO `oj_problem` VALUES (132682575988256768, '两数之和', '给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n\n你可以按任意顺序返回答案。\n\n \n\n示例 1：\n\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n示例 2：\n\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n示例 3：\n\n输入：nums = [3,3], target = 6\n输出：[0,1]\n \n\n提示：ok\n\n2 <= nums.length <= 104\n-109 <= nums[i] <= 109\n-109 <= target <= 109\n只会存在一个有效答案\n \n\n进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？', '[\"Java\",\"Python\"]', 1, 'java', 'class Solution {\r\n    public int[] twoSum(int[] nums, int target) {\r\n        int n = nums.length;\r\n        for (int i = 0; i < n; ++i) {\r\n            for (int j = i + 1; j < n; ++j) {\r\n                if (nums[i] + nums[j] == target) {\r\n                    return new int[]{i, j};\r\n                }\r\n            }\r\n        }\r\n        return new int[0];\r\n    }\r\n}', 47, 40, '[{\"input\":\"sdda\",\"output\":\"asd\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1111,\"timeLimit\":1005}', 0, 0, '2025-06-16 16:14:11', '123615944728158208', '2025-06-16 10:42:49', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (149777511676178432, 'Hello World', '\"Hello World\" 是编程世界中的经典第一个程序，它通常是初学者学习任何编程语言时写的第一个程序。在本题中，请你编写一个程序，输出字符串 \"Hello World\"。\n\n输入：\n本题没有输入，程序不需要从用户处获取任何数据。\n\n输出：\n程序应输出：\nHello World\n\n说明：\n请确保输出中没有额外的字符、空格或换行，输出内容需要与要求严格一致。', '[\"Java\",\"编程基础\"]', 0, NULL, ' \r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello World\");\r\n    }\r\n}', 26, 21, '[{\"input\":\"a\",\"output\":\"Hello World\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 18:00:22', '123615944728158208', '2025-06-29 14:57:14', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (280078188971843584, '数位递增的数', '一个正整数如果任何一个数位不大于右边相邻的数位，则称为一个数位递增的数。\n\n例如 1135 是一个数位递增的数，而 1024 不是一个数位递增的数。\n\n给定正整数 n，请问在整数 1 至 n中有多少个数位递增的数？', '[\"构造\"]', 1, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        scan.close();\n    }\n}', 0, 0, '[{\"input\":\"30\",\"output\":\"26\"}]', '{\"timeLimit\":1000,\"memoryLimit\":128,\"stackLimit\":128}', 0, 0, '2025-05-14 09:51:44', '123615944728158208', '2025-05-27 13:32:11', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (282011102005497856, '反倍数', '给定三个整数a,b,c，如果一个整数既不是a 的整数倍也不是b的整数倍还不是c 的整数倍，则这个数称为反倍数。\n\n请问在1至n 中有多少个反倍数。\n\n输入描述\n输入的第一行包含一个整数\nn。\n\n第二行包含三个整数a,b,c，相邻两个数之间用一个空格分隔。\n\n其中，1≤n≤1000000，1≤a≤n，1≤b≤n，1≤c≤n。\n\n输出描述\n输出一行包含一个整数，表示答案。\n\n输入输出样例\n示例\n输入\n30\n2 3 6\n输出\n10\n样例说明：\n以下这些数满足要求：1, 5, 7, 11, 13, 17, 19, 23, 25, 29。\n', '[\"暴力\"]', 1, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n       Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int a = scan.nextInt();\n        int b = scan.nextInt();\n        int c = scan.nextInt();\n        int count = 0;\n        for(int i = 1;i<=n;i++){\n            if(i%a!=0 && i%b != 0 && i%c!= 0){\n                count++;\n            }\n        }\n        System.out.println(count);\n        scan.close();\n    }\n}', 2, 2, '[{\"input\":\"30\\n2 3 6\",\"output\":\"10\"}]', '{\"memoryLimit\":128,\"stackLimit\":128,\"timeLimit\":1000}', 0, 0, '2025-06-16 17:52:26', '123615944728158208', '2025-06-16 10:42:49', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (282012591318962176, '洁净数', '小明非常不喜欢数字2，包括那些数位上包含数字2的数。如果一个数的数位不包含数字2,小明将它称为洁净数。\n\n请问在整数1至n中，洁净数有多少个？\n\n输入描述\n输入的第一行包含一个整数n(1≤n≤106)。\n\n输出描述\n输出一行包含一个整数，表示答案。\n\n输入输出样例\n示例\n输入30\n\n输出18\n\n运行限制\n最大运行时间：1s\n最大运行内存: 256M', '[\"暴力\"]', 1, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n         Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int count = 0;\n        for (int i = 1; i <=n ; i++) {\n            String str = String.valueOf(i);\n            if (!str.contains(\"2\")){\n                count++;\n            }\n        }\n        System.out.println(count);\n        scan.close();\n    }\n}', 11, 7, '[{\"input\":\"30\",\"output\":\"18\"}]', '{\"memoryLimit\":128,\"stackLimit\":128,\"timeLimit\":1000}', 0, 0, '2025-06-16 17:58:21', '123615944728158208', '2025-06-16 19:39:09', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (291690515697614848, '数字诗意', '在诗人的眼中，数字是生活的韵律，也是诗意的表达。\n\n小蓝，当代顶级诗人与数学家，被赋予了\"数学诗人\"的美誉。他擅长将冰冷的数字与抽象的诗意相融合，并用优雅的文字将数学之美展现于纸上。\n\n某日，小蓝静坐书桌前，目光所及，展现着n 个数字，它们依次为a1​,a2​,…,an​，熠熠生辉。小蓝悟到，如果一个数能够以若干个（至少两个）连续的正整数相加表示，那么它就蕴含诗意。例如，数字 \n6 就蕴含诗意，因为它可以表示为1+2+3。而8则缺乏诗意，因为它无法用连续的正整数相加表示。\n\n小蓝希望他面前的所有数字都蕴含诗意，为此，他决定从这n 个数字中删除一部分。请问，小蓝需要删除多少个数字，才能使剩下的数字全部蕴含诗意？\n\n输入格式\n第一行包含一个整数n，表示展示的数字个数。\n\n第二行包含n 个整数a1​,a2,…,an，表示展示的数字。\n\n输出格式\n输出一个整数，表示小蓝需要删除的数字个数，以使剩下的数字全部蕴含诗意。\n\n样例输入\n3\n3 6 8\n\n样例输出\n1\n\n样例说明\n在样例中，数字3 可以表示为1+2，数字6可以表示为1+2+3，数字8无法表示为连续的正整数相加，因此，需要删除的数字个数为1。', '[\"思维\",\"规律\"]', 2, NULL, 'import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int num = sc.nextInt();\r\n        int count =0;\r\n        for(int i=1;i<=num;i++){\r\n            long l = sc.nextLong();\r\n            // 一个数为至少两个连续整数相加得到的数，它一定不是2的幂。\r\n            while(l %2 == 0 && l>1){\r\n                l = l/2;\r\n            } \r\n            if(l==1){\r\n                count++;\r\n            }\r\n        }\r\n        System.out.println(count);\r\n    }\r\n}', 0, 0, '[{\"input\":\"3\\n3 6 8\",\"output\":\"1\"}]', '{\"memoryLimit\":512,\"stackLimit\":512,\"timeLimit\":3}', 0, 0, '2025-06-15 10:54:58', '123615944728158208', '2025-06-15 20:41:18', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (291697319571734528, '连连看', '小蓝正在和朋友们玩一种新的连连看游戏。在一个n×m 的矩形网格中，每个格子中都有一个整数，第i 行第j 列上的整数为Ai,j  。玩家需要在这个网格中寻找一对格子(a,b)−(c,d)(a,b)−(c,d) 使得这两个格子中的整数Aa,b和Ac,d相等，且它们的位置满足∣a−c∣=∣b−d∣>0 。请问在这个n×m 的矩形网格中有多少对这样的格子满足条件。\n\n输入格式\n输入的第一行包含两个正整数n,m，用一个空格分隔。\n\n接下来n 行，第i 行包含m 个正整数,Ai,,1​,Ai,2​ ,⋯,Ai,m​，相邻整数之间使用一个空格分隔。\n\n输出格式\n输出一行包含一个整数表示答案。\n\n样例输入\n3 2\n1 2\n2 3\n3 2\n\n样例输出\n6\n\n样例说明\n一共有以下6 对格子：(1,2)−(2,1)，(2,2)−(3,1)，(2,1)−(3,2),(2,1)−(1,2)，(3,1)−(2,2)，(3,2)−(2,1)。', '[\"哈希表\",\"枚举\"]', 1, NULL, 'import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n     static int count = 0;\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int n = sc.nextInt();\r\n        int m = sc.nextInt();\r\n        HashMap<Integer, ArrayList<int[]>> map = new HashMap<>();\r\n        for(int i = 1; i <= n; i++){\r\n            for(int j = 1; j <= m; j++){\r\n                int num = sc.nextInt();\r\n                ArrayList<int[]> list = map.getOrDefault(num, new ArrayList<>());\r\n                //如果这个数存在，就添加他的位置\r\n                list.add(new int[]{i, j});\r\n                //如果不存在，就添加这个数和位置\r\n                map.put(num, list);\r\n            }\r\n        }\r\n    map.forEach((k, v) -> {\r\n       for (int[] a : v) {\r\n           int x1 = a[0], y1 = a[1];\r\n           for (int[] b : v) {\r\n               int x2 = b[0], y2 = b[1];\r\n               // 判断条件：坐标差的绝对值相等且不在同一行或同一列\r\n               if (Math.abs(x1 - x2) == Math.abs(y1 - y2) && x1 - x2 != 0 && y1 - y2 != 0) {\r\n                   count++;\r\n               }\r\n           }\r\n       }\r\n    });\r\n        System.out.println(count);\r\n    }\r\n}', 0, 0, '[{\"input\":\"3 2\\n1 2\\n2 3\\n3 2\",\"output\":\"6\"}]', '{\"memoryLimit\":512,\"stackLimit\":512,\"timeLimit\":3}', 0, 0, '2025-06-15 11:22:01', '123615944728158208', '2025-06-15 20:35:00', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (291698171543928832, '团建', '\n小蓝正在和朋友们团建，有一个游戏项目需要两人合作，两个人分别拿到一棵大小为n 和m 的树，树上的每个结点上有一个正整数权值。\n\n两个人需要从各自树的根结点 1 出发走向某个叶结点，从根到这个叶结点的路径上经过的所有结点上的权值构成了一个正整数序列，两人的序列的最长公共前缀即为他们的得分。给出两棵树，请计算两个人最多的得分是多少。\n\n输入格式\n输入的第一行包含两个正整数n,m，用一个空格分隔。\n\n第二行包含n 个正整数c1,c2,⋯,cn ，相邻整数之间使用一个空格分隔, 其中ci​表示第一棵树结点i 上的权值。\n\n第三行包含m 个正整数d1,d2,⋯,dm，相邻整数之间使用一个空格分隔，其中di表示第二棵树结点i 上的权值。\n\n接下来n−1 行，每行包含两个正整数ui​,vi​表示第一棵树中包含一条ui​和vi之间的边。\n\n接下来m−1 行，每行包含两个正整数pi,qi表示第二棵树中包含一条pi和qi之间的边。\n\n输出格式\n输出一行包含一个整数表示答案。\n\n样例输入1\n2 2\n10 20\n10 30\n1 2\n2 1\n\n样例输出1\n1\n\n样例输入2\n5 4\n10 20 30 40 50\n10 40 20 30\n1 2\n1 3\n2 4\n3 5\n1 2\n1 3\n3 4\n\n样例输出2\n2\n\n样例说明\n在第一个样例中，两个序列可以为[10,20],[10,30] ，最大前缀为1;\n\n在第二个样例中，两个序列可以为 [10,20,40],[10,20,30] ，最大前缀为2。', '[\"DFS\",\"哈希表\"]', 1, NULL, 'import java.util.*;\r\n\r\npublic class Main {\r\n     static Scanner sc = new Scanner(System.in);\r\n    //最大的节点数\r\n    static int N = 2*100000+10;\r\n    static int n , m,res;//n是G1的节点数，m是G2的节点数，res为最大匹配的深度\r\n    //G1：存储每个节点的权值\r\n    static   int[] a = new int[N];\r\n    //G2：存储每个节点的权值\r\n    static  int[] b = new int[N];\r\n    //G1：存储每个节点的邻居节点（邻接表）\r\n    static List<Integer> [] G1 = new List[N];\r\n    //G1：存储每个节点的邻居节点（邻接表）\r\n    static List<Integer> [] G2 = new List[N];\r\n    public static void main(String[] args) {\r\n         n = sc.nextInt();\r\n         m = sc.nextInt();\r\n\r\n        for(int i = 1;i <= n;i++){\r\n            a[i] = sc.nextInt();\r\n        }\r\n        for(int i = 1;i <= m;i++){\r\n            b[i] = sc.nextInt();\r\n        }\r\n        /*G1的邻接表*/\r\n        for(int i = 1;i <= n;i++){\r\n            G1[i] = new ArrayList<>();\r\n        }\r\n        /*G2的邻接表*/\r\n        for(int i = 1;i <= m;i++){\r\n            G2[i] = new ArrayList<>();\r\n        }\r\n        /*输入G1的边*/\r\n        for(int i = 2;i <= n;i++){\r\n            int u = sc.nextInt();\r\n            int v = sc.nextInt();\r\n            G1[u].add(v);//将(u,v)加入G1的邻接表\r\n            G1[v].add(u);//将(v,u)加入G1的邻接表\r\n        }\r\n        /*输入G2的边*/\r\n        for(int i = 2;i <= m;i++){\r\n            int pi = sc.nextInt();\r\n            int qi = sc.nextInt();\r\n            G2[pi].add(qi);//将(u,v)加入G2的邻接表\r\n            G2[qi].add(pi);//将(v,u)加入G2的邻接表\r\n        }\r\n        /*如果起始节点都不相等，就直接返回0*/\r\n        if(a[1] != b[1]){\r\n            System.out.println(0);\r\n            return;\r\n        }\r\n        // 从节点1开始进行深度优先搜索，找到最大匹配路径\r\n        dfs(1,0,1,0,1);\r\n        // 输出最大匹配路径的长度\r\n        System.out.println(res);\r\n    }\r\n    public static void dfs(int u1,int far1,int u2,int far2,int dep){\r\n        //更新最大匹配深度\r\n        res = Math.max(res,dep);\r\n        HashMap<Integer, Integer> map = new HashMap<>();// 存储G1中节点值与其对应节点的映射关系\r\n        //遍历G1中u1的邻居节点\r\n        for(int v : G1[u1]){\r\n            if(v == far1)// 避免回溯到父节点\r\n                continue;\r\n            map.put(a[v],v);// 将节点值a[v]与v节点对应，存入map中\r\n        }\r\n        //遍历G2中u2的邻居节点\r\n        for(int v : G2[u2]){\r\n            if(v == far2)// 避免回溯到父节点\r\n                continue;\r\n            if(map.containsKey(b[v]))\r\n              dfs( map.get(b[v]),u1, v, u2, dep+1);//如果存在v2，并且v2的权值和v1的权值相同，就进行深度优先搜索\r\n        }\r\n    }\r\n}\r\n', 0, 0, '[{\"input\":\"2 2\\n10 20\\n10 30\\n1 2\\n2 1\",\"output\":\"1\"}]', '{\"memoryLimit\":512,\"stackLimit\":512,\"timeLimit\":3}', 0, 0, '2025-06-15 11:25:24', '123615944728158208', '2025-06-15 20:17:01', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (291739295864102912, '卡java排序', '\n本题是一道针对 Java 中 Arrays.sort 的题目，因此只有一个数据，该数据可以把 int 类型的数组在使用 Arrays.sort 后卡成O(n2)O(n2)。\n\n给定一个有n 个正整数的序列a，你需要将其升序排序后输出。\n\n输入格式\n第一行输入一个正整数n。(n=2×105)\n\n第二行输入n 个正整数ai。(1≤i≤n,1≤ai≤n)\n\n输出格式\n输出n 个正整数，为升序排列后的序列a。\n\n样例输入\n6\n1 3 2 3 2 5\n\n样例输出\n1 2 2 3 3 5\n\n说明\n样例只是为了补充说明，和实际测试数据并不一致。', '[\"快速排序\",\"STL\",\"排序\"]', 1, NULL, 'import java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int len = sc.nextInt();\r\n        int[] arr = new int[len+1];\r\n        for (int i =1;i<=len;i++){\r\n            arr[i] = sc.nextInt();\r\n        }\r\n        Arrays.sort(arr);\r\n        for (int i = 1; i <= len; i++) {\r\n          if (i == len) {\r\n              System.out.print(arr[i]);\r\n          }else{\r\n              System.out.print(arr[i]+\" \");\r\n          }\r\n        }\r\n    }\r\n}', 0, 0, '[{\"input\":\"6\\n1 3 2 3 2 5\",\"output\":\"1 2 2 3 3 5\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-15 14:08:48', '123615944728158208', '2025-06-15 20:15:47', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (291742473783386112, '挖矿', '\n小蓝正在数轴上挖矿，数轴上一共有n 个矿洞，第i 个矿洞的坐标为ai。 小蓝从 0 出发，每次可以向左或向右移动1 的距离，当路过一个矿洞时，就会进行挖矿作业，获得1 单位矿石，但一个矿洞不能被多次挖掘。小蓝想知道在移动距离不超过m 的前提下，最多能获得多少单位矿石?\n\n输入格式\n输入的第一行包含两个正整数n,m，用一个空格分隔。\n\n第二行包含n 个整数a1,a2,⋯,an ，相邻整数之间使用一个空格分隔。\n\n输出格式\n输出一行包含一个整数表示答案。\n\n样例输入\n5 4\n0 -3 -1 1 2\n\n样例输出\n4\n\n样例说明\n路径：0→−1→0→1→20→−1→0→1→2，可以对0,−1,1,20,−1,1,2 四个矿洞挖掘并获得最多 4 块矿石。', '[\"前缀和\",\"2024\",\"枚举\"]', 2, 'java', 'import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n      public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        int n = scanner.nextInt();//矿石的数量\r\n        int m = scanner.nextInt();//最大可以移动的矿石范围\r\n        int s = 0;//0的位置\r\n        int[] l = new int[m + 1];//左侧矿石的数量\r\n        int[] r = new int[m + 1];//右侧矿石的数量\r\n        for (int i = 0; i < n; i++) {\r\n            //每个矿石的位置\r\n            int x = scanner.nextInt();\r\n            //表示该负矿洞的数量增加\r\n            if (Math.abs(x) <= m && x < 0) {\r\n                l[-x] ++;\r\n                //表示该负矿洞的数量增加\r\n            }else if (Math.abs(x) <= m && x > 0) {\r\n                r[x] ++;\r\n                //表示0位置矿洞的数量增加\r\n            }else if (x == 0) {\r\n                s++;\r\n            }\r\n        }\r\n        //l[i] 表示位置 -1 到 -i 上矿洞的总数，r[i] 表示位置 1 到 i 上矿洞的总数。\r\n        for (int i = 1; i <= m; i++) {\r\n            l[i] += l[i-1];\r\n            r[i] += r[i-1];\r\n        }\r\n        //初始化最大值 ans：ans 初始值为 r[m] 和 l[m] 中的较大值\r\n        int ans = Math.max(l[m], r[m]);\r\n        //尝试通过合并左右两边矿洞来得到更大的值：\r\n        for (int i = 1; i <= m/2; i++) {\r\n            //将正矿洞 i 和负矿洞 -(m - 2 * i) 配对，计算这两个位置上的矿洞数量的和。\r\n            int sl = l[i] + r[m-i*2];\r\n            //将负矿洞 -i 和正矿洞 m - 2 * i 配对，计算这两个位置上的矿洞数量的和。\r\n            int sr = r[i] + l[m-i*2];\r\n            //比较两个配对的矿洞数量和，并更新 ans 的值。\r\n            ans = Math.max(ans, Math.max(sl, sr));\r\n        }\r\n        //加上0位置的矿洞数量\r\n        ans += s;\r\n        System.out.println(ans);\r\n    }\r\n}', 0, 0, '[{\"input\":\"5 4\\n0 -3 -1 1 2\",\"output\":\"4\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-15 14:21:26', '123615944728158208', '2025-06-15 20:13:10', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (291745998403837952, '小蓝的图书馆', '\n小蓝是一个热爱阅读的年轻人，他有一个小型图书馆。为了能够管理他的书籍库存，他需要一个程序来记录图书的信息并执行两种操作：添加图书add 和查找作者find。\n\n初始小蓝没有书，给出n 个操作。add 操作给出两个字符串bookname,author，表示添加的图书图书名和作者；find 操作给出一个字符串author，你需要输出小蓝的图书馆里这个author 有多少本图书。\n\n输入格式\n第一行一个整数n，表示有n 个操作。\n\n之后n 行，给出操作及后面的参数，如题所述。\n\n给出的字符串长度len 不超过10。\n\n输出格式\n对每一个find 操作，你需要输出这个作者在小蓝的图书馆有多少本书，注意是书的数量，不是不同书的数量，同时不同作者可能出现同名的书。\n样例输入\n7\nfind author1\nadd book1 author1\nfind author1\nadd book1 author1\nfind author1\nadd book1 author2\nfind author2\n样例输出\n0\n1\n2\n1', '[\"STL\"]', 0, 'java', 'import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n   public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int n = sc.nextInt();\r\n        sc.nextLine();\r\n        String[] str = new String[n];\r\n        // 读取输入\r\n        for (int i = 0; i < n; i++) {\r\n            str[i] = sc.nextLine();  // 将每行输入存入str数组\r\n        }\r\n        HashMap<String, Integer> map = new HashMap<>();\r\n        for (int i = 0; i < n; i++) {\r\n            String[] split = str[i].split(\" \");\r\n            if (split[0].equals(\"add\")) {\r\n                String bookname = split[1];\r\n                String author = split[2];\r\n                map.put(author, map.getOrDefault(author, 0) + 1);\r\n            }\r\n            else if (split[0].equals(\"find\")) {\r\n                String author = split[1];\r\n                System.out.println(map.getOrDefault(author, 0));\r\n            }\r\n        }\r\n        sc.close();\r\n    }\r\n}', 0, 0, '[{\"input\":\"7\\nfind author1\\nadd book1 author1\\nfind author1\\nadd book1 author1\\nfind author1\\nadd book1 author2\\nfind author2\",\"output\":\"0\\n1\\n2\\n1\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-15 14:35:26', '123615944728158208', '2025-06-15 20:12:26', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (291862659714785280, '数位递增的数', '一个正整数如果任何一个数位不大于右边相邻的数位，则称为一个数位递增的数。\n\n例如 1135 是一个数位递增的数，而 1024 不是一个数位递增的数。\n\n给定正整数n，请问在整数 1 至n 中有多少个数位递增的数？\n\n输入描述\n输入的第一行包含一个整数n(1<n<10^6)。\n\n输出描述\n输出一行包含一个整数，表示答案。\n\n输入输出样例\n示例\n输入\n30\n输出\n26', '[\"构造\",\"省模拟赛\",\"2020\"]', 1, 'java', 'import java.util.Scanner;\r\n// 1:无需package\r\n// 2: 类名必须Main, 不可修改\r\n\r\npublic class Main {\r\n  public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        int num = scan.nextInt();\r\n        int count = 0;\r\n        String num1 = String.valueOf(num);\r\n        for (int i = 1; i <= num; i++) {\r\n            String num2 = String.valueOf(i);\r\n            int j = 0;\r\n            while (j < num2.length() - 1) {\r\n                if (num2.charAt(j) <= num2.charAt(j + 1)) {\r\n                    j++;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            if (j == num2.length() - 1) {\r\n                count++;\r\n            }\r\n        }\r\n        System.out.println(count);\r\n        scan.close();\r\n    }\r\n}', 0, 0, '[{\"input\":\"30\",\"output\":\"26\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-15 22:19:01', '123615944728158208', '2025-06-15 22:19:11', NULL, 0);
INSERT INTO `oj_problem` VALUES (291866055268114432, '拉马车', '小的时候，你玩过纸牌游戏吗？\n\n有一种叫做\"拉马车\"的游戏，规则很简单，却很吸引小朋友。\n\n其规则简述如下：\n\n假设参加游戏的小朋友是A和B ，游戏开始的时候，他们得到的随机的纸牌序列如下：\nA 方：[K,8,X,K,A,2,A,9,5,A]\nB 方：[2,7,K,5,J,5,Q,6,K,4]\n\n其中的X 表示 \"10\"，我们忽略了纸牌的花色。\n\n从A 方开始，A、B双方轮流出牌。\n\n当轮到某一方出牌时，他从自己的纸牌队列的头部拿走一张，放到桌上，并且压在最上面一张纸牌上（如果有的话）。\n\n此例中，游戏过程：\n\nA 出 K，B 出 2，A 出 8，B 出 7，A 出 X，此时桌上的序列为：\n\nK,2,8,7,X\n\n当轮到B 出牌时，他的牌K 与桌上的纸牌序列中的K 相同，则把包括K 在内的以及两个K 之间的纸牌都赢回来，放入自己牌的队尾。注意：为了操作方便，放入牌的顺序是与桌上的顺序相反的。\n\n此时，A、B双方的手里牌为：\n\nA 方：[K,A,2,A,9,5,A]\n\nB 方：[5,J,5,Q,6,K,4,K,X,7,8,2,K]\n\n赢牌的一方继续出牌。也就是B 接着出 5，A 出 K，B 出 J，A 出 A，B 出 5，又赢牌了。此时桌上的序列为：\n5,K,J,A,5\n\n此时双方手里牌：\nA 方：[2,A,9,5,A]\n\nB 方：[Q,6,K,4,K,X,7,8,2,K,5,A,J,K,5]\n\n注意：更多的时候赢牌的一方并不能把桌上的牌都赢走，而是拿走相同牌点及其中间的部分。但无论如何，都是赢牌的一方继续出牌，有的时候刚一出牌又赢了，也是允许的。\n\n当某一方出掉手里最后一张牌，但无法从桌面上赢取牌时，游戏立即结束。\n\n对于本例的初始手牌情况下，最后A 会输掉，而 \nB 最后的手里牌为：9K2A62KAX58K57KJ5\n\n本题的任务就是已知双方初始牌序，计算游戏结束时，赢的一方手里的牌序。当游戏无法结束时，输出 -1。\n\n输入描述\n输入为 2 行，2 个串，分别表示A、B 双方初始手里的牌序列。我们约定，输入的串的长度不超过 30。2J9A7QA6Q6889977\n\n输出描述\n输出为 1 行，1 个串，表示 \nA 先出牌，最后赢的一方手里的牌序。\n\n输入输出样例\n示例\n\n输入\n\n96J5A898QA\n6278A7Q973\n\n输出\n\n2J9A7QA6Q6889977', '[\"模拟\",\"省赛\"]', 1, 'java', 'import java.util.Scanner;\r\nimport java.util.ArrayList;\r\n// 1:无需package\r\n// 2: 类名必须Main, 不可修改\r\n\r\npublic class Main {\r\n    \r\n    public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        //在此输入您的代码...\r\n       String a = scan.next();\r\n       String b = scan.next();\r\n        \r\n        String[] A = a.split(\"\");\r\n        String[] B = b.split(\"\");\r\n        ArrayList<String> C = new ArrayList<String>();\r\n        ArrayList<String> D = new ArrayList<String>();\r\n        ArrayList<String> E = new ArrayList<String>();\r\n        \r\n        for(int i = 0; i < A.length; i++) {\r\n            C.add(A[i]);\r\n            D.add(B[i]);\r\n        }\r\n        \r\n        VV(C,D,E);\r\n        \r\n        String F = \"\";\r\n        \r\n        if(C.size() == 0) {\r\n            for(int i = 0; i < D.size(); i++) {\r\n                F += D.get(i);\r\n            }\r\n        }\r\n        if(D.size() == 0) {\r\n            for(int i = 0; i < C.size(); i++) {\r\n                F += C.get(i);\r\n            }\r\n        }\r\n        \r\n        System.out.print(F);\r\n        \r\n    }\r\n    static void VV(ArrayList<String> C, ArrayList<String> D, ArrayList<String> E){\r\n        if(C.size() != 0 && D.size() != 0) {\r\n            \r\n            int size = E.size();\r\n            FF(C,E);\r\n            if(E.size() > size) {\r\n                VV(D,C,E);\r\n            }\r\n            if(E.size() < size) {\r\n                VV(C,D,E);\r\n            }\r\n            \r\n        }\r\n    }\r\n    \r\n    \r\n    static void FF(ArrayList<String> G,ArrayList<String> E) {\r\n        int size = E.size();\r\n        String S = G.get(0);\r\n        G.remove(0);\r\n        if(size == 0) {\r\n            E.add(S);\r\n        }\r\n        else {\r\n            for(int i = 0; i < size; i++) {\r\n                if(E.get(i).equals(S)) {\r\n                    G.add(S);\r\n                    for(int j = size-1; j >= i; j--) {\r\n                        G.add(E.get(j));\r\n                        E.remove(j);\r\n                    }\r\n                    break;\r\n                }\r\n                if(E.get(i).equals(S) == false && i == size-1) {\r\n                    E.add(S);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n}', 0, 0, '[{\"input\":\"96J5A898QA\\n6278A7Q973\",\"output\":\"2J9A7QA6Q6889977\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-15 22:32:30', '123615944728158208', '2025-06-15 22:32:40', NULL, 0);
INSERT INTO `oj_problem` VALUES (291868453436923904, '分巧克力', '儿童节那天有K 位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。\n\n小明一共有N 块巧克力，其中第 i 块是Hi​×Wi的方格组成的长方形。为了公平起见，\n\n小明需要从这N 块巧克力中切出 K 块巧克力分给小朋友们。切出的巧克力需要满足：\n\n形状是正方形，边长是整数;\n\n大小相同;\n\n例如一块6×5 的巧克力可以切出6块2×2的巧克力或者2块3×3 的巧克力。\n\n当然小朋友们都希望得到的巧克力尽可能大，你能帮小明计算出最大的边长是多少么？\n\n输入描述\n第一行包含两个整数N,K (1≤N,K≤10^5)。\n\n以下 N 行每行包含两个整数Hi,Wi(1≤Hi,Wi≤10^5)。\n\n输入保证每位小朋友至少能获得一块 1x1 的巧克力。\n\n输出描述\n输出切出的正方形巧克力最大可能的边长。\n\n输入输出样例\n示例\n\n输入\n\n2 10\n6 5\n5 6\n\n输出\n\n2', '[\"二分\"]', 1, 'java', 'import java.util.Scanner;\r\n\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        \r\n        int n = scan.nextInt();\r\n        int k = scan.nextInt();\r\n        int[] h=new int[n];\r\n        int[] w=new int[n];\r\n        for (int i = 0; i <n ; i++) {\r\n            h[i] = scan.nextInt();\r\n            w[i] = scan.nextInt();\r\n        }\r\n\r\n        int max=100000;     \r\n        int min=1;          \r\n        int ave;            \r\n        int cut=0;          \r\n        int ans=0;          \r\n        \r\n        while (min<=max){\r\n            ave=(max+min)/2;\r\n            cut=0;\r\n            for (int i = 0; i <n ; i++) {\r\n                cut+=(h[i]/ave)*(w[i]/ave);     \r\n            }\r\n\r\n            \r\n            if (cut<k)\r\n                max=ave-1;       \r\n            \r\n            else{\r\n                min=ave+1;\r\n                ans=ave;\r\n            }\r\n        }\r\n        System.out.println(ans);\r\n        scan.close();\r\n    }\r\n}', 0, 0, '[{\"input\":\"2 10\\n6 5\\n5 6\",\"output\":\"2\"}]', '{\"timeLimit\":2,\"memoryLimit\":256,\"stackLimit\":256}', 0, 0, '2025-06-15 22:42:02', '123615944728158208', '2025-06-15 22:42:12', NULL, 0);
INSERT INTO `oj_problem` VALUES (291870181485977600, '包子凑数', '小明几乎每天早晨都会在一家包子铺吃早餐。他发现这家包子铺有N种蒸笼，其中第i种蒸笼恰好能放Ai个包子。每种蒸笼都有非常多笼，可以认为是无限笼。\n\n每当有顾客想买X包子，卖包子的大叔就会迅速选出若干笼包子来，使得这若干笼中恰好一共有X个包子。比如一共有 3 种蒸笼，分别能放 3、4 和 5 个包子。当顾客想买 11 个包子时，大叔就会选 2 笼 3 个的再加 1 笼 5 个的（也可能选出 1 笼 3 个的再加 2 笼 4 个的）。\n\n当然有时包子大叔无论如何也凑不出顾客想买的数量。比如一共有 3 种蒸笼，分别能放 4、5 和 6 个包子。而顾客想买 7 个包子时，大叔就凑不出来了。\n\n小明想知道一共有多少种数目是包子大叔凑不出来的。\n\n输入描述\n第一行包含一个整数N(1≤N≤100)。\n\n以下 N 行每行包含一个整数Ai (1≤Ai≤100)。\n\n输出描述\n一个整数代表答案。如果凑不出的数目有无限多个，输出 INF。\n\n输入输出样例\n示例 1\n输入\n\n2\n4\n5\n\n输出\n\n6\n\n样例说明\n\n凑不出的数目包括：1, 2, 3, 6, 7, 11。\n\n示例 2\n输入\n\n2\n4\n6\n\n输出\n\nINF\n\n样例说明\n\n所有奇数都凑不出来，所以有无限多个', '[\"裴蜀定理\",\"动态规划\"]', 2, 'java', 'import java.util.Scanner;\r\n// 1:无需package\r\n// 2: 类名必须Main, 不可修改\r\n\r\npublic class Main {\r\n  public static void main(String[] args) {\r\n    Scanner sc = new Scanner(System.in);\r\n    int n = sc.nextInt();\r\n    int [] arr = new int[n];\r\n    arr[0] = sc.nextInt();\r\n    int gcd=arr[0];\r\n    for (int i = 1; i < n; i++) {\r\n         arr[i] = sc.nextInt();\r\n         gcd = gcd(arr[i], gcd);\r\n    }\r\n    if(gcd!=1) {\r\n       System.out.println(\"INF\");\r\n       System.exit(0);\r\n    }\r\n    boolean [] dp = new boolean[100001];\r\n    dp[0] = true;\r\n    for (int i = 0; i < n; i++) {\r\n       for (int j = arr[i]; j < 100001; j++) {\r\n          if(dp[j-arr[i]]==true) {\r\n             dp[j] = true;\r\n          }\r\n       }\r\n    }\r\n    int res = 0;\r\n    for (int i = 0; i < dp.length; i++) {\r\n       if(dp[i]==false) {\r\n          res++;\r\n       }\r\n    }\r\n    System.out.println(res);\r\n\r\n}\r\nstatic  int gcd(int a, int b) {\r\n   return b == 0 ? a : gcd(b, a % b);\r\n}\r\n}', 0, 0, '[{\"input\":\"2\\n4\\n5\",\"output\":\"6\"},{\"input\":\"2\\n4\\n6\",\"output\":\"INF\"}]', '{\"timeLimit\":1,\"memoryLimit\":256,\"stackLimit\":256}', 0, 0, '2025-06-15 22:48:54', '123615944728158208', '2025-06-15 22:49:04', NULL, 0);
INSERT INTO `oj_problem` VALUES (291873899581284352, '灯笼猜谜【算法赛】', '元宵节到了，小蓝决定参加村里举办的“元宵节触摸灯笼大赛”。比赛规则是这样的：\n村里有 MM 个灯笼，排成一排，编号从 11 到 MM。每个灯笼上都挂着一个谜语，小蓝需要按顺序进行猜谜语。比赛共有 NN 个谜语，第 ii 个谜语对应一个区间 [Li,Ri][Li,Ri]，表示小蓝可以选择触摸这个区间内的任意一个灯笼来猜这个谜语。\n小蓝的手一开始放在第 11 个灯笼上（因为这是她的幸运数字）。为了猜谜语，她需要移动手去触摸灯笼。每次移动手，她都会感到“疲劳值”增加，疲劳值的计算方式是：如果她之前的手的位置是 yy，现在要移动到位置 xx，那么这次移动的疲劳值就是 ∣y−x∣∣y−x∣。\n小蓝的目标是猜完所有谜语，同时尽量减少总疲劳值。她不想让自己的手太累，因为猜完谜语后还要去吃汤圆呢！\n小蓝想知道，猜完所有谜语后，她的最小总疲劳值是多少，请你帮他计算出答案。\n输入格式\n第一行包含两个整数 N,M(1≤N≤105,1≤M≤109)N,M(1≤N≤105,1≤M≤109)，分别表示谜语的数量和灯笼的数量。\n接下来 NN 行，每行包含两个整数 Li,Ri(1≤Li≤Ri≤M)Li,Ri(1≤Li≤Ri≤M)，表示第 ii 个谜语对应的区间。\n输出格式\n输出一个整数，表示小蓝猜完所有谜语所需的最小总疲劳值。\n样例输入\n3 5\n1 3\n2 4\n3 5\n\n样例输出\n2\n\n说明\n   初始位置：11。\n   猜第一个谜语：移动到 22，疲劳值为 ∣1−2∣=1∣1−2∣=1。\n   猜第二个谜语：保持在 22，疲劳值为 ∣2−2∣=0∣2−2∣=0。\n   猜第三个谜语：移动到 33，疲劳值为 ∣2−3∣=1∣2−3∣=1。\n   总疲劳值为 1+0+1=21+0+1=2。\n\n', '[\"枚举\"]', 1, 'java', 'import java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int n=sc.nextInt();\r\n        long m=sc.nextInt();\r\n        long distance=0,place=1;\r\n        for(int i=0;i<n;i++){\r\n            long left=sc.nextInt();\r\n            long right=sc.nextInt();\r\n             if(place < left){\r\n                distance=distance+(left-place);\r\n                place=left;\r\n            }else if(place > right){\r\n                distance=distance+(place-right);\r\n                place=right;\r\n            }\r\n        }\r\n        sc.close();\r\n        System.out.println(distance);\r\n    }\r\n}', 0, 0, '[{\"input\":\"3 5\\n1 3\\n2 4\\n3 5\",\"output\":\"2\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-15 23:03:41', '123615944728158208', '2025-06-15 23:03:50', NULL, 0);
INSERT INTO `oj_problem` VALUES (291875205851127808, '生命之树', '在 X 森林里，上帝创建了生命之树。\n他给每棵树的每个节点（叶子也称为一个节点）上，都标了一个整数，代表这个点的和谐值。\n上帝要在这棵树内选出一个节点集 SS，使得对于 SS 中的任意两个点 a,ba,b，都存在一个点列 a,v1,v2,⋯,vk,ba,v1,v2,⋯,vk,b 使得这个点列中的每个点都是 SS 里面的元素，且序列中相邻两个点间有一条边相连。\n在这个前提下，上帝要使得 SS 中的点所对应的整数的和尽量大。\n这个最大的和就是上帝给生命之树的评分。\n经过 atm 的努力，他已经知道了上帝给每棵树上每个节点上的整数。但是由于 atm 不擅长计算，他不知道怎样有效的求评分。他需要你为他写一个程序来计算一棵树的分数。\n集合 SS 可以为空。\n输入描述\n第一行一个整数 nn 表示这棵树有 nn 个节点。\n第二行 nn 个整数，依次表示每个节点的评分。\n接下来 n−1n−1 行，每行 2 个整数 u,vu,v，表示存在一条 uu 到 vv 的边。由于这是一棵树，所以是不存在环的。\n其中，0<n≤1050<n≤105, 每个节点的评分的绝对值不超过 106106。\n输出描述\n输出一行一个数，表示上帝给这棵树的分数。\n输入输出样例\n示例\n输入\n5\n1 -2 -3 4 5\n4 2\n3 1\n1 2\n2 5\n\n输出\n8\n', '[\"树形DP\"]', 2, 'java', 'import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Stack;\r\n\r\npublic class Main {\r\n    static int n, xSum = 0, ySum = 0;\r\n    static int[] dx, dy;\r\n    static int[][] d = {{0,1},{1,0},{0,-1},{-1,0}};\r\n    static boolean[][] visited;\r\n    static Stack<Integer> stack;\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n        String[] temp = in.readLine().split(\" \");\r\n        n = Integer.parseInt(temp[0]);\r\n        temp = in.readLine().split(\" \");\r\n        dx = new int[n];    dy = new int[n];\r\n        for (int i = 0; i < n; i++) {\r\n            dy[i] = Integer.parseInt(temp[i]);\r\n            ySum += dy[i];\r\n        }\r\n        temp = in.readLine().split(\" \");\r\n        for (int i = 0; i < n; i++) {\r\n            dx[i] = Integer.parseInt(temp[i]);\r\n            xSum += dx[i];\r\n        }\r\n\r\n        stack = new Stack<>();\r\n        visited = new boolean[n][n];\r\n        dfs(0, 0);\r\n        while (!stack.isEmpty()) {\r\n            System.out.print(stack.pop() + \" \");\r\n        }\r\n    }\r\n    public static boolean dfs(int i, int j) {\r\n        visited[i][j] = true;\r\n        dx[i]--; dy[j]--;\r\n        xSum--; ySum--;\r\n        if (xSum == 0 && ySum == 0 && i == n - 1 && j == n - 1) {\r\n            stack.push(i * n + j);\r\n            return true;\r\n        }\r\n        for (int k = 0; k < 4; k++) {\r\n            int x = i + d[k][0];\r\n            int y = j + d[k][1];\r\n            if (x >= 0 && y >= 0 && x < n && y < n) {\r\n                if (!visited[x][y] && dx[x] > 0 && dy[y] > 0) {\r\n                    if(dfs(x, y)) {\r\n                        stack.push(i * n + j);\r\n                        return true;\r\n                    }\r\n                    visited[x][y] = false;\r\n                    dx[x]++; dy[y]++;\r\n                    xSum++; ySum++;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}', 0, 0, '[{\"input\":\"4\\n2 4 3 4\\n4 3 3 3\",\"output\":\"0 4 5 1 2 3 7 11 10 9 13 14 15\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-15 23:08:52', '123615944728158208', '2025-06-15 23:09:02', NULL, 0);
INSERT INTO `oj_problem` VALUES (291875893742149632, '确定字符串是否包含唯一字符', '实现一个算法来识别一个字符串的字符是否是唯一的（忽略字母大小写）。\n若唯一，则输出YES，否则输出NO。\n输入描述\n输入一行字符串，长度不超过 100。\n输出描述\n输出一行，若字符串的字符是唯一的，则输出YES，否则输出NO。\n输入输出样例\n示例\n输入\nabd25+\n\n输出\nYES\n', '[\"新手\"]', 0, 'java', 'import java.util.HashSet;\r\nimport java.util.Scanner;\r\n// 1:无需package\r\n// 2: 类名必须Main, 不可修改\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        String str = sc.next();\r\n        HashSet hashSet = new HashSet();\r\n       for(int i = 0;i<str.length();i++){\r\n          if(hashSet.contains(str.charAt(i))){\r\n              System.out.println(\"NO\");\r\n              return;\r\n          }\r\n          hashSet.add(str.charAt(i));\r\n       }\r\n        System.out.println(\"YES\");\r\n    }\r\n}', 0, 0, '[{\"input\":\"abd25+\",\"output\":\"YES\"}]', '{\"timeLimit\":1,\"memoryLimit\":256,\"stackLimit\":256}', 0, 0, '2025-06-15 23:11:36', '123615944728158208', '2025-06-15 23:11:46', NULL, 0);
INSERT INTO `oj_problem` VALUES (291879854654103552, '确定字符串是否是另一个的排列', '实现一个算法来识别一个字符串 str2str2 是否是另一个字符串 str1str1 的排列。排列的解释如下：如果将 str1str1 的字符拆分开，重新排列后再拼接起来，能够得到 str2str2 ，那么就说字符串 str2str2 是字符串 str1str1 的排列。（不忽略大小写）\n如果 str2str2 字符串是 str1str1 字符串的排列，则输出 YES；如果 str2str2 字符串不是 str1str1 字符串的排列，则输出 NO；\n输入描述\n第一行为字符串str1str1；\n第二行为字符串str2str2；\n字符串长度均不超过 100。\n输出描述；\n输出一行，如果 str2str2 字符串是 str1str1 字符串的排列，则输出 YES；\n如果 str2str2 字符串不是 str1str1 字符串的排列，则输出 NO；\n输入输出样例\n示例\n输入\nacb\nbac\n', '[\"新手\"]', 0, 'java', 'import java.util.*;\r\n// 1:无需package\r\n// 2: 类名必须Main, 不可修改\r\n//////\r\npublic class Main {\r\n   public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        String str1 = scan.next();\r\n        String str2 = scan.next();\r\n        char[] charArray = str1.toCharArray();\r\n        char[] charArray2 = str2.toCharArray();\r\n        Arrays.sort(charArray);\r\n        Arrays.sort(charArray2);\r\n        str1 = new String(charArray);\r\n        str2 = new String(charArray2);\r\n        if (str1.equals(str2)) {\r\n            System.out.println(\"YES\");\r\n        }else{\r\n            System.out.println(\"NO\");\r\n        }\r\n    }\r\n}', 0, 0, '[{\"input\":\"acb\\nbac\",\"output\":\"YES\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-15 23:27:20', '123615944728158208', '2025-06-15 23:27:30', NULL, 0);
INSERT INTO `oj_problem` VALUES (291880961178607616, '数组操作', '给出一个长度为 nn 的数组 AiAi，由 1 到 nn 标号 ， 你需要维护 mm 个操作。\n操作分为三种，输入格式为：\nl r dl r d，将数组中下标 ll 到 rr 的位置都加上 d，即对于l≤i≤rl≤i≤r，执行 Ai=Ai+dAi=Ai+d。\nl1 r1 l2 r2l1 r1 l2 r2，将数组中下标为 l1l1 到 r1r1 的位置，赋值成 l2l2 到 r2r2的值，保证 r1−l1=r2−l2r1−l1=r2−l2。换句话说先对 0≤i≤r2−l20≤i≤r2−l2 执行 Bi=A(l2+i)Bi=A(l2+i)，再对 0≤i≤r1−l10≤i≤r1−l1执行 A(l1+i)=BiA(l1+i)=Bi，其中 BiBi 为一个临时数组。\nl rl r，求数组中下标 ll 到 rr 的位置的和，即求出∑i=1rAi∑i=1rAi 。\n输入描述\n第一行一个整数 Case，表示测试点编号，其中 Case=0 表示该点为样例。\n第二行包含两个整数 n,mn,m。保证 1≤n,m≤1051≤n,m≤105。\n第三行包含 nn 个整数 AiAi，表示这个数组的初值。保证 0≤Ai≤1050≤Ai≤105。\n接下来 m 每行描述一个操作，格式如问题描述所示。\n其中，0≤d≤1050≤d≤105，1≤l≤r≤n1≤l≤r≤n，1≤l1≤r1≤n1≤l2≤r2≤n1≤l1≤r1≤n1≤l2≤r2≤n，r1−l1=r2−l2r1−l1=r2−l2。\n输出描述:\n对于每次 3 操作输出一行一个数，表示求和的结果。\n输入输出样例\n示例\n输入\n0\n5 6\n1 2 3 4 5\n2 1 3 3 5\n3 3 5\n1 2 4 2\n3 3 5\n2 1 3 3 5\n3 1 5\n\n输出\n14\n18\n29\n', '[\"线段树\",\"国赛\"]', 1, 'java', NULL, 0, 0, '[{\"input\":\"0\\n5 6\\n1 2 3 4 5\\n2 1 3 3 5\\n3 3 5\\n1 2 4 2\\n3 3 5\\n2 1 3 3 5\\n3 1 5\",\"output\":\"14\\n18\\n29\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-15 23:31:44', '123615944728158208', '2025-06-15 23:31:54', NULL, 0);
INSERT INTO `oj_problem` VALUES (291882277246345216, '切开字符串', 'Pear 有一个字符串，不过他希望把它切成两段。\n这是一个长度为 N(N≤105)N(N≤105) 的字符串。\nPear 希望选择一个位置，把字符串不重复不遗漏地切成两段，长度分别是 tt 和 N−tN−t（这两段都必须非空）。\nPear 用如下方式评估切割的方案：\n定义\"正回文子串\"为：长度为奇数的回文子串。\n设切成的两段字符串中，前一段中有 AA 个不相同的正回文子串，后一段中有 BB 个不相同的非正回文子串，则该方案的得分为 A×BA×B。\n注意，后一段中的 B 表示的是：\"⋯⋯非正回文⋯⋯\"，而不是: \"⋯⋯正回文⋯⋯\"。\n那么所有的切割方案中，A×BA×B 的最大值是多少呢？\n输入描述\n输入第一行一个正整数 N(N≤105)N(N≤105) 。\n接下来一行一个字符串，长度为 NN。该字符串仅包含小写英文字母。\n输出描述\n一行一个正整数，表示所求的 A×BA×B 的最大值。\n输入输出样例\n示例\n输入\n10\nbbaaabcaba\n\n输出\n38\n', '[\"Manacher\",\"字符串hash\",\"平衡树\"]', 1, 'java', NULL, 0, 0, '[{\"input\":\"10\\nbbaaabcaba\",\"output\":\"38\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-15 23:36:58', '123615944728158208', '2025-06-15 23:37:08', NULL, 0);
INSERT INTO `oj_problem` VALUES (291883634158215168, '最长回文子串', '给定一个字符串 S，请你求出 S的最长回文子串。\n输入描述\n输入仅一行，包含一个字符串 SS。\n1≤∣S∣≤5×10^5，保证 S 只包含小写字母、大写字母、数字。\n输出描述\n输出共 11 行，包含一个整数，表示答案。\n输入输出样例\n示例 1\n输入\naa1ABA1b\n\n输出\n5\n', '[\"Manacher\"]', 0, 'java', 'import java.util.*;\r\nimport java.math.*;\r\npublic class Main{\r\n    static Scanner sc=new Scanner(System.in);\r\n\r\n    public static void main(String[]args) {\r\n        String str=sc.nextLine();\r\n        int len=0;\r\n        for(int i=0;i<str.length();i++) {\r\n            int s=1;\r\n            int j=1;\r\n            while(i+j<=str.length()-1&&i-j>=0&&str.charAt(i+j)==str.charAt(i-j)) {\r\n                s+=2;\r\n                j++;\r\n            }\r\n            if(s>len) {\r\n                len=s;\r\n            }\r\n        }\r\n        for(int i=0;i<str.length()-1;i++) {\r\n            int s=2;\r\n            int j=1;\r\n            if(str.charAt(i)==str.charAt(i+1)) {\r\n                while(i-j>=0&&i+1+j<=str.length()-1&&str.charAt(i-j)==str.charAt(i+j+1)) {\r\n                    s+=2;\r\n                    j++;\r\n                }\r\n            }\r\n            if(s>len) {\r\n                len=s;\r\n            }\r\n        }\r\n        System.out.println(len);\r\n    }\r\n}', 0, 0, '[{\"input\":\"aa1ABA1b\",\"output\":\"5\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-15 23:42:21', '123615944728158208', '2025-06-15 23:43:16', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (291884986624122880, '压缩字符串', '实现一个算法来压缩一个字符串。压缩的要求如下：\n需要判断压缩能不能节省空间，仅在压缩后字符串比原字符串长度更短时进行压缩。\n压缩的格式是将连续相同字符替换为字符 + 数字形式，例如 \"AAABCCDDDD\" 变为A3BC2D4\"。\n输入描述\n输入一行字符串，长度不超过 500.\n输出描述\n输出一行。若输入的字符串可压缩，则输出压缩后的字符串，否则输出 NO。\n输入输出样例\n示例\n输入\nAAABCCDDDD\n\n输出\nA3BC2D4\n', '[\"新手\"]', 0, 'java', 'import java.util.Scanner;\r\n// 1:无需package\r\n// 2: 类名必须Main, 不可修改\r\n\r\npublic class Main {\r\n   public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        //在此输入您的代码...\r\n        System.out.println(compressString(scan.nextLine()));\r\n        scan.close();\r\n    }\r\n    private static String compressString(String s){\r\n        int count = 1;\r\n        StringBuilder result = new StringBuilder();\r\n        for(int i = 0; i < s.length()-1;i++){\r\n            if(s.charAt(i) == s.charAt(i+1)){\r\n                count++;\r\n            }else{\r\n                if(count == 1){\r\n                    result.append(s.charAt(i));\r\n                }else {\r\n                    result.append(s.charAt(i)).append(count);\r\n                }\r\n                count = 1;\r\n            }\r\n        }\r\n        result.append(s.charAt(s.length()-1)).append(count);\r\n        return result.length() < s.length() ? result.toString() :\"NO\";\r\n    }\r\n}', 0, 0, '[{\"input\":\"AAABCCDDDD\",\"output\":\"A3BC2D4\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-15 23:47:44', '123615944728158208', '2025-06-15 23:47:54', NULL, 0);
INSERT INTO `oj_problem` VALUES (291887731842228224, '蓝桥王国2', '小明是蓝桥王国的王子，今天是他登基之日。\n在即将成为国王之前，老国王给他出了道题，他想要考验小明是否有能力管理国家。\n题目的内容如下：\n蓝桥王国一共有 N个建筑和 M条单向道路，每条道路都连接着两个建筑，每个建筑都有自己编号，分别为 1∼N。（其中皇宫的编号为 1）从皇宫到每个建筑的最短路径是多少？\n经过你的帮助，小明轻松的回答了该问题，但是国王的考验并不仅仅这么简单。很快国王又提出了一个问题，他要小明回答从建筑 S 到建筑 T的第 KK 短路的长度为多少？\n小明此时已经失去了思考能力，作为他的好朋友，请你再次帮帮他。\n输入描述\n输入第一行包含三个正整数 N,MN,M。\n第 22 到 M+1行每行包含三个正整数 u,v,w，表示 u→v之间存在一条距离为 w的路。\n第 M+2M+2 行包含三个正整数 S,T,KS,T,K。\n1≤S,T≤N≤10^3 1≤S,T≤N≤10^3，1≤m≤10^5 1≤m≤10^5，1≤ui,vi≤N 1≤ui,vi≤N，0≤wi≤10^3 0≤wi≤10^3，保证 S≠T。\n输出描述\n输出占一行，包含一个整数，表示 S→TS→T 的第 K短路的长度，如果第 K短路不存在，则输出 −1。\n输入输出样例\n示例 1\n输入\n3 4\n1 3 9\n1 2 3\n1 2 1\n2 3 2\n1 3 1\n\n输出\n3\n\n示例2\n输入\n3 4\n1 3 9\n1 2 3\n1 2 1\n2 3 2\n1 3 10\n\n输出\n-1\n\n', '[\"Astar\"]', 0, 'java', 'class sta1\r\n{\r\n    int a;\r\n    int ed;\r\n    int d;\r\n    sta1(int a,int d,int ed)\r\n    {\r\n        this.a=a;\r\n        this.d=d;\r\n        this.ed=ed;\r\n    }\r\n}\r\nclass sta\r\n{\r\n    int a;\r\n\r\n    int d;\r\n    sta(int a,int d)\r\n    {\r\n        this.a=a;\r\n        this.d=d;\r\n    }\r\n}\r\n\r\npublic class Main{\r\n     static  StreamTokenizer s;\r\n     static PrintWriter p;\r\n     static int n,m,idx=1;\r\n     static PriorityQueue<sta> q\r\n     static PriorityQueue<sta1> bq\r\n     static int num=0;\r\n    static int [] e=new int[2000020];static int [] ne=new int[2000020];static int [] w=new int[2000020];static int [] dis=new int[100020];static int [] st=new int[100020];\r\n    static int [] h=new int[100020];\r\n    static int [] h1=new int[100020];\r\n   public static void  main(String[]args) throws IOException\r\n   {\r\n       Arrays.fill(dis,Integer.MAX_VALUE);\r\n       int n=read();\r\n       int m=read();\r\n       for (int i=1;i<=m;i++)\r\n       {\r\n           int a=read();\r\n           int b=read();\r\n           int c=read();\r\n           add(h,a,b,c);\r\n           add(h1,b,a,c);\r\n       }\r\n       int from=read();\r\n       int to =read();\r\n       int k=read();\r\n       dj(to);\r\n       p.print( bfs(from,to,k));\r\n       p.flush();\r\n   }\r\n    public static int read() throws IOException \r\n    {\r\n        s.nextToken();\r\n        return (int)s.nval;\r\n    }\r\n    public static void add(int[] h,int a,int b,int c)\r\n    {\r\n        e[idx]=b;\r\n        ne[idx]=h[a];\r\n        w[idx]=c;\r\n        h[a]=idx++;\r\n    }\r\n    public static void dj(int to)\r\n    {\r\n        q.offer(new sta(to,0));\r\n        dis[to]=0;\r\n        while (!q.isEmpty())\r\n        {\r\n            sta x=q.poll();\r\n            if (st[x.a]==1)continue;\r\n            st[x.a]=1;\r\n            for (int i =h1[x.a];i!=0;i=ne[i])\r\n            {\r\n                if(dis[e[i]]>dis[x.a]+w[i]) \r\n                {dis[e[i]]=dis[x.a]+w[i];q.offer(new sta(e[i],dis[e[i]]));}\r\n            }\r\n        }\r\n    }\r\n    public static int bfs(int from,int to,int k)\r\n    {\r\n        bq.offer(new sta1(from,0+dis[from],0));\r\n        while (!bq.isEmpty())\r\n        {\r\n            sta1 x=bq.poll();\r\n            if (x.a==to)\r\n            {\r\n                num++;\r\n            }\r\n            if (num==k)\r\n            {\r\n                return x.d;\r\n            }\r\n            for (int i =h[x.a];i!=0;i=ne[i])\r\n            {\r\n                bq.offer(new sta1(e[i],dis[e[i]]+x.ed+w[i],x.ed+w[i]));\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}', 0, 0, '[{\"input\":\"3 4\\n1 3 9\\n1 2 3\\n1 2 1\\n2 3 2\\n1 3 1\",\"output\":\"3\"},{\"input\":\"3 4\\n1 3 9\\n1 2 3\\n1 2 1\\n2 3 2\\n1 3 10\",\"output\":\"-1\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-15 23:58:38', '123615944728158208', '2025-06-15 23:58:48', NULL, 0);
INSERT INTO `oj_problem` VALUES (291889920518135808, '回文字符串', '小蓝最近迷上了回文字符串，他有一个只包含小写字母的字符串 S，小蓝可以往字符串 S 的开头处加入任意数目个指定字符： l、q、b（ASCII码分别为： 108、113、981）。小蓝想要知道他是否能通过这种方式把字符串 S 转化为一个回文字符串。\n输入格式\n输入的第一行包含一个整数 T，表示每次输入包含 T组数据。\n接下来依次描述 T组数据。\n每组数据一行包含一个字符串 S。\n输出格式\n输出 T行，每行包含一个字符串，依次表示每组数据的答案。如果可以将 S转化为一个回文字符串输出 Yes，否则输出 No。\n样例输入\n3\ngmgqlq\npdlbll\naaa\n\n样例输出\nYes\nNo\nYes\n\n样例说明\n对于 gmgqlqgmgqlq，可以在前面加上 qlq→qlqgmgqlqqlq→qlqgmgqlq 转化为一个回文字符串；\n对于 pdlbllpdlbll，无法转化为一个回文字符串；\n对于 aaaaaa，本身就是一个回文字符串。\n\n', '[\"字符串hash\",\"前缀和\",\"省赛\"]', 0, 'java', 'import java.util.Scanner;\r\n// 1:无需package\r\n// 2: 类名必须Main, 不可修改\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        int t = scan.nextInt();\r\n        while (t-- > 0) {\r\n            String s = scan.next();\r\n            System.out.println(f(s) ? \"Yes\" : \"No\");\r\n        }\r\n    }\r\n\r\n    public static boolean f(String s) {\r\n        int l = 0;\r\n        int r = s.length() - 1;\r\n        while (l < r) {\r\n            if (s.charAt(l) == s.charAt(r)) {\r\n                l++;\r\n                r--;\r\n            } else {\r\n                if (s.charAt(r) == \'l\' || s.charAt(r) == \'q\' || s.charAt(r) == \'b\') {\r\n                    r--;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}', 0, 0, '[{\"input\":\"3\\ngmgqlq\\npdlbll\\naaa\",\"output\":\"Yes\\nNo\\nYes\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-16 00:07:20', '123615944728158208', '2025-06-16 00:07:30', NULL, 0);
INSERT INTO `oj_problem` VALUES (291891095674036224, '等差数列', '数学老师给小明出了一道等差数列求和的题目。但是粗心的小明忘记了一 部分的数列，只记得其中 N个整数。\n现在给出这 N个整数，小明想知道包含这 N个整数的最短的等差数列有几项？\n输入描述\n输入的第一行包含一个整数 NN。\n第二行包含 NN 个整数 A1,A2,⋅⋅⋅,AN。(注意 A1 ∼ AN 并不一定是按等差数列中的顺序给出)\n其中，2≤N≤105，0≤Ai≤1092≤N≤105，0≤Ai≤109。\n输出描述\n输出一个整数表示答案。\n输入输出样例\n示例\n输入\n5\n2 6 4 10 20\n\n输出\n10\n\n样例说明： 包含 2、6、4、10、20 的最短的等差数列是 2、4、6、8、10、12、14、16、 18、20。\n\n', '[\"GCD\"]', 1, 'java', 'import java.util.*;\r\n// 1:无需package\r\n// 2: 类名必须Main, 不可修改\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        int n= scanner.nextInt();\r\n        int[] arr=new int[n];\r\n        for (int i = 0; i < arr.length; i++) {\r\n            arr[i]= scanner.nextInt();\r\n        }\r\n        Arrays.sort(arr);\r\n        int range=arr[arr.length-1]-arr[0];\r\n        int min=range;\r\n        for (int i = 0; i <arr.length-1; i++) {\r\n            int t=arr[i+1]-arr[i];\r\n            if(t<min){\r\n                min=t;\r\n            }\r\n        }\r\n        System.out.println(range/min+1);\r\n\r\n    }\r\n}', 0, 0, '[{\"input\":\"5\\n2 6 4 10 20\",\"output\":\"10\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-16 00:12:00', '123615944728158208', '2025-06-16 00:12:10', NULL, 0);
INSERT INTO `oj_problem` VALUES (292010553371820032, '验证哥德巴赫猜想', '编写程序，实现将一个不小于4的偶数分解成两个素数之和，并输出所有的分解形式。\n\n输入描述\n输入文件包含多个测试数据，每个测试数据占一行，为一个偶数n，4≤n<2^10。输入文件的最后一行为0，表示输入结束。\n\n输出描述\n对每个偶数（最后的0除外），输出所有的分解形式，格式如样例输出所示。\n\n样例输入\n34\n0\n\n样例输出\n34 = 3 + 31\n34 = 5 + 29\n34 = 11 + 23\n34 = 17 + 17\n\n运行限制\n最大运行时间：1s\n最大运行内存: 32M', '[\"引用\"]', 1, 'python', 'import math\r\n\r\ndef is_prime(num):\r\n    if num == 1:\r\n        return False\r\n    if num == 2 or num == 3:\r\n        return True\r\n    if num % 6 != 1 and num % 6 != 5:\r\n        return False\r\n    tmp = math.floor(math.sqrt(num))\r\n    for i in range(5, tmp + 2, 6):\r\n        if num % i == 0 or num % (i + 2) == 0:\r\n            return False\r\n    return True\r\n\r\ndef Goldbach(num):\r\n    n = 2\r\n    while n <= int(num / 2) :\r\n        if is_prime(n):\r\n            k = num - n\r\n            if is_prime(k):\r\n                print(f\'{num} = {n} + {k}\')\r\n        n += 1\r\n\r\n\r\n# 输入整数，以回车分隔，直到输入0结束\r\nnumbers = []\r\n\r\nwhile True:\r\n    try:\r\n        num = int(input())\r\n        if num == 0:\r\n            break\r\n        numbers.append(num)\r\n    except ValueError:\r\n        print(\"输入错误，请输入一个整数！\")\r\n\r\nfor num in numbers:\r\n    Goldbach(num)', 0, 0, '[{\"input\":\"34\\n0\",\"output\":\"34 = 3 + 31\\n34 = 5 + 29\\n34 = 11 + 23\\n34 = 17 + 17\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-16 08:06:41', '123615944728158208', '2025-06-16 08:06:51', NULL, 0);
INSERT INTO `oj_problem` VALUES (292011278487289856, '假银币', '有12枚银币，其中一枚是假的，它的颜色和大小跟真的银币是一样的，无法分辨。假银币的重量跟真银币的重量不一样，但并不知道假银币比真银币重还是轻。有一台很精确的天平，允许称三次，从而找出假银币。例如，如果在天平的两边各放一枚银币，天平是平衡的，那就知道这两块银币是真的。进一步，如果将其中一块真银币和第三枚银币放到天平上，而天平不平衡，那就知道第3枚银币是假银币，并且可以得知假银币比真银币轻还是重：如果假银币所在的一侧是下沉的，则它比真银币重，否则比真银币轻。测试数据保证3次称重就能找出假银币。\n\n输入描述\n输入文件的第1行为正整数n，代表测试数据的数目。每个测试数据占三行，每一行代表一次称重。12枚银币标记为字母A～L。每一次称重用两个字符串和一个单词表示。第一个字符串代表天平左边的银币，第2个字符串代表天平右边的银币。总是在天平的两边放同样多的银币。单词为“up”、“down”或“even”，表示此次称重天平右边是上浮、下沉还是跟左边平衡。\n\n输出描述\n对每个测试数据，输出必须表明哪个字母对应的银币是假银币，并且告知假银币比真银币重还是轻。输出格式如样例输出所示。输入数据保证每个测试数据的解是唯一的。\n\n样例输入\n\n2\nABCD EFGH even\nABCI EFJK up\nABIJ EFGH even\nABCDEF GHIJKL up\nABHLEF GDIJKC down\nCD HA even\n\n样例输出\nK is the counterfeit coin and it is light.\nL is the counterfeit coin and it is light.\n\n运行限制\n最大运行时间：1s\n最大运行内存: 32M', '[\"引用\"]', 2, 'python', 'import os\r\nimport sys\r\n# 检测三次称重是否正确\r\ndef check(coin, left, right, result):\r\n    weight = 2  # 2表示未确定，1表示重，0表示轻\r\n    if coin in left:\r\n        if result == \"even\":\r\n            return False, weight\r\n        elif result == \"up\":\r\n            weight = 1  # 假币较重\r\n        else:\r\n            weight = 0  # 假币较轻\r\n    elif coin in right:\r\n        if result == \"even\":\r\n            return False, weight\r\n        elif result == \"up\":\r\n            weight = 0  # 假币较轻\r\n        else:\r\n            weight = 1  # 假币较重\r\n    else:\r\n        if result != \"even\":\r\n            return False, weight\r\n    return True, weight\r\n\r\nn = int(input())\r\ncoin_result = []\r\nweight_result = []\r\n\r\nfor _ in range(n):\r\n    left = []\r\n    right = []\r\n    result = []\r\n    for _ in range(3):\r\n        l, r, res = input().split()\r\n        left.append(l)\r\n        right.append(r)\r\n        result.append(res)\r\n    \r\n    coins = \"ABCDEFGHIJKL\"\r\n    for coin in coins:\r\n        first_weight = -1  # 初始化为未确定\r\n        valid_all = True\r\n        for i in range(3):\r\n            valid, weight = check(coin, left[i], right[i], result[i])\r\n            if not valid:\r\n                valid_all = False\r\n                break\r\n            elif first_weight == -1 and weight != 2:\r\n                first_weight = weight  # 记录第一次的重量\r\n            elif weight != 2 and first_weight != -1 and weight != first_weight:\r\n                valid_all = False  # 轻重不一致，假币无效\r\n                break\r\n        \r\n        if valid_all and first_weight != -1:\r\n            coin_result.append(coin)\r\n            weight_result.append(first_weight)\r\n            break\r\n\r\n# 输出结果\r\nfor i in range(len(coin_result)):\r\n    print(f\"{coin_result[i]} is the counterfeit coin and it is {\'heavy\' if weight_result[i] == 1 else \'light\'}.\")', 0, 0, '[{\"input\":\"2\\nABCD EFGH even\\nABCI EFJK up\\nABIJ EFGH even\\nABCDEF GHIJKL up\\nABHLEF GDIJKC down\\nCD HA even\",\"output\":\"K is the counterfeit coin and it is light.\\nL is the counterfeit coin and it is light.\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 08:09:34', '123615944728158208', '2025-06-16 10:14:06', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292013589871755264, '小蓝的括号串', '小蓝有一个长度为 n 的括号串，括号串仅由字符 (、) 构成，请你帮他判断一下该括号串是否合法，合法请输出 Yes ，反之输出 No 。\n\n合法括号序列：\n\n空串是合法括号序列。\n\n若 s 是合法括号序列，则 ( s ) 也是合法括号序列。\n若 s,t 都是合法括号序列，则 st 也是合法括号序列。\n\n例如 ()() ， (()) ， (())() 均为合法括号序列。\n\n输入格式\n第一行包含一个正整数 n ，表示括号串的长度。\n\n第二行包含一个长度为 n 的括号串。\n\n输出格式\n\n输出共 1 行，若括号串合法请输出 Yes ，反之输出 No 。\n\n样例输入1\n10\n(()(()))()\n\n样例输出1\nYes\n\n样例输入2\n5\n()()(\n\n样例输出2\nNo\n\n评测数据规模\n对于所有评测数据，\n1≤n≤1×10²，括号串仅包含两种字符 ( ， ) 。\n\n运行限制\n最大运行时间：1s\n最大运行内存: 256M', '[\"栈\"]', 1, 'java', 'import java.util.Scanner;\r\n//1:无需package\r\n//2: 类名必须Main, 不可修改\r\n\r\npublic class Main {\r\n public static void main(String[] args) {\r\n     Scanner scan = new Scanner(System.in);\r\n     //在此输入您的代码...\r\n     int n=scan.nextInt();\r\n     String s=scan.next();\r\n     char[]a=s.toCharArray();\r\n     int top=0;boolean f=true;\r\n     for(int i=0;i<a.length;i++){\r\n         if(a[i]==\'(\')top++;\r\n         else {top--;if(top<0)f=false;};}\r\n     if(f&&top==0)System.out.println(\"Yes\");\r\n     else System.out.println(\"No\");\r\n     scan.close();\r\n }\r\n}', 0, 0, '[{\"input\":\"10\\n(()(()))()\",\"output\":\"Yes\"},{\"input\":\"5\\n()()(\",\"output\":\"No\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 08:18:45', '123615944728158208', '2025-06-16 10:13:43', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292015048088649728, '取模', '众所周知，Komorebi 不擅长数学，所以邀请队友救一下。 这里需要介绍一个高深的符号：\n，它表示的意思是取模 (modulo)，或者叫取余数，例如：14 除以 3 等于 4 余 2，因此 14。 定义就那么简单，相信你一眼就能看懂，但 Komorebi 却看了好久还是一头雾水，所以下面这个和取模有关的问题他就只能求助于你啦！计算 $\\sum_{i=1}^{n}{(n%i)}$ 。因为答案可能很大，因此只需要输出答案需要对 998244353 取模后的结果就好啦，是不是更简单了！\n\n输入格式\n输入第 1 行包含一个正整数 n。\n\n输出格式\n输出一行，这一行只包含一个整数，表示答案对 998244353 取模后的结果。\n\n样例输入1\n1\n\n样例输出1\n0\n\n样例输入2\n5\n\n样例输出2\n4\n\n说明/提示\n对于所有评测数据，\n1≤n≤10¹²。\n\n样例 2 中，5，因此答案 =1+2+1+0=4。', '[\"数论分块\"]', 0, 'python', 'import os\r\nimport sys\r\n\r\n# 请在此输入您的代码\r\nmod = 998244353\r\nn = int(input())\r\nans = pow(n,2,mod)\r\ni = 1\r\nwhile i <= n:\r\n    j = n // (n//i)\r\n    temp = (n//i) % mod\r\n    part = (i + j)*(j - i + 1)//2 % mod\r\n    ans = (ans - part*temp % mod + mod) % mod\r\n    i = j+1\r\nprint(ans)', 0, 0, '[{\"input\":\"1\",\"output\":\"0\"},{\"input\":\"5\",\"output\":\"4\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 08:24:33', '123615944728158208', '2025-06-16 10:13:05', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292017928610807808, '股价分析', '小张是一家基金公司的数据分析师，他工作的主要任务是对股票市场的趋势进行预测以及为基金管理提供数据支持。最近小张发现一个有趣的现象，一些股票的价格波动过于剧烈，导致一些基金管理的决策过于激进，进而降低收益率。为了解决这个问题，小张决定对股票的价格波动进行分析。\n\n经过分析，小张将股票价格数据抽象为一个长度为 n 的数组 nums，并提出了一个有趣的方法来平滑股票价格曲线。具体来说，他认为一个长度为 k 的下标区间 [l,r] 是“平滑区间”，当且仅当 l≤i₁≤1≤i₂≤r 且min(nums[i₁ …i₂])×2>max(nums[i₁…i₂])时成立。也就是说，如果一个区间是“平滑区间”，则这个区间内的股票价格波动程度相对较小。\n\n现在，小张需要你的帮助，编写一段代码，给出 nums 的最长“平滑区间”的长度，以辅助他进一步对股票数据进行分析。\n\n输入格式\n第一行输入正整数 n。\n\n第2行到第 n+1 行每行输入 1 个正整数，表示数组 nums。\n\n输出格式\n输出一个整数，表示 nums 的最长“平滑区间”的长度。\n\n样例输入\n7\n4 2 3 5 1 6 7\n\n样例输出\n2\n\n评测数据规模\n\n对于所有评测数据，\n2≤n≤10000， 1≤nums[i]≤10^8。', '[\"二分\"]', 1, 'c', '#include <iostream>\r\nusing namespace std;\r\nconst int N=1e5+10;\r\nint nums[N]={0};\r\nint n;\r\nint max2(int a,int b)\r\n{\r\n  if(a<b) return b;\r\n  else return a;\r\n}\r\nint min2(int a,int b)\r\n{\r\n  if(a>b) return b;\r\n  else return a;\r\n}\r\nint f(int ma)\r\n{\r\n  long long q,p;\r\n  for(q=1,p=ma;p<=n;q++,p++)\r\n  {\r\n    long long max1=nums[q],min1=nums[q];\r\n     for(int k=q;k<=p;k++){\r\n        min1=min2(nums[k],min1);\r\n        max1=max2(nums[k],max1);\r\n        }\r\n     \r\n     if(2*min1>max1) return 1;\r\n  }\r\n  return 0;\r\n}\r\nint main()\r\n{\r\ncin>>n;\r\nfor(int i=1;i<=n;i++)\r\n{\r\n  cin>>nums[i];\r\n  cout<<endl;\r\n}\r\nlong long r=0,l=n+1,m=0,ans=0;\r\nwhile(r<=l)\r\n{\r\n m= (l+r+1)>>1;\r\n  if(f(m)) {\r\n    r=m+1;ans=m;\r\n  }\r\n  else l=m-1;\r\n}\r\ncout<<ans;\r\n  // 请在此输入您的代码\r\n  return 0;\r\n}', 0, 0, '[{\"input\":\"7\\n4 2 3 5 1 6 7\",\"output\":\"2\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 08:36:00', '123615944728158208', '2025-06-16 10:12:46', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292017999387295744, '最大距离', '在数列 a1,a2,⋯,an中，定义两个元素 ai和 aj的距离为∣i−j∣+∣ai−aj∣，即元素下标的距离加上元素值的差的绝对值，其中 ∣x∣表示 x 的绝对值。\n给定一个数列，请问找出元素之间最大的元素距离。\n输入描述\n输入的第一行包含一个整数 n。\n第二行包含 n个整数 a1,a2,⋯,an相邻的整数间用空格分隔，表示给定的数列。\n其中，2≤n≤1000，0≤数列中的数≤10^4 2≤n≤1000，0≤数列中的数≤10^4。\n输出描述\n输出一行包含一个整数，表示答案。\n输入输出样例\n示例\n输入\n5\n9 4 2 4 7\n\n输出\n9\n', '[\"模拟\",\"省模拟赛\"]', 1, 'c', '#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n  int i,j,n1,n[1000],sum=0,max=-1;\r\n  scanf(\"%d\",&n1);\r\n  for(i=0;i<n1;i++)\r\n  {\r\n    scanf(\"%d\",&n[i]);\r\n  }\r\n  for(i=0;i<n1-1;i++)\r\n  {\r\n    for(j=i+1;j<n1;j++)\r\n    {\r\n      sum=abs(i-j)+abs(n[i]-n[j]);\r\n      if(sum>max)max=sum;\r\n    }\r\n  }\r\n  printf(\"%d\",max);\r\n  return 0;\r\n}', 0, 0, '[{\"input\":\"5\\n9 4 2 4 7\",\"output\":\"9\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-16 08:36:17', '123615944728158208', '2025-06-16 08:36:26', NULL, 0);
INSERT INTO `oj_problem` VALUES (292019339411095552, '区间更新', '给定一个长度为 n 的数组 a[1],a[2],...,a[n]。 同时给定 m 个操作，每个操作有三个整形数据 x,y,z。 每个操作的意义就是给数组中下标为 x 与下标为 y 之间（包括 x,y）的元素的值加上 z。\n\n输入格式\n输入有多组数据，数据组数不大于 5。 每一组数据第一行有两个整数 n,m(0<n,m<10^5) 。 第二行有 n 个整数，分别代表 a[1],a[2],...,a[n](0≤a[i]<10) 的初始值。 接下来就 m 行，每一行有 3 个整数x,y,z(0<x≤y≤n,0<z<10)。\n\n输出格式\n在一行内输出这个序列的所有元素的值，并且每个值之间应该以空格隔开。\n\n输入样例\n10 5\n0 0 0 0 0 0 0 0 0 0\n1 5 1\n2 6 1\n3 7 1\n4 9 1\n5 10 1\n1 1\n1\n1 1 2\n\n输出样例\n1 2 3 4 5 4 3 2 2 1\n3', '[\"差分\",\"枚举\",\"数学\"]', 1, 'c', '#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=1e5+3;\r\nint a[N],diff[N];\r\nint main(void){\r\nios::sync_with_stdio(false),cin.tie(0),cout.tie(0);\r\nint n,m,x,y,z;\r\nwhile(cin>>n>>m)\r\n{for(int i=1;i<=n;i++)\r\n{cin>>a[i];diff[i]=a[i]-a[i-1];}\r\nfor(int i=1;i<=m;i++)\r\n{cin>>x>>y>>z;\r\ndiff[x]+=z;\r\ndiff[y+1]-=z;}\r\nfor(int i=1;i<=n;i++)a[i]=a[i-1]+diff[i];\r\nfor(int i=1;i<=n;i++)cout<<a[i]<<\" \";cout<<\'\\n\';\r\n}\r\n  return 0;\r\n}', 0, 0, '[{\"input\":\"10 5\\n0 0 0 0 0 0 0 0 0 0\\n1 5 1\\n2 6 1\\n3 7 1\\n4 9 1\\n5 10 1\\n1 1\\n1\\n1 1 2\",\"output\":\"1 2 3 4 5 4 3 2 2 1\\n3\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 08:41:36', '123615944728158208', '2025-06-16 10:11:56', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292020197676548096, '拳头对决【算法赛】', '蓝桥训练营的日子总是紧张而充实。某天清晨，队员们在连续的高强度训练后，个个眉头紧锁，烦躁在空气中弥漫，甚至有人开始攥紧拳头，想要找个出口释放压力。蓝教练和红教练察觉到这股暗流，交换了一个眼神，灵光一闪：何不来一场“拳头对决赛”？既能让大家舒展筋骨，又能在笑声中拉近彼此的距离。\n拳头的大小，成了这场友谊赛的焦点——谁的拳头大，谁就更有气势！两位教练各挑了 NN 名队员，蓝队的第 i个队员的拳头大小为 Ai，红队的第 i个队员的拳头大小为 Bi。\n比赛的流程是这样的：红教练会按照顺序依次派出他的队员（先派第一位，然后第二位，以此类推）。每当红教练派出一名队员展示拳头后，蓝教练需要从他尚未上场的队员中选择一位应战。裁判会将蓝教练派出的队员的拳头大小与红教练所有已上场队员的拳头大小逐一比较。每当蓝队员的拳头大小大于红队某位已上场队员的拳头，蓝教练便能赢得一次胜利（注意，这不是一对一的较量，而是以一敌多的挑战）。\n这场比赛不为胜负，只为放松与切磋，可蓝教练心里却藏着小算盘：既要让队员们开心，也想借机秀一把带队本事，在蓝桥杯的训练营里留下点名声。现在，请你助蓝教练一臂之力，算出在最优策略下，他最多能拿下多少次胜利？\n输入格式\n第一行包含一个整数 N（1≤N≤10^5），表示队员数量。\n第二行包含 N个整数 A1,A2,…,AN（1≤Ai≤10^9），分别是蓝教练队员的拳头大小。\n第三行包含 N个整数 B1,B2,…,BN（1≤Bi≤10^9），分别是红教练队员的拳头大小。\n输出格式\n输出一个整数，表示蓝教练在最多能赢下的胜利次数。\n样例输入\n3\n1 3 2\n2 1 3\n\n样例输出\n3\n\n', '[\"树状数组\",\"排序\",\"二分\"]', 1, 'java', '#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int N = 1e5 + 10;\r\nint a[N],b[N];\r\nll ans;\r\nint main()\r\n{\r\n  int n;\r\n  cin >> n;\r\n  for(int i = 1;i <= n;i++)\r\n  cin >> a[i];\r\n  for(int i = 1;i <= n;i++)\r\n  cin >> b[i];\r\n  sort(a+1,a+1+n);\r\n  for(int i = 1;i <= n;i++)\r\n  {\r\n    int k = upper_bound(a+i,a+1+n,b[i]) - a - 1; // 数组a从一开始的，所以应该减去(a+1)\r\n    ans += n - k;\r\n  }\r\n  cout << ans;\r\n  return 0;\r\n}', 0, 0, '[{\"input\":\"3\\n1 3 2\\n2 1 3\",\"output\":\"3\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-16 08:45:01', '123615944728158208', '2025-06-16 08:45:10', NULL, 0);
INSERT INTO `oj_problem` VALUES (292021609315696640, 'Excel地址', 'Excel 单元格的地址表示很有趣，它使用字母来表示列号。\n比如，\nA 表示第 1 列，\nB 表示第 2 列，\nZ 表示第 26 列，\nAA 表示第 27 列，\nAB 表示第 28 列，\nBA 表示第 53 列，\n⋯⋯\n当然 Excel 的最大列号是有限度的，所以转换起来不难。\n如果我们想把这种表示法一般化，可以把很大的数字转换为很长的字母序列呢？\n本题目即是要求对输入的数字, 输出其对应的 Excel 地址表示方式。\n输入描述\n输入一个整数 n，其范围 [1,2147483647]。\n输出描述\n输出 n对应的 Excel 地址表示方式。\n输入输出样例\n示例\n输入\n26\n\n输出\nZ\n', '[\"2017\",\"省赛\"]', 2, 'java', '#include <iostream>\r\nusing namespace std;\r\nint a[1000100];\r\nint main()\r\n{\r\n  // 请在此输入您的代码    模拟26进制，从0-25\r\n  long int x;\r\n  scanf(\"%ld\",&x);\r\n  if(x==0)printf(\"A\");\r\n  int i=0;\r\n  while(x)\r\n  {\r\n    x--;  //***最重要的一行***// 1对应的是A，相当于模拟中的0，所以要减一\r\n    a[i]=x%26;  //得到对应26进制的数\r\n    i++;\r\n    x/=26;\r\n  }\r\n  for(int j=i-1;j>=0;j--)\r\n    printf(\"%c\",a[j]+\'A\');  //再将26进制数转换为对应字符\r\n  return 0;\r\n}', 0, 0, '[{\"input\":\"26\",\"output\":\"Z\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, '2025-06-16 08:50:37', '123615944728158208', '2025-06-16 08:50:47', NULL, 0);
INSERT INTO `oj_problem` VALUES (292021874779783168, '精灵宝可梦', '小智是一个年轻的宝可梦训练师，他来到一个由 \nn\nn 个公寓组成的大楼，这些公寓从左到右排列。每个公寓都可以从街上进入，也可以从里面出去。每个公寓都与左边的公寓和右边的公寓相连。公寓 1 只与公寓 2 相连，公寓 n 只与公寓 n−1 相连。\n\n每个公寓里都有一只不同种类的宝可梦。小智想进入这些公寓抓一些宝可梦。征得居民的同意之后，他可以从街上进入某个公寓，依次进入若干个相邻的公寓，最后从其中一个公寓出去。但是他不能多次进入同一个公寓。\n\n小智非常高兴，他想知道最少需要进入多少个公寓，才能抓到这栋大楼中所有种类的宝可梦。请你帮他计算这个最小值。\n\n输入格式\n第一行一个整数 n，表示大楼中公寓的数量。\n\n第二行包含 n 个字符，每个字符为英文字母（区分大小写），表示对应公寓中的宝可梦种类。\n\n输出格式\n输出一个整数，表示小智最少需要进入的公寓数量。\n\n样例输入\n6\nabacbc\n\n样例输出\n4\n\n样例说明\n小智可以从第 1 个公寓进入，然后依次进入第 2、3、4 个公寓，最后从第 4 个公寓出去。在这个过程中，他可以抓到所有种类的宝可梦，所以最少只需要进入 4 个公寓。\n\n评测数据规模\n对于 100% 的评测数据，1≤n≤10^5。', '[\"字符串\",\"双指针\"]', 1, 'python', 'import os\r\nimport sys\r\n\r\n# 请在此输入您的代码\r\nn = int(input())\r\ns = input()\r\nm = len(set(s))  # 宝可梦种类数\r\nleft, right = 0, 0\r\nwindow = {}\r\nmin_length = n + 1\r\nwhile right < n:\r\n    if s[right] not in window:\r\n        window[s[right]] = 0\r\n    window[s[right]] += 1\r\n    while len(window) == m:\r\n        min_length = min(min_length, right - left + 1)\r\n        window[s[left]] -= 1\r\n        if window[s[left]] == 0:\r\n            del window[s[left]]\r\n        left += 1\r\n    right += 1\r\nprint(min_length)', 0, 0, '[{\"input\":\"6\\nabacbc\",\"output\":\"4\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 08:51:40', '123615944728158208', '2025-06-16 10:13:23', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292024232538275840, '发现环', '小明的实验室有 NN 台电脑，编号 1⋯N。原本这 NN 台电脑之间有 N−1 条数据链接相连，恰好构成一个树形网络。在树形网络上，任意两台电脑之间有唯一的路径相连。\n不过在最近一次维护网络时，管理员误操作使得某两台电脑之间增加了一条数据链接，于是网络中出现了环路。环路上的电脑由于两两之间不再是只有一条路径，使得这些电脑上的数据传输出现了 BUG。\n为了恢复正常传输。小明需要找到所有在环路上的电脑，你能帮助他吗？\n输入描述\n输入范围：\n第一行包含一个整数 NN 。\n以下 N行每行两个整数 a,b，表示 aa 和 bb 之间有一条数据链接相连。\n其中， 1≤N≤10^5，1≤a,b≤N。\n输入保证合法。\n输出描述\n按从小到大的顺序输出在环路上的电脑的编号，中间由一个空格分隔。\n输入输出样例\n示例\n输入\n5\n1 2\n3 1\n2 4\n2 5\n5 3\n\n输出\n1 2 3 5\n\n', '[\"拓扑排序\",\"拓扑排序\",\"DFS\"]', 2, 'c', '#include <bits/stdc++.h>\r\nusing namespace std;\r\nint nums[100005],n,num1,num2;\r\nmap<int,list<int>> my;\r\nvector<int> ans;\r\n\r\nvoid del(int a){\r\n    auto it=my[a].begin();\r\n    nums[*it]--;\r\n    my.erase(a);\r\n    my[*it].remove(a);\r\n    if(nums[*it]==1) del(*it);\r\n}\r\n\r\nint main()\r\n{\r\n  cin>>n;\r\n  for(int i=1;i<=n;i++){\r\n    cin>>num1>>num2;\r\n    nums[num1]++;\r\n    nums[num2]++;\r\n    my[num1].push_back(num2);\r\n    my[num2].push_back(num1);\r\n  }\r\n\r\n    for(int i=1;i<=n;i++){\r\n      if(nums[i]==1) del(i);\r\n    }\r\n    \r\n  for(auto it:my) cout<<it.first<<\" \"; \r\n \r\n  return 0;\r\n}', 0, 0, '[{\"input\":\"5\\n1 2\\n3 1\\n2 4\\n2 5\\n5 3\",\"output\":\"1 2 3 5\"}]', '{\"timeLimit\":1,\"memoryLimit\":256,\"stackLimit\":256}', 0, 0, '2025-06-16 09:01:03', '123615944728158208', '2025-06-16 09:01:12', NULL, 0);
INSERT INTO `oj_problem` VALUES (292025635587489792, '最大比例', 'X 星球的某个大奖赛设了 M 级奖励。每个级别的奖金是一个正整数。\n并且，相邻的两个级别间的比例是个固定值。\n也就是说：所有级别的奖金数构成了一个等比数列。比如：16,24,36,54，其等比值为：3/2\n现在，我们随机调查了一些获奖者的奖金数。\n请你据此推算可能的最大的等比值。\n输入描述\n第一行为数字 N(0<N<100)，表示接下的一行包含 N个正整数\n第二行 N个正整数 Xi(Xi<10^9)，用空格分开。每个整数表示调查到的某人的奖金数额\n输出描述\n一个形如 A/B的分数，要求 A、B互质。表示可能的最大比例系数 测试数据保证了输入格式正确，并且最大比例是存在的。\n输入输出样例\n示例\n输入\n3\n1250 200 32\n\n输出\n25/4\n', '[\"贪心\",\"省赛\"]', 2, 'c', '#include<bits/stdc++.h>\r\nusing ll = long long;\r\nusing namespace std;\r\nint gcd(int a, int b) {\r\n  int ans=0;\r\n    for (int i = 1; i <= min(a, b); i++) {\r\n        if (a % i == 0 && b % i == 0)ans = i;\r\n    }\r\n    return ans;\r\n}\r\nint main()\r\n{\r\n    int N;\r\n    ll arr[1100] = { 0 };\r\n    cin >> N;\r\n    set<ll>s;\r\n    for (int i = 1; i <= N; i++) {\r\n        cin >> arr[i];\r\n        s.insert(arr[i]);\r\n    }\r\n    double qmin = 100000;\r\n    int ii = 0;\r\n    int index = 0;\r\n    for (auto it = s.begin(); it != s.end(); it++) {\r\n        arr[ii++] = *it;\r\n    }\r\n    for (int i = 0; i < s.size() - 1; i++) {\r\n        if (double(arr[i + 1] / arr[i]) < qmin) {\r\n            index = i;\r\n            qmin = double(arr[i + 1] / arr[i]);\r\n        }\r\n    }\r\n    ll g = gcd(arr[index + 1], arr[index]);\r\n    arr[index + 1] /= g;\r\n    arr[index] /= g;\r\n    cout << arr[index+1]<<\'/\'<<arr[index]<< endl;\r\n    return 0;\r\n}', 0, 0, '[{\"input\":\"3\\n1250 200 32\",\"output\":\"25/4\"}]', '{\"timeLimit\":3,\"memoryLimit\":256,\"stackLimit\":256}', 0, 0, '2025-06-16 09:06:37', '123615944728158208', '2025-06-16 09:06:47', NULL, 0);
INSERT INTO `oj_problem` VALUES (292028282549829632, '拼数', '给定 n个正整数 a1,a2,…,an你可以将它们任意排序。\n现要将这 n个数字连接成一排，即令相邻数字收尾相接，组成一个数。\n问，这个数最大可以是多少。\n输入格式\n第一行输入一个正整数 n（1≤n≤20）。\n第二行输入 n个正整数 a1,a2,…,an（1≤ai≤10^5）。\n输出格式\n输出一个整数，表示答案。\n样例输入\n3\n13 312 343\n\n样例输出\n34331213\n', '[\"字符串\",\"排序\",\"NOIP\"]', 0, 'java', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define MAX_ARR_SIZE 100\r\n\r\nint compare(const void *a, const void *b)\r\n{\r\n    char a_b[MAX_ARR_SIZE],b_a[MAX_ARR_SIZE];\r\n    sprintf(a_b, \"%s%s\", (char *)a, (char *)b);\r\n    sprintf(b_a, \"%s%s\", (char *)b, (char *)a);\r\n\r\n    return strcmp(b_a, a_b);\r\n}\r\n\r\nint main()\r\n{\r\n  int n;\r\n    scanf(\"%d\", &n);\r\n    char a[n][MAX_ARR_SIZE];\r\n    for (int i = 0; i < n; i++)\r\n        scanf(\"%s\", a[i]);\r\n\r\n    qsort(a, n, sizeof(a[0]), compare);\r\n\r\n    for (int i = 0; i < n; i++)\r\n        printf(\"%s\", a[i]);\r\n\r\n    return 0;\r\n}', 0, 0, '[{\"input\":\"3\\n13 312 343\",\"output\":\"34331213\"}]', '{\"timeLimit\":1,\"memoryLimit\":256,\"stackLimit\":256}', 0, 0, '2025-06-16 09:17:08', '123615944728158208', '2025-06-16 09:17:18', NULL, 0);
INSERT INTO `oj_problem` VALUES (292028833360805888, '卡牌游戏', '小蓝和小红一起玩卡牌游戏。\n\n游戏规则如下：有 n 组卡牌，第 i 组的数量为 a[i]，玩家可从任意一堆拿出至少一张卡牌（可以将一堆全部拿走），拿到最后一张卡牌的玩家获胜。\n\n在游戏开始之前需要通过掷骰子来决定谁是先手（点数大的为先手，若点数相同，则小蓝先手），先手可以选定一侧，之后只能在选定的那一侧（最左边或最右边）拿卡牌，而不能从中间或者另一侧拿牌，后手则从另一侧开始，直到拿完为止。\n\n双方都想获胜，每次都是小蓝先掷骰子。请你预测谁能取得胜利。\n\n输入格式\n\n输入共三行。\n\n第一行包含一个数 n，表示卡牌组数 。\n\n第二行包含 n 个大于 0 的整数 a[i]，表示第 i 组的卡牌数量。\n\n第三行包含两个数字分别是小蓝和小红投掷的点数。\n\n输出格式\n\n输出仅一行，若小蓝获胜，则输出“YES”,反之输出“NO”。\n\n样例输入\n3\n11 12 13\n5 1\n\n样例输出\nYES\n\n评测数据规模\n对于100 的评测数据，1<=n<=10000,1<=a[i]<=10000', '[\"博弈\"]', 1, 'c', '#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nbool win_game(int n, vector<int>& cards, int a, int b) {\r\n    vector<int> dp(n);\r\n    \r\n    for (int i = 0; i < n; ++i) {\r\n        dp[i] = cards[i];\r\n    }\r\n    for (int len = 2; len <= n; ++len) {\r\n        vector<int> temp_dp = dp;  \r\n        \r\n        for (int i = 0; i <= n - len; ++i) {\r\n            int j = i + len - 1;\r\n            dp[i] = max(\r\n                cards[i] - temp_dp[i + 1], \r\n                cards[j] - temp_dp[i]        \r\n            );\r\n        }\r\n    }\r\n    \r\n    return dp[0] >= (a - b);\r\n}\r\n\r\nint main() {\r\n    int n;\r\n    cin >> n;\r\n    \r\n    vector<int> cards(n);\r\n    for (int i = 0; i < n; ++i) {\r\n        cin >> cards[i];\r\n    }\r\n    \r\n    int a, b;\r\n    cin >> a >> b;\r\n    \r\n    cout << (win_game(n, cards, a, b) ? \"YES\" : \"NO\") << endl;\r\n    return 0;\r\n}', 0, 0, '[{\"input\":\"3\\n11 12 13\\n5 1\",\"output\":\"YES\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 09:19:20', '123615944728158208', '2025-06-16 09:24:42', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292030094107475968, '团建【UUST】', '蓝桥小分队在带队老师的组织下开展了一次线下唱歌团建。\n带队老师为了检验一下同学们的算法能力，准备考一考他们：\n现在已知歌房的点歌系统里面一共有 N首不同的歌曲，共有 k名队员，这 k个人的编号分别为 1,2,3,...,k。\n每人按照编号从小到大的顺序开始轮流唱歌，要求：\n  这 k个新生每人至少要唱一首歌曲；\n  每首歌曲最多被唱一次；\n  第 k 个人唱完结束，第 1 个人接着高歌，再依次轮流下去，直到这 N首歌曲全部被唱完，活动结束；\n∙∙ 两种选歌方案被认为不同表现为：存在某一名同学在同一轮次演唱了不同的歌曲。\n问：如果要同时满足上述 4 个要求，一共有多少种选歌方案？由于答案可能很大，因此需要对答案进行 10^9+7 取模。\n输入格式\n输入第 1 行包含两个正整数 N和 k，表示歌曲的总数和同学们的人数。\n输出格式\n输出仅一行，包含一个整数，表示答案（需要对答案进行 109+7 取模）。\n样例输入1\n2 2\n\n样例输出1\n2\n\n样例输入2\n156 23\n\n样例输出2\n27830567\n\n说明/提示\n对于所有评测数据，1≤N,k≤1051≤N,k≤105。\n在样例 11 中，根据题目要求，可以进行如下选歌方案：\n方案 11：编号为 11 的同学选唱编号为 11 的歌曲，编号为 22 的同学选唱编号为 22 的歌曲；\n方案 22：编号为 11 的同学选唱编号为 22 的歌曲，编号为 22 的同学选唱编号为 11 的歌曲。\n所以不同方案数 =2=2。\n\n', '[\"组合数\",\"乘法原理\"]', 0, 'c', '#include <iostream>\r\nusing namespace std;\r\nconst int mod=1e9+7;\r\nint main()\r\n{\r\n  int n,k;\r\n  long long ans=1;\r\n  cin>>n>>k;\r\n  if(k>n)\r\n  cout<<0;\r\n  else{\r\n  for(int i=1;i<=n;i++)\r\n  {\r\n    ans=ans*i%mod;\r\n  }\r\n  cout<<ans;\r\n  }\r\n  // 请在此输入您的代码\r\n  return 0;\r\n}', 0, 0, '[{\"input\":\"2 2\",\"output\":\"2\"},{\"input\":\"156 23\",\"output\":\"27830567\"}]', '{\"timeLimit\":1,\"memoryLimit\":256,\"stackLimit\":256}', 0, 0, '2025-06-16 09:24:20', '123615944728158208', '2025-06-16 09:24:30', NULL, 0);
INSERT INTO `oj_problem` VALUES (292032077371539456, '小青蛙的故事【UUST】', '小青蛙爱唱歌，呱呱呱，呱呱呱，唱的荷花快快长，唱的西瓜快快长。\n荷花开了当舞台，西瓜长大做房子！\n但是，小青蛙觉得每天都在池塘边唱歌好无聊，就想像妈妈一样出去工作。\n有一天，小青蛙独自出门学习邻居青蛙叔叔们捉害虫，但是由于缺少锻炼，一天下来累坏咱们小青蛙了。\n小青蛙还是想快快长大，这样就能帮助妈妈分担辛苦了。\n于是，他找到青蛙叔叔，想让他们帮助自己锻炼体力，青蛙叔叔告诉了小青蛙一个锻炼体力的小窍门：来回跳跃！\n跳跃锻炼规则如下：\n每轮可以跳跃 N次，每次跳跃 li 距离，可以向前跳，也可以向后跳，这样每天多锻炼几轮，就能增强体力啦!\n为了增强锻炼的趣味性，青蛙叔叔给小青蛙设定了这 N次跳跃的距离 (l1,l2,...,lN)，想让小青蛙跳跃 N次后回到原地。\n青蛙叔叔要求小青蛙这 N次跳跃都必须按照给定的顺序完成，不能少跳一次！\n但是憨憨的小青蛙不知道自己能否完成跳回原地的锻炼任务，于是他找到聪明的你来帮助他：\n如果小青蛙可以经过这 N 次跳跃回到原地，输出 YES；反之，输出 NO。\n输入格式\n输入第 1行包含一个正整数 N，表示跳跃的次数。\n输入第 2行包含 N个正整数 li，表示小青蛙每次跳跃的距离。\n输出格式\n输出仅一行，如果能跳跃回到原地，输出 YES；反之，输出 NO。\n样例输入1\n3\n1 2 3\n\n样例输出1\nYES\n\n说明/提示\n对于所有评测数据，2≤N≤20，1≤li≤10^4。\n样例中，小青蛙可以先分别向前跳 1和 2的距离，然后向后跳 3的距离回到原地，因此，输出 YES。\n\n小青蛙爱唱歌，呱呱呱，呱呱呱，唱的荷花快快长，唱的西瓜快快长。\n荷花开了当舞台，西瓜长大做房子！\n但是，小青蛙觉得每天都在池塘边唱歌好无聊，就想像妈妈一样出去工作。\n有一天，小青蛙独自出门学习邻居青蛙叔叔们捉害虫，但是由于缺少锻炼，一天下来累坏咱们小青蛙了。\n小青蛙还是想快快长大，这样就能帮助妈妈分担辛苦了。\n于是，他找到青蛙叔叔，想让他们帮助自己锻炼体力，青蛙叔叔告诉了小青蛙一个锻炼体力的小窍门：来回跳跃！\n跳跃锻炼规则如下：\n每轮可以跳跃 N次，每次跳跃 lili 距离，可以向前跳，也可以向后跳，这样每天多锻炼几轮，就能增强体力啦!\n为了增强锻炼的趣味性，青蛙叔叔给小青蛙设定了这 N次跳跃的距离 (l1,l2,...,lN)，想让小青蛙跳跃 N次后回到原地。\n青蛙叔叔要求小青蛙这 N次跳跃都必须按照给定的顺序完成，不能少跳一次！\n但是憨憨的小青蛙不知道自己能否完成跳回原地的锻炼任务，于是他找到聪明的你来帮助他：\n如果小青蛙可以经过这 N 次跳跃回到原地，输出 YES；反之，输出 NO。\n输入格式\n输入第 1行包含一个正整数 N，表示跳跃的次数。\n输入第 2行包含 N个正整数 li，表示小青蛙每次跳跃的距离。\n输出格式\n输出仅一行，如果能跳跃回到原地，输出 YES；反之，输出 NO。\n样例输入1\n3\n1 2 3\n\n样例输出1\nYES\n\n说明/提示\n对于所有评测数据，2≤N≤20，1≤li≤10^4。\n样例中，小青蛙可以先分别向前跳 1和 2的距离，然后向后跳 3的距离回到原地，因此，输出 YES。\n\n', '[\"深度优先搜索(dfs)\"]', 0, 'c', '#include <iostream>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nbool dfs(int index, int current_position, const vector<int>& jumps, int N) {\r\n    if (index == N) {\r\n        //如果我们已经完成了所有跳跃，请检查我们是否回到了原点\r\n        return current_position == 0;\r\n    }\r\n    \r\n    //探索两种选择：向前跳和向后跳\r\n    return dfs(index + 1, current_position + jumps[index], jumps, N) ||\r\n           dfs(index + 1, current_position - jumps[index], jumps, N);\r\n}\r\n\r\nint main() {\r\n    int N;\r\n    cin >> N;\r\n    \r\n    vector<int> jumps(N);\r\n    for (int i = 0; i < N; ++i) {\r\n        cin >> jumps[i];\r\n    }\r\n    \r\n    \r\n    if (dfs(0, 0, jumps, N)) {\r\n        cout << \"YES\" << endl;\r\n    } else {\r\n        cout << \"NO\" << endl;\r\n    }\r\n    \r\n    return 0;\r\n}', 0, 0, '[{\"input\":\"3\\n1 2 3\",\"output\":\"YES\"}]', '{\"timeLimit\":1,\"memoryLimit\":256,\"stackLimit\":256}', 0, 0, '2025-06-16 09:32:13', '123615944728158208', '2025-06-16 09:32:23', NULL, 0);
INSERT INTO `oj_problem` VALUES (292032960274923520, '无尽的石头', '在一个古老的迷宫中，有一道无尽的通道。通道上每隔一定的距离就会有一块神秘的石头，石头上刻着从 1 开始的连续整数。从 1 号石头开始，每块石头的编号都比前一块大 1。\n\n石头上的数字有特殊的意义。如果你站在编号为 n 的石头上，并向前走，你将会瞬间移动到编号为 n+x 的石头上，其中 x 为 n 的各位数字之和。\n\n例如，如果你站在编号为 16 的石头上，由于 1+6=7，所以下一步你会移动到编号为 16+7=23 的石头上。\n\n现在，会有多次询问，你需要对每个询问输出从 1 号石头出发，到达指定编号石头的最少步数，如果无法到达，则输出−1。\n\n输入格式\n输入包含一个整数 (1≤t≤100)，表示有 t 个询问。\n\n接下来 t 行，每行一个整数 (1≤n≤10^6)，表示目标石头的编号。\n\n输出格式\n\n对于每个询问，输出一行，表示从 1 号石头到达目标石头的最少步数。如果无法到达，输出 −1。\n\n输入样例\n4\n8\n15\n23\n1000000\n\n输出样例\n3\n-1\n5\n-1', '[\"模拟\",\"思维\"]', 1, 'java', 'import java.util.Scanner;\r\n// 1:无需package\r\n// 2: 类名必须Main, 不可修改\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        //在此输入您的代码...\r\n        int t = scan.nextInt();//t表示有t个询问\r\n        for(int i = 0;i < t;i++){\r\n            int a = scan.nextInt();//输入第几块石头\r\n            int count = 0;//统计到达指定石头的最少步数,每次统计完步数后让count清0\r\n            int start = 1;//初始从1号石头出发\r\n            while(start < a){\r\n                String str = String.valueOf(start);//将int型转为String类型，用于统计数位之和\r\n                int sum = 0;\r\n                for(int j = 0;j < str.length();j++){\r\n                    sum += str.charAt(j);//统计数位之和\r\n                    sum = sum - \'0\';//将sum由字符类型转为int型，加到start上，否则会直接加sum数值对应的ASCII码值\r\n                }\r\n                start += sum;\r\n                count++;\r\n//                System.out.println(sum + \" \" + start + \" \" + count);\r\n            }\r\n            if(start == a) System.out.println(count);\r\n            if(start > a) System.out.println(-1);\r\n        }\r\n        scan.close();\r\n    }\r\n}', 0, 0, '[{\"input\":\"4\\n8\\n15\\n23\\n1000000\",\"output\":\"3\\n-1\\n5\\n-1\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 09:35:43', '123615944728158208', '2025-06-16 10:12:13', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292033810003165184, '月老', '小菌的身份其实是一名月老。七夕这天是他女朋友的生日，所以他要去陪宝贝女朋友过生日，但是他手头还有工作未完成，那么为了他的幸福生活，这个工作就拜托你啦。\n\n小菌手头上有 n 个男生和 m 个女生的空闲时间表，如果两个人的空闲时间有交集，那么他们就可以约会。\n\n现在，请你合理安排他们的约会，使得约会场次数最多。\n\n注意，每个人只能参与一次约会，男生只能和女生约会，女生只能和男生约会。\n\n若一位男生空闲时间为 [a,b]，一位女生空闲时间为[b,c]，我们认为两个人的空闲时间是有交集的。\n\n输入格式\n第一行包含两个整数 n 和 m，表示男生和女生的数量。\n\n接下来 n 行，每行包含两个整数 s 和 e，表示一个男生的空闲时间是从 s 到 e。\n\n再接下来 m 行，每行包含两个整数 s 和 e，表示一个女生的空闲时间是从 s 到 e。\n\n输出格式\n输出一个整数，表示可以安排的最多的约会数量。\n\n样例输入1\n3 3\n1 5\n6 10\n11 15\n2 7\n8 12\n4 9\n\n输出样例1\n3\n\n说明1\n每个男生都可以找到至少一个和他空闲时间有交集的女生进行约会，所以最多可以安排 3 个约会。\n\n样例输入2\n3 2\n1 5\n6 10\n11 15\n2 7\n8 12\n\n输出样例2\n2\n\n说明2\n虽然每个男生都可以找到至少一个和他空闲时间有交集的女生进行约会，但是因为女生的数量只有 2，所以最多只能安排2 个约会。\n\n数据范围\n对于 100% 的测试样例，1≤n,m≤10³1≤s,e<10^9。', '[\"二分图\",\"匈牙利算法\"]', 1, 'c', '#include<iostream>\r\n#include<queue>\r\n#include<map>\r\n#include<set>\r\n#include<cmath>\r\n#include<cstring>\r\n#include<algorithm>\r\n#include<iomanip>\r\n#include<stack>\r\n#include <numeric>\r\n#include<ctime>\r\n#include<string>\r\n#include<unordered_map>\r\n\r\nusing namespace std;\r\nusing ll=long long;\r\n\r\nusing ll = long long;\r\n\r\nconst ll N = 1e4 + 5, mod=1e9+7,inf=1e9;\r\n\r\nint n,m;\r\nvector<int>g[N];\r\nbool vis[N];\r\nint match[N];//匈牙利算法代表i所配对的点\r\n\r\npair<int,int>man[N],wom[N];\r\n\r\nbool dfs(int u){\r\n    for(auto v:g[u]){\r\n        if(vis[v])continue;//被选过了（让出去）\r\n        vis[v]=true;\r\n\r\n        if(!match[v]||dfs(match[v])){\r\n            match[v]=u;//如果没被选过或者去dfs这个点的配对点，\r\n            //如果能够让出来，就可以配对成功\r\n            return true;\r\n        }\r\n    }\r\n    return false;//配对失败\r\n}\r\n\r\nvoid solve() {\r\n\r\n    cin>>n>>m;\r\n\r\n    for(int i=1;i<=n;i++){\r\n        cin>>man[i].first>>man[i].second;\r\n    }\r\n    for(int i=1;i<=m;i++){\r\n        cin>>wom[i].first>>wom[i].second;\r\n    }\r\n\r\n    for(int i=1;i<=n;i++){\r\n        for(int j=1;j<=m;j++){\r\n            int l=man[i].first,r=man[i].second;\r\n            int L=wom[j].first,R=wom[j].second;\r\n            if(r<L||l>R)continue;\r\n            g[i].push_back(j);\r\n        }\r\n    }\r\n\r\n    ll ans=0;\r\n    //匈牙利算法\r\n    for(int i=1;i<=n;i++){\r\n        memset(vis,false,sizeof(vis));\r\n        if(dfs(i))ans++;\r\n    }\r\n    cout<<ans<<\'\\n\';\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\r\n\r\n    int t = 1;\r\n    //cin >> t;\r\n    \r\n    while (t--) {\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}', 0, 0, '[{\"input\":\"3 3\\n1 5\\n6 10\\n11 15\\n2 7\\n8 12\\n4 9\",\"output\":\"3\"},{\"input\":\"3 2\\n1 5\\n6 10\\n11 15\\n2 7\\n8 12\",\"output\":\"2\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 09:39:06', '123615944728158208', '2025-06-16 10:11:33', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292034800215425024, '意想不到', '众所周知，在扑克牌斗地主游戏中，有的人喜欢趁早将“顺子”打出手，而有的人则喜欢留到最后打出手。今天小蓝打了一天斗地主，他想要对今天的 n 场牌局进行复盘，于是他将每一局手上的 17 或 20 张牌都告知于你，问每局牌局刚开始时，他当时的手牌能打出多少种顺子呢？\n\n我们将大王记作 X，小王记作 Y，点数 10 记作 0，J、Q、K 的含义分别为 11、12、13。 在斗地主游戏中，牌的大小如下：X≥Y≥2≥A≥K≥Q≥J≥0≥9≥8≥7≥6≥5≥4≥3。顺子的定义是至少连续 5 个相邻大小的牌(特殊的，大王 X、小王 Y 和 2 不能参与到顺子的牌中)，例如：34567、890JQ、7890JQKA 是合法的顺子，23456、JQKA2、67890JQKA2YX 是不合法的顺子。\n\n输入格式\n输入共 n+1 行：\n\n第一行为一个正整数 n，表示小蓝今天打的斗地主总局数。\n\n接下来 n 行，每行一个长度为 17 或 20 的字符串。数据保证已经按照牌从高到低的大小顺序排好序。\n\n输出格式\n输出共 n 行，每行一个正整数，第 i 行表示第 i 局能够打出的顺子种类数。\n\n样例输入\n1\nXY2222AAAA0987643\n\n样例输出\n1\n\n说明\nXY2222AAAA0987643 中的顺子只有 98765 一个。\n\n评测数据规模\n对于 30% 的评测数据，1≤n≤5，保证每局斗地主中至多出现 1 个顺子。\n\n对于 100% 的评测数据，1≤n≤10^5。', '[\"字符串\",\"模拟\"]', 0, 'c', '#include<iostream>\r\nusing namespace std;\r\n#include<map>\r\ntypedef long long ll;\r\n#include<algorithm>\r\n\r\nmap<char, int>mp = { {\'3\',1},{\'4\',2},{\'5\',3},{\'6\',4},{\'7\',5},{\'8\',6},{\'9\',7},{\'0\',8},{\'J\',9},{\'Q\',10},{\'K\',11},{\'A\',12},{\'2\',100},{\'X\',200},{\'Y\',300}};\r\nll f[15];\r\n\r\nvoid init()\r\n{\r\n    f[1] = 1;\r\n    for (int i = 1; i < 15; i++)\r\n        f[i] = f[i - 1] + i;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    string s;\r\n    cin >> s;\r\n    reverse(s.begin(), s.end());\r\n    ll ans = 0;\r\n    ll cnt=1;\r\n    for (int i = 1; i < s.size(); i++)\r\n    {\r\n        if (mp[s[i]] == mp[s[i - 1]] + 1)\r\n            cnt++;\r\n        else if (mp[s[i]] == mp[s[i - 1]]);\r\n        else if (mp[s[i]] - mp[s[i - 1]] > 1)\r\n        {\r\n            if (cnt >= 5)\r\n                ans += f[cnt - 5 + 1];\r\n            cnt = 1;\r\n        }\r\n    }\r\n    if (cnt >= 5)\r\n        ans += f[cnt - 5 + 1];\r\n    cout << ans << endl;\r\n}\r\n\r\nint main()\r\n{\r\n    init();\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0), cout.tie(0);\r\n    int t;\r\n    cin >> t;\r\n    while (t--)\r\n        solve();\r\n    return 0;\r\n}', 0, 0, '[{\"input\":\"1\\nXY2222AAAA0987643\",\"output\":\"1\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 09:43:02', '123615944728158208', '2025-06-16 10:11:22', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292035751089307648, '神秘的数字尾数', '小懒最近迷上了研究数字的尾数，他想知道 a^b 后 n 位尾数的大小是多少。\n\n注意尾数大小不包含前导 0。例如 1020022 后三位的尾数大小为 22。请你帮小懒求出后 n 位尾数的大小。\n\n输入格式\n第一行输入三个整数 a,b,n（1≤a,b≤10^9,1≤n≤9），表示 a，b 和 n 的大小。\n\n输出格式\n输出仅一行，包含一个整数，表示 a^b 后 n 位尾数大小。\n\n样例输入\n3 2 5\n\n样例输出\n9\n', '[\"快速幂\"]', 1, 'java', 'import java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        try {\r\n            long a = in.nextLong();\r\n            long b = in.nextLong();\r\n            long n = in.nextLong();\r\n            long result = modularExponentiation(a, b, (long) Math.pow(10, n));\r\n            System.out.println((int) result); // 输出结果\r\n        } catch (Exception e) {\r\n            System.out.println(\"Input error: \" + e.getMessage());\r\n        } finally {\r\n            in.close(); // 关闭 Scanner\r\n        }\r\n    }\r\n    private static long modularExponentiation(long a, long b, long m) {\r\n        long result = 1; // 初始化结果\r\n        a %= m; // 确保底数小于模数\r\n\r\n        while (b > 0) {\r\n            if ((b & 1) == 1) { // 如果当前指数位为1\r\n                result = (result * a) % m;\r\n            }\r\n            a = (a * a) % m; // 平方底数\r\n            b >>= 1; // 右移指数\r\n        }\r\n        return result;\r\n    }\r\n}', 0, 0, '[{\"input\":\"3 2 5\",\"output\":\"9\"}]', '{\"memoryLimit\":1000,\"stackLimit\":1000,\"timeLimit\":1000}', 0, 0, '2025-06-16 09:46:49', '123615944728158208', '2025-06-16 10:11:11', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292040059459207168, '长草', '小明有一块空地，他将这块空地划分为 n行 m列的小块，每行和每列的长度都为 1。\n小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。\n这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，\n这四小块空地都将变为有草的小块。请告诉小明，k个月后空地上哪些地方有草。\n输入描述\n输入的第一行包含两个整数 n,m。\n接下来 n行，每行包含 m个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 g，表示种了草。\n接下来包含一个整数 kk。 其中，2≤n,m≤1000，1≤k≤1000。\n输出描述\n输出 n 行，每行包含 m个字母，表示 k个月后空地的状态。如果为小数点，表示为空地，如果字母为 g，表示长了草。\n输入输出样例\n示例\n输入\n4 5\n.g...\n.....\n..g..\n.....\n2\n\n输出\ngggg.\ngggg.\nggggg\n.ggg.\n\n', '[\"省模拟赛\",\"BFS\",\"模拟\"]', 1, 'c', '#include<stdio.h>\r\nint a[1000][1000],b[1000][1000];\r\nint n,m,k;\r\nvoid dfs()\r\n{\r\n  for(int i=0;i<n;i++)\r\n  {\r\n    for(int j=0;j<m;j++)\r\n    {\r\n      b[i][j]=a[i][j];\r\n    }\r\n  }\r\n  for(int i=0;i<n;i++)\r\n    for(int j=0;j<m;j++)\r\n    {\r\n      if(b[i][j]==1)\r\n      {\r\n        if(i-1>=0)\r\n        a[i-1][j]=1;\r\n        if(i+1<n)\r\n        a[i+1][j]=1;\r\n        if(j-1>=0)\r\n        a[i][j-1]=1;\r\n        if(j+1<m)\r\n        a[i][j+1]=1;\r\n      }\r\n    }\r\n  }\r\nint main()\r\n{\r\n  char c;\r\n  scanf(\"%d %d\",&n,&m);\r\n  for(int i=0;i<n;i++)\r\n  {\r\n    getchar();\r\n  for(int j=0;j<m;j++)\r\n  {\r\n  scanf(\"%c\",&c);\r\n  \r\n  if(c==\'.\') a[i][j]=0;\r\n  if(c==\'g\') a[i][j]=1;\r\n\r\n  }\r\n  \r\n  }\r\n\r\n  scanf(\"%d\",&k);\r\n  for(int i=0;i<k;i++)\r\n  dfs();\r\n  for(int i=0;i<n;i++)   \r\n  {\r\n    for(int j=0;j<m;j++)\r\n    {\r\n      if(a[i][j]==0) printf(\".\");\r\n\r\n      else if(a[i][j]==1) printf(\"g\");\r\n    }\r\n  printf(\"\\n\");\r\n  }\r\n  return 0;\r\n}', 0, 0, '[{\"input\":\"4 5\\n.g...\\n.....\\n..g..\\n.....\\n2\",\"output\":\"gggg.\\ngggg.\\nggggg\\n.ggg.\"}]', '{\"memoryLimit\":256,\"stackLimit\":256,\"timeLimit\":1}', 0, 0, '2025-06-16 10:03:56', '123615944728158208', '2025-06-19 09:36:26', '123615944728158208', 0);
INSERT INTO `oj_problem` VALUES (292041775583854592, '最大公约数', '对于给出的 n个询问，每次求有多少个数对 (x,y)，满足 a≤x≤b，c≤y≤d，且 gcd⁡(x,y)=k、，gcd⁡(x,y)函数为 x和 y 的最大公约数。\n输入描述\n第一行一个整数 n，接下来 n 行每行五个整数，分别表示 a,b,c,d,k。\n其中， 1≤n,k≤5×10^4，1≤a≤b≤5×10^4，1≤c≤d≤5×10^4\n输出描述\n共 n行，每行一个整数表示满足要求的数对 (x,y)的个数。\n输入输出样例\n示例 1\n输入\n2\n2 5 1 5 1\n1 5 1 5 2\n\n输出\n14\n3\n', '[\"莫比乌斯反演\",\"HAOI\"]', 2, 'c', '#include<bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\nconst int N=5e4;\r\nint cnt,p[N+1],ok[N+1],mu[N+1];\r\nvoid init()\r\n{\r\n    mu[1]=1;\r\n    for (int i=2;i<=N;i++)\r\n    {\r\n        if (!ok[i]) p[++cnt]=i,mu[i]=-1;\r\n        for (int j=1;j<=cnt&&i*p[j]<=N;j++)\r\n        {\r\n            ok[i*p[j]]=1;\r\n            if (i%p[j]==0) break;\r\n            mu[i*p[j]]=-mu[i];\r\n        }\r\n    }\r\n    for (int i=2;i<=N;i++) mu[i]+=mu[i-1];\r\n}\r\nint calc(int n,int m)  //传参传n/k,m/k \r\n{\r\n    if (n>m) swap(n,m);\r\n    int res=0;\r\n    for (int l=1,r;l<=n;l=r+1)\r\n    {\r\n        r=min(n/(n/l),m/(m/l));\r\n        res+=(mu[r]-mu[l-1])*(n/l)*(m/l);\r\n    }\r\n    return res;\r\n}\r\nsigned main()\r\n{\r\n    init();\r\n    int n;cin>>n;\r\n    while (n--)\r\n    {\r\n        int a,b,c,d,k;scanf(\"%lld%lld%lld%lld%lld\",&a,&b,&c,&d,&k);\r\n        int res=0;\r\n        res=calc(b/k,d/k)-calc(b/k,(c-1)/k)-calc((a-1)/k,d/k)+calc((a-1)/k,(c-1)/k);\r\n        printf(\"%lld\\n\",res);\r\n    }\r\n}', 0, 0, '[{\"input\":\"2\\n2 5 1 5 1\\n1 5 1 5 2\",\"output\":\"14\\n3\"}]', '{\"timeLimit\":1,\"memoryLimit\":128,\"stackLimit\":128}', 0, 0, '2025-06-16 10:10:45', '123615944728158208', '2025-06-16 10:10:55', NULL, 0);
INSERT INTO `oj_problem` VALUES (292044836700160000, '左移右移', '小蓝有一个长度为 N的数组, 初始时从左到右依次是 1,2,3,…N。\n之后小蓝对这个数组进行了 M 次操作, 每次操作可能是以下 2 种之一:\n左移 x 即把 x移动到最左边。\n右移 x, 即把 x移动到最右边。\n请你回答经过 M 次操作之后, 数组从左到右每个数是多少?\n输入格式\n第一行包含 2 个整数, N 和 M。\n以下 M 行每行一个操作, 其中 “L x \"表示左移 x,\"Rx,\"表示右移 x 。\n输出格式\n输出 NN 个数, 代表操作后的数组。\n样例输入\n5 3\nL 3\nL 2\nR 1\n\n样例输出\n2 3 4 5 1\n\n样例说明\n样例中的数组变化如下:\n[1,2,3,4,5]→[3,1,2,4,5]→[2,3,1,4,5]→[2,3,4,5,1]\n评测用例规模与约定\n对于 50%的评测用例, 1≤N,M≤10000.\n对于 100%的评测用例, 1≤N,M≤200000,1≤x≤N\n\n', '[\"链表\",\"思维\",\"国赛\"]', 1, 'c', '#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\nconst int mod = 1e9 + 7;\r\nconst int INF = 0x7fffffff;\r\n\r\nstruct List{\r\n    int l, r;\r\n}lis[200010];\r\nvoid del(int x) {\r\n    lis[lis[x].l].r = lis[x].r;\r\n    lis[lis[x].r].l = lis[x].l;\r\n}\r\nint main() {\r\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\r\n    int n, m;\r\n    cin >> n >> m;\r\n    lis[0].r = 1;\r\n    for(int i = 1; i <= n; i++) {\r\n        lis[i].l = i - 1;\r\n        lis[i].r = i + 1;\r\n    }\r\n    lis[n + 1].l = n;\r\n    while(m--) {\r\n        char op; int x;\r\n        cin >> op >> x;\r\n        del(x);\r\n        if(op == \'L\') {\r\n            lis[x].r = lis[0].r;\r\n            lis[lis[0].r].l = x;\r\n            lis[x].l = 0;\r\n            lis[0].r = x;\r\n        }else {\r\n            lis[x].l = lis[n + 1].l;\r\n            lis[lis[n + 1].l].r = x;\r\n            lis[x].r = n + 1;\r\n            lis[n + 1].l = x;\r\n        }\r\n    }\r\n    int next = 0;\r\n    for(int i = 1; i <= n; i++) {\r\n        cout << lis[next].r << \" \";\r\n        next = lis[next].r;\r\n    }\r\n    return 0;\r\n}', 0, 0, '[{\"input\":\"5 3\\nL 3\\nL 2\\nR 1\",\"output\":\"2 3 4 5 1\"}]', '{\"timeLimit\":3,\"memoryLimit\":512,\"stackLimit\":512}', 0, 0, '2025-06-16 10:22:55', '123615944728158208', '2025-06-16 10:23:05', NULL, 0);
INSERT INTO `oj_problem` VALUES (292046298830340096, '背包与魔法', '小蓝面前有 N件物品, 其中第 i件重量是 Wi, 价值是 Vi。她还有一个背包, 最大承重是 M。\n小蓝想知道在背包称重范围内, 她最多能装总价值多少的物品?\n特别值得一提的是, 小蓝可以使用一个魔法 (总共使用一次), 将一件物品 的重量增加 K, 同时价值秝倍。(当然小蓝也可以不使用魔法)\n输入格式\n第一行包含 3 个整数 N、M和 K 。\n以下 N 行, 每行两个整数 Wi和 Vi。\n输出格式\n一个整数代表答案。\n样例输入\n3 10 3\n5 10\n4 9\n3 8\n\n样例输出\n26\n\n样例说明\n选择第二件和第三件物品, 同时对第二件物品使用魔法。\n评测用例规模与约定\n对于 30%的数据, 1≤N,M,K≤100\n对于 100%的数据, 1≤N≤2000,1≤M,K≤10000,0≤Wi,Vi≤10000\n\n', '[\"国赛\",\"背包问题\"]', 2, 'java', 'import java.util.*;\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        int n = scan.nextInt();\r\n        int m = scan.nextInt();\r\n        int k = scan.nextInt();\r\n        int[] v = new int[n+1];\r\n        int[] w = new int[n+1];\r\n        int[][] dp = new int[2][m+1];\r\n        \r\n        for (int i = 1; i <= n; i++) {\r\n            w[i] = scan.nextInt();\r\n            v[i] = scan.nextInt();\r\n            \r\n        }\r\n        \r\n        for (int i = 1; i <= n; i++) {\r\n            for (int z = m; z >= w[i]; z--) {\r\n                if(w[i] <=z) {\r\n                    dp[0][z] = Math.max(dp[0][z], dp[0][z-w[i]] + v[i]);\r\n                    dp[1][z] = Math.max(dp[1][z], dp[1][z-w[i]] + v[i]);\r\n                }\r\n                if(w[i]+k<=z) {\r\n                    dp[1][z] = Math.max(dp[1][z], dp[0][z-w[i]-k] + 2*v[i]);\r\n                }\r\n            }\r\n        }\r\n        System.out.println(Math.max(dp[0][m], dp[1][m]));\r\n\r\n    }\r\n\r\n}', 0, 0, '[{\"input\":\"3 10 3\\n5 10\\n4 9\\n3 8\",\"output\":\"26\"}]', '{\"timeLimit\":1,\"memoryLimit\":512,\"stackLimit\":512}', 0, 0, '2025-06-16 10:28:44', '123615944728158208', '2025-06-16 10:28:53', NULL, 0);
INSERT INTO `oj_problem` VALUES (292047491342270464, '好数之和', '一个整数如果包含连续的 2022 四个数字, 我们就称之为 “好数”。\n例如 2022、52022、20223、7020224 都是好数, 而 2202、20022、2222 都不是好数。\n给定 L和 R, 请你计算在 L 到 R 之间（包含 L和 R ) 所有好数的和是多少?\n输入格式\n两个整数 L和 R 。\n输出格式\n一个整数代表答案。\n样例输入\n1 20000\n\n样例输出\n14044\n\n样例说明\n茼足条件的好数有 2022、12022, 它们的和是 14044。\n评测用例规模与约定\n对于 60% 的评测用例， R−L≤10^8\n对于 100% 的评测用例， 1≤L≤R≤10^9\n\n', '[\"国赛\",\"数位DP\"]', 2, 'java', 'import java.util.HashSet;\r\nimport java.util.Scanner;\r\n// 1:无需package\r\n// 2: 类名必须Main, 不可修改\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        int l= scan.nextInt(),r=scan.nextInt();\r\n        HashSet<Long> set = new HashSet<>();\r\n        long sum=0;\r\n        for(int i=0;i<=5;i++){\r\n            for(int j=0;j<=(int)Math.pow(10,i)-1;j++){\r\n                for(int k=0;k<=(int)Math.pow(10,5-i)-1;k++){\r\n                    long num=2022L *(long)Math.pow(10,i)+k *(long)Math.pow(10,i+4)+j;\r\n                    if(num>=l&&num<=r&&!set.contains(num)){\r\n                        set.add(num);\r\n                        sum+=num;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        System.out.println(sum);\r\n        scan.close();\r\n    }\r\n\r\n}', 0, 0, '[{\"input\":\"1 20000\",\"output\":\"14044\"}]', '{\"timeLimit\":1,\"memoryLimit\":512,\"stackLimit\":512}', 0, 0, '2025-06-16 10:33:28', '123615944728158208', '2025-06-16 10:33:38', NULL, 0);
INSERT INTO `oj_problem` VALUES (292050389321633792, 'abc', '节能', '[\"简单\"]', 0, NULL, NULL, 0, 0, '[{\"input\":\"1\",\"output\":\"1\"},{\"input\":\"2\",\"output\":\"2\"}]', '{\"timeLimit\":100,\"memoryLimit\":100,\"stackLimit\":100}', 0, 0, '2025-06-16 18:44:59', '123615944728158208', '2025-06-16 10:50:49', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (292775032677519360, '你好', '11111', '[\"简单\"]', 0, NULL, '11111', 0, 0, '[{\"input\":\"1\",\"output\":\"1\"},{\"input\":\"2\",\"output\":\"2\"}]', '{\"timeLimit\":100,\"memoryLimit\":100,\"stackLimit\":100}', 0, 0, '2025-06-18 10:44:27', '123615944728158208', '2025-06-18 10:59:19', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (292783658867712000, '好汤圆【算法赛】', '元宵节当天，汤圆们在锅里练习“仰泳”，边扑腾边喊：“浮起来才算熟！浮起来的汤圆才是好汤圆！” 此时路过的饺子冷冷吐槽：“醒醒，你连火都没开！”\n\n汤圆老大听后不乐意了，反驳道：“哼，谁说一定要用火煮？我们这可是‘冰雪元宵’，用爱发电！” 饺子听后翻了个白眼，懒得理他，自顾自地走了。\n\n过了会儿，一个肉丸子滚了过来，看着在冷水里努力扑腾的汤圆，疑惑地问：“你们在干嘛呢？”\n\n汤圆老大得意洋洋地说：“我们在练习仰泳！等我们练成了绝世神功，就能浮起来了！”\n\n肉丸子听后哈哈大笑：“你们就算练到天荒地老也浮不起来！想浮起来，得靠我！”\n\n汤圆老大不服气：“你凭什么这么说？”\n\n肉丸子神秘一笑：“我就是传闻中的‘热力丸’！我能让这锅水沸腾起来！” 说完，肉丸子“噗”的一声跳进了锅里。\n\n已知锅里有 2025 个汤圆。肉丸子跳进去后，每分钟都会产生足够的热量使 15 个汤圆浮起来。\n\n请问，肉丸子需要多少分钟才能让所有汤圆都浮起来？', '[\"无\"]', 0, NULL, 'public class Main {    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        //在此输入您的代码...        System.out.print(2025/15);        scan.close();    } }', 0, 0, '[{\"input\":\"1\",\"output\":\"1\"}]', '{\"timeLimit\":200,\"memoryLimit\":200,\"stackLimit\":200}', 0, 0, '2025-06-18 11:18:44', '123615944728158208', '2025-06-18 11:45:09', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (292790501434286080, '好汤圆【算法赛】', '元宵节当天，汤圆们在锅里练习“仰泳”，边扑腾边喊：“浮起来才算熟！浮起来的汤圆才是好汤圆！” 此时路过的饺子冷冷吐槽：“醒醒，你连火都没开！”\n\n汤圆老大听后不乐意了，反驳道：“哼，谁说一定要用火煮？我们这可是‘冰雪元宵’，用爱发电！” 饺子听后翻了个白眼，懒得理他，自顾自地走了。\n\n过了会儿，一个肉丸子滚了过来，看着在冷水里努力扑腾的汤圆，疑惑地问：“你们在干嘛呢？”\n\n汤圆老大得意洋洋地说：“我们在练习仰泳！等我们练成了绝世神功，就能浮起来了！”\n\n肉丸子听后哈哈大笑：“你们就算练到天荒地老也浮不起来！想浮起来，得靠我！”\n\n汤圆老大不服气：“你凭什么这么说？”\n\n肉丸子神秘一笑：“我就是传闻中的‘热力丸’！我能让这锅水沸腾起来！” 说完，肉丸子“噗”的一声跳进了锅里。\n\n已知锅里有 2025 个汤圆。肉丸子跳进去后，每分钟都会产生足够的热量使 15 个汤圆浮起来。\n\n请问，肉丸子需要多少分钟才能让所有汤圆都浮起来？', '[\"无\"]', 0, NULL, 'public class Main {    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        //在此输入您的代码...        System.out.print(2025/15);        scan.close();    } }\r\n\r\n', 0, 0, '[{\"input\":\"1\",\"output\":\"1\"},{\"input\":\"2\",\"output\":\"2\"}]', '{\"timeLimit\":200,\"memoryLimit\":200,\"stackLimit\":200}', 0, 0, '2025-06-18 11:45:55', '123615944728158208', '2025-06-19 10:20:57', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (293129235581165568, '好汤圆', '元宵节当天，汤圆们在锅里练习“仰泳”，边扑腾边喊：“浮起来才算熟！浮起来的汤圆才是好汤圆！” 此时路过的饺子冷冷吐槽：“醒醒，你连火都没开！”\n\n汤圆老大听后不乐意了，反驳道：“哼，谁说一定要用火煮？我们这可是‘冰雪元宵’，用爱发电！” 饺子听后翻了个白眼，懒得理他，自顾自地走了。\n\n过了会儿，一个肉丸子滚了过来，看着在冷水里努力扑腾的汤圆，疑惑地问：“你们在干嘛呢？”\n\n汤圆老大得意洋洋地说：“我们在练习仰泳！等我们练成了绝世神功，就能浮起来了！”\n\n肉丸子听后哈哈大笑：“你们就算练到天荒地老也浮不起来！想浮起来，得靠我！”\n\n汤圆老大不服气：“你凭什么这么说？”\n\n肉丸子神秘一笑：“我就是传闻中的‘热力丸’！我能让这锅水沸腾起来！” 说完，肉丸子“噗”的一声跳进了锅里。\n\n已知锅里有 2025 个汤圆。肉丸子跳进去后，每分钟都会产生足够的热量使 15 个汤圆浮起来。\n\n请问，肉丸子需要多少分钟才能让所有汤圆都浮起来？', '[\"wu\"]', 0, NULL, 'public class Main {    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        //在此输入您的代码...        System.out.print(2025/15);        scan.close();    } }', 0, 0, '[{\"input\":\"1\",\"output\":\"1\"},{\"input\":\"2\",\"output\":\"2\"}]', '{\"timeLimit\":200,\"memoryLimit\":200,\"stackLimit\":200}', 0, 0, '2025-06-19 10:11:56', '123615944728158208', '2025-06-19 10:12:02', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (293159245306195968, '好汤圆【算法赛】', '元宵节当天，汤圆们在锅里练习“仰泳”，边扑腾边喊：“浮起来才算熟！浮起来的汤圆才是好汤圆！” 此时路过的饺子冷冷吐槽：“醒醒，你连火都没开！”\n\n汤圆老大听后不乐意了，反驳道：“哼，谁说一定要用火煮？我们这可是‘冰雪元宵’，用爱发电！” 饺子听后翻了个白眼，懒得理他，自顾自地走了。\n\n过了会儿，一个肉丸子滚了过来，看着在冷水里努力扑腾的汤圆，疑惑地问：“你们在干嘛呢？”\n\n汤圆老大得意洋洋地说：“我们在练习仰泳！等我们练成了绝世神功，就能浮起来了！”\n\n肉丸子听后哈哈大笑：“你们就算练到天荒地老也浮不起来！想浮起来，得靠我！”\n\n汤圆老大不服气：“你凭什么这么说？”\n\n肉丸子神秘一笑：“我就是传闻中的‘热力丸’！我能让这锅水沸腾起来！” 说完，肉丸子“噗”的一声跳进了锅里。\n\n已知锅里有 2025 个汤圆。肉丸子跳进去后，每分钟都会产生足够的热量使 15 个汤圆浮起来。\n\n请问，肉丸子需要多少分钟才能让所有汤圆都浮起来？', '[\"wu\"]', 0, NULL, '\r\n\r\npublic class Main {    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        //在此输入您的代码...        System.out.print(2025/15);        scan.close();    } }', 0, 0, '[{\"input\":\"1\",\"output\":\"1\"},{\"input\":\"2\",\"output\":\"2\"}]', '{\"timeLimit\":200,\"memoryLimit\":200,\"stackLimit\":200}', 0, 0, '2025-06-19 12:11:11', '123615944728158208', '2025-06-19 12:19:33', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (293173693948239872, '好汤圆【算法赛】', '元宵节当天，汤圆们在锅里练习“仰泳”，边扑腾边喊：“浮起来才算熟！浮起来的汤圆才是好汤圆！” 此时路过的饺子冷冷吐槽：“醒醒，你连火都没开！”\n\n汤圆老大听后不乐意了，反驳道：“哼，谁说一定要用火煮？我们这可是‘冰雪元宵’，用爱发电！” 饺子听后翻了个白眼，懒得理他，自顾自地走了。\n\n过了会儿，一个肉丸子滚了过来，看着在冷水里努力扑腾的汤圆，疑惑地问：“你们在干嘛呢？”\n\n汤圆老大得意洋洋地说：“我们在练习仰泳！等我们练成了绝世神功，就能浮起来了！”\n\n肉丸子听后哈哈大笑：“你们就算练到天荒地老也浮不起来！想浮起来，得靠我！”\n\n汤圆老大不服气：“你凭什么这么说？”\n\n肉丸子神秘一笑：“我就是传闻中的‘热力丸’！我能让这锅水沸腾起来！” 说完，肉丸子“噗”的一声跳进了锅里。\n\n已知锅里有 2025 个汤圆。肉丸子跳进去后，每分钟都会产生足够的热量使 15 个汤圆浮起来。\n\n请问，肉丸子需要多少分钟才能让所有汤圆都浮起来？', '[\"无\"]', 0, NULL, 'public class Main {    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        //在此输入您的代码...        System.out.print(2025/15);        scan.close();    } }', 0, 0, '[{\"input\":\"1\",\"output\":\"1\"},{\"input\":\"2\",\"output\":\"2\"}]', '{\"timeLimit\":200,\"memoryLimit\":200,\"stackLimit\":200}', 0, 0, '2025-06-19 13:08:36', '123615944728158208', '2025-06-28 17:09:40', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (296498074392961024, '好汤圆【算法赛】', '元宵节当天，汤圆们在锅里练习“仰泳”，边扑腾边喊：“浮起来才算熟！浮起来的汤圆才是好汤圆！” 此时路过的饺子冷冷吐槽：“醒醒，你连火都没开！”\n\n汤圆老大听后不乐意了，反驳道：“哼，谁说一定要用火煮？我们这可是‘冰雪元宵’，用爱发电！” 饺子听后翻了个白眼，懒得理他，自顾自地走了。\n\n过了会儿，一个肉丸子滚了过来，看着在冷水里努力扑腾的汤圆，疑惑地问：“你们在干嘛呢？”\n\n汤圆老大得意洋洋地说：“我们在练习仰泳！等我们练成了绝世神功，就能浮起来了！”\n\n肉丸子听后哈哈大笑：“你们就算练到天荒地老也浮不起来！想浮起来，得靠我！”\n\n汤圆老大不服气：“你凭什么这么说？”\n\n肉丸子神秘一笑：“我就是传闻中的‘热力丸’！我能让这锅水沸腾起来！” 说完，肉丸子“噗”的一声跳进了锅里。\n\n已知锅里有 2025 个汤圆。肉丸子跳进去后，每分钟都会产生足够的热量使 15 个汤圆浮起来。\n\n请问，肉丸子需要多少分钟才能让所有汤圆都浮起来？', '[\"无\"]', 0, NULL, 'public class Main {    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        //在此输入您的代码...        System.out.print(2025/15);        scan.close();    } }', 0, 0, '[{\"input\":\"0\",\"output\":\"0\"},{\"input\":\"1\",\"output\":\"1\"}]', '{\"timeLimit\":200,\"memoryLimit\":200,\"stackLimit\":200}', 0, 0, '2025-06-28 17:18:30', '123615944728158208', '2025-06-28 17:45:32', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (296509571496124416, '好汤圆【算法赛】', '元宵节当天，汤圆们在锅里练习“仰泳”，边扑腾边喊：“浮起来才算熟！浮起来的汤圆才是好汤圆！” 此时路过的饺子冷冷吐槽：“醒醒，你连火都没开！”\n\n汤圆老大听后不乐意了，反驳道：“哼，谁说一定要用火煮？我们这可是‘冰雪元宵’，用爱发电！” 饺子听后翻了个白眼，懒得理他，自顾自地走了。\n\n过了会儿，一个肉丸子滚了过来，看着在冷水里努力扑腾的汤圆，疑惑地问：“你们在干嘛呢？”\n\n汤圆老大得意洋洋地说：“我们在练习仰泳！等我们练成了绝世神功，就能浮起来了！”\n\n肉丸子听后哈哈大笑：“你们就算练到天荒地老也浮不起来！想浮起来，得靠我！”\n\n汤圆老大不服气：“你凭什么这么说？”\n\n肉丸子神秘一笑：“我就是传闻中的‘热力丸’！我能让这锅水沸腾起来！” 说完，肉丸子“噗”的一声跳进了锅里。\n\n已知锅里有 2025 个汤圆。肉丸子跳进去后，每分钟都会产生足够的热量使 15 个汤圆浮起来。\n\n请问，肉丸子需要多少分钟才能让所有汤圆都浮起来？', '[\"无\"]', 0, NULL, 'public class Main {    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        //在此输入您的代码...        System.out.print(2025/15);        scan.close();    } }', 0, 0, '[{\"input\":\"1\",\"output\":\"1\"},{\"input\":\"0\",\"output\":\"0\"}]', '{\"timeLimit\":200,\"memoryLimit\":200,\"stackLimit\":200}', 0, 0, '2025-06-28 18:04:11', '123615944728158208', '2025-06-29 14:55:37', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (296824752096808960, '好汤圆【算法赛】', '元宵节当天，汤圆们在锅里练习“仰泳”，边扑腾边喊：“浮起来才算熟！浮起来的汤圆才是好汤圆！” 此时路过的饺子冷冷吐槽：“醒醒，你连火都没开！”\n\n汤圆老大听后不乐意了，反驳道：“哼，谁说一定要用火煮？我们这可是‘冰雪元宵’，用爱发电！” 饺子听后翻了个白眼，懒得理他，自顾自地走了。\n\n过了会儿，一个肉丸子滚了过来，看着在冷水里努力扑腾的汤圆，疑惑地问：“你们在干嘛呢？”\n\n汤圆老大得意洋洋地说：“我们在练习仰泳！等我们练成了绝世神功，就能浮起来了！”\n\n肉丸子听后哈哈大笑：“你们就算练到天荒地老也浮不起来！想浮起来，得靠我！”\n\n汤圆老大不服气：“你凭什么这么说？”\n\n肉丸子神秘一笑：“我就是传闻中的‘热力丸’！我能让这锅水沸腾起来！” 说完，肉丸子“噗”的一声跳进了锅里。\n\n已知锅里有 2025 个汤圆。肉丸子跳进去后，每分钟都会产生足够的热量使 15 个汤圆浮起来。\n\n请问，肉丸子需要多少分钟才能让所有汤圆都浮起来？', '[\"们\"]', 0, NULL, 'public class Main {    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        //在此输入您的代码...        System.out.print(2025/15);        scan.close();    } }\r\n\r\n', 0, 0, '[{\"input\":\"1\",\"output\":\"1\"},{\"input\":\"0\",\"output\":\"0\"}]', '{\"timeLimit\":200,\"memoryLimit\":200,\"stackLimit\":200}', 0, 0, '2025-06-29 14:56:36', '123615944728158208', '2025-06-29 15:09:37', '123615944728158208', 1);
INSERT INTO `oj_problem` VALUES (296838542125305856, '好汤圆【算法赛】', '元宵节当天，汤圆们在锅里练习“仰泳”，边扑腾边喊：“浮起来才算熟！浮起来的汤圆才是好汤圆！” 此时路过的饺子冷冷吐槽：“醒醒，你连火都没开！”\n\n汤圆老大听后不乐意了，反驳道：“哼，谁说一定要用火煮？我们这可是‘冰雪元宵’，用爱发电！” 饺子听后翻了个白眼，懒得理他，自顾自地走了。\n\n过了会儿，一个肉丸子滚了过来，看着在冷水里努力扑腾的汤圆，疑惑地问：“你们在干嘛呢？”\n\n汤圆老大得意洋洋地说：“我们在练习仰泳！等我们练成了绝世神功，就能浮起来了！”\n\n肉丸子听后哈哈大笑：“你们就算练到天荒地老也浮不起来！想浮起来，得靠我！”\n\n汤圆老大不服气：“你凭什么这么说？”\n\n肉丸子神秘一笑：“我就是传闻中的‘热力丸’！我能让这锅水沸腾起来！” 说完，肉丸子“噗”的一声跳进了锅里。\n\n已知锅里有 2025 个汤圆。肉丸子跳进去后，每分钟都会产生足够的热量使 15 个汤圆浮起来。\n\n请问，肉丸子需要多少分钟才能让所有汤圆都浮起来？\n\n', '[\"wu\"]', 0, NULL, 'public class Main {    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        //在此输入您的代码...        System.out.print(2025/15);        scan.close();    } }\r\n\r\n', 0, 0, '[{\"input\":\"0\",\"output\":\"0\"},{\"input\":\"1\",\"output\":\"1\"}]', '{\"timeLimit\":200,\"memoryLimit\":200,\"stackLimit\":200}', 0, 0, '2025-06-29 15:51:23', '123615944728158208', '2025-06-29 15:51:24', NULL, 0);

-- ----------------------------
-- Table structure for oj_problem_comment
-- ----------------------------
DROP TABLE IF EXISTS `oj_problem_comment`;
CREATE TABLE `oj_problem_comment`  (
  `id` bigint NOT NULL COMMENT '主键',
  `tags` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标签',
  `parent_id` bigint NULL DEFAULT NULL COMMENT '父id',
  `problem_id` bigint NULL DEFAULT NULL COMMENT '题目id',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '内容',
  `author_id` bigint NULL DEFAULT NULL COMMENT '作者id',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `del_flag` tinyint NULL DEFAULT NULL COMMENT '逻辑删除（0-未删除，1-已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '题目评论' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of oj_problem_comment
-- ----------------------------
INSERT INTO `oj_problem_comment` VALUES (2, NULL, 142194349395795968, 132682575988256768, '这是我的第san条回复评论', 1067246875800000001, '2024-04-29 21:49:34', 0);
INSERT INTO `oj_problem_comment` VALUES (142194349395795968, '', NULL, 132682575988256768, '这是我的第一条评论', 123615944728158208, '2024-04-28 22:10:34', 0);
INSERT INTO `oj_problem_comment` VALUES (142194470707650560, '', 142194349395795968, 132682575988256768, '这是我的第一条回复评论', 123615944728158208, '2024-04-28 22:11:03', 0);
INSERT INTO `oj_problem_comment` VALUES (142194546255454208, '', 142194470707650560, 132682575988256768, '这是我的第一条回复回复评论', 123615944728158208, '2024-04-28 22:11:21', 0);
INSERT INTO `oj_problem_comment` VALUES (142194895452233728, '', NULL, 132682575988256768, '这是我的第二条评论', 123615944728158208, '2024-04-28 22:12:44', 0);
INSERT INTO `oj_problem_comment` VALUES (142847422594031616, NULL, 142194349395795968, 132682575988256768, '李在干神魔🐛🐛🐛', 123615944728158208, '2024-04-30 17:25:39', 0);
INSERT INTO `oj_problem_comment` VALUES (142848418221137920, NULL, 142194470707650560, 132682575988256768, '哈哈哈哈哈哈', 123615944728158208, '2024-04-30 17:29:36', 0);
INSERT INTO `oj_problem_comment` VALUES (143123851978305536, NULL, NULL, 132962499613540352, '这道题好难~🤯', 123615944728158208, '2024-05-01 11:44:05', 0);
INSERT INTO `oj_problem_comment` VALUES (143124112859820032, NULL, 143123851978305536, 132962499613540352, '那是因为你还没学习dp\n', 1067246875800000001, '2024-05-01 11:45:07', 0);
INSERT INTO `oj_problem_comment` VALUES (143125754707537920, NULL, 143124112859820032, 132962499613540352, '好吧😂😂', 123615944728158208, '2024-05-01 11:51:39', 0);
INSERT INTO `oj_problem_comment` VALUES (143127607268700160, NULL, NULL, 140030340132536320, '这道题应该这么做：\n```java\npublic class Service {\n  Sysout.println.out(\"Hello World!\");\n}\n```', 123615944728158208, '2024-05-01 11:59:00', 0);
INSERT INTO `oj_problem_comment` VALUES (145004870339764224, NULL, 143127607268700160, 140030340132536320, '可以，666', 123615944728158208, '2024-05-06 16:18:35', 0);
INSERT INTO `oj_problem_comment` VALUES (145005043463856128, NULL, 143127607268700160, 140030340132536320, '确实确实', 123615944728158208, '2024-05-06 16:19:16', 0);
INSERT INTO `oj_problem_comment` VALUES (145017015240495104, NULL, 143127607268700160, 140030340132536320, '6666666', 123615944728158208, '2024-05-06 17:06:50', 0);
INSERT INTO `oj_problem_comment` VALUES (145018701552029696, NULL, 145004870339764224, 140030340132536320, '666', 123615944728158208, '2024-05-06 17:13:32', 0);
INSERT INTO `oj_problem_comment` VALUES (145019629969608704, NULL, 2, 132682575988256768, '这道题难吗', 123615944728158208, '2024-05-06 17:17:14', 0);
INSERT INTO `oj_problem_comment` VALUES (145021703071465472, NULL, 143125754707537920, 132962499613540352, '嗯嗯，加油！', 123615944728158208, '2024-05-06 17:25:28', 0);
INSERT INTO `oj_problem_comment` VALUES (145025953776390144, NULL, 145019629969608704, 132682575988256768, '还行，不是很难，建议自己不看答案做一下🌟🌟🌟', 135186678792712192, '2024-05-06 17:42:21', 0);
INSERT INTO `oj_problem_comment` VALUES (149784493183266816, NULL, 2, 132682575988256768, '```java\n\n\n/**\n * Test\n */\npublic class Test {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n\n}\n```', 123615944728158208, '2024-05-19 20:51:06', 0);

-- ----------------------------
-- Table structure for oj_problem_submit
-- ----------------------------
DROP TABLE IF EXISTS `oj_problem_submit`;
CREATE TABLE `oj_problem_submit`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `language` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '编程语言',
  `code` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户代码',
  `judge_info` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '判题信息（json 对象）',
  `code_status` int NULL DEFAULT 0 COMMENT '代码执行状态：0：Accepted，1：Wrong Answer，2：Compile Error，3：out of Memory，4：Time Limit Exceeded，5：Runtime Error，6：System Error',
  `question_id` bigint NOT NULL COMMENT '题目 id',
  `user_id` bigint NOT NULL COMMENT '创建用户 id',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `is_delete` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除',
  `status` tinyint NOT NULL COMMENT '判题状态（0 - 待判题、1 - 判题中、2 - 成功、3 - 失败）',
  `output` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_questionId`(`question_id` ASC) USING BTREE,
  INDEX `idx_userId`(`user_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1770361965266980867 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '题目提交' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of oj_problem_submit
-- ----------------------------
INSERT INTO `oj_problem_submit` VALUES (143286812260700160, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{}', 3, 132682575988256768, 123615944728158208, '2024-05-01 22:31:38', '2024-05-01 22:31:38', 0, 2, '[]');
INSERT INTO `oj_problem_submit` VALUES (143287069811937280, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{}', 3, 132682575988256768, 123615944728158208, '2024-05-01 22:32:39', '2024-05-01 22:32:39', 0, 2, '[]');
INSERT INTO `oj_problem_submit` VALUES (143288525227057152, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', NULL, 0, 132682575988256768, 123615944728158208, '2024-05-01 22:38:26', '2024-05-01 22:38:26', 0, 0, NULL);
INSERT INTO `oj_problem_submit` VALUES (143288919365783552, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{}', 3, 132682575988256768, 123615944728158208, '2024-05-01 22:40:00', '2024-05-01 22:40:00', 0, 2, '[]');
INSERT INTO `oj_problem_submit` VALUES (143290052926771200, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', NULL, 0, 132682575988256768, 123615944728158208, '2024-05-01 22:44:30', '2024-05-01 22:44:30', 0, 0, NULL);
INSERT INTO `oj_problem_submit` VALUES (143290215577686016, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', NULL, 0, 132682575988256768, 123615944728158208, '2024-05-01 22:45:09', '2024-05-01 22:45:09', 0, 0, NULL);
INSERT INTO `oj_problem_submit` VALUES (143290458927022080, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{}', 3, 132682575988256768, 123615944728158208, '2024-05-01 22:46:07', '2024-05-01 22:46:07', 0, 2, '[]');
INSERT INTO `oj_problem_submit` VALUES (143292025466118144, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{}', 3, 132682575988256768, 123615944728158208, '2024-05-01 22:52:21', '2024-05-01 22:52:21', 0, 2, '[]');
INSERT INTO `oj_problem_submit` VALUES (143292256370941952, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{}', 3, 132682575988256768, 123615944728158208, '2024-05-01 22:53:16', '2024-05-01 22:53:16', 0, 2, '[]');
INSERT INTO `oj_problem_submit` VALUES (143294071405666304, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{\"message\":\"编译失败\"}', 3, 132682575988256768, 123615944728158208, '2024-05-01 23:00:28', '2024-05-01 23:00:28', 0, 2, '[]');
INSERT INTO `oj_problem_submit` VALUES (143294712702164992, 'java', 'public class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{\"message\":\"编译失败\"}', 3, 132682575988256768, 123615944728158208, '2024-05-01 23:03:01', '2024-05-01 23:03:01', 0, 2, '[]');
INSERT INTO `oj_problem_submit` VALUES (143295450727702528, 'java', 'public class Main { public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{\"message\":\"编译失败\"}', 3, 132682575988256768, 123615944728158208, '2024-05-01 23:05:57', '2024-05-01 23:05:57', 0, 2, '[]');
INSERT INTO `oj_problem_submit` VALUES (143297135558553600, 'java', 'import java.util.Scanner;\n\n/**\n * test\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', NULL, 0, 132682575988256768, 123615944728158208, '2024-05-01 23:12:39', '2024-05-01 23:12:39', 0, 0, NULL);
INSERT INTO `oj_problem_submit` VALUES (143297707791642624, 'java', 'import java.util.Scanner;\n\n/**\n * test\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{\"message\":\"\",\"memory\":202,\"time\":16}', 3, 132682575988256768, 123615944728158208, '2024-05-01 23:14:55', '2024-05-01 23:14:55', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (144618504829272064, 'java', 'import java.util.Scanner;\n\n/**\n * test\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{\"message\":\"\",\"memory\":457,\"time\":25}', 3, 132682575988256768, 123615944728158208, '2024-05-05 14:43:18', '2024-05-05 14:43:18', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (144621506806009856, 'java', 'import java.util.Scanner;\n\n/**\n * test\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{\"message\":\"\",\"memory\":100,\"time\":4}', 3, 132682575988256768, 123615944728158208, '2024-05-05 14:55:14', '2024-05-05 14:55:14', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146544835905298432, 'java', 'import java.util.Scanner;\n\n/**\n * test\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', NULL, NULL, 132682575988256768, 123615944728158208, '2024-05-10 22:17:51', NULL, 0, 0, NULL);
INSERT INTO `oj_problem_submit` VALUES (146545606478544896, 'java', 'import java.util.Scanner;\n\n/**\n * test\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', '{\"message\":\"\",\"memory\":155,\"time\":11}', 3, 132682575988256768, 123615944728158208, '2024-05-10 22:20:55', '2024-05-10 22:21:06', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146545984154648576, 'java', 'import java.util.Scanner;\n\n/**\n * test\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', NULL, NULL, 132682575988256768, 123615944728158208, '2024-05-10 22:22:25', NULL, 0, 0, NULL);
INSERT INTO `oj_problem_submit` VALUES (146548727074336768, 'java', 'import java.util.Scanner;\n\n/**\n * test\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(\"asd\");\n    }\n\n}', NULL, NULL, 132682575988256768, 123615944728158208, '2024-05-10 22:33:19', NULL, 0, 0, NULL);
INSERT INTO `oj_problem_submit` VALUES (146552294799634432, 'java', 'public class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n    \r\n}', '{\"message\":\"编译失败\"}', 3, 132682575988256768, 123615944728158208, '2024-05-10 22:47:29', '2024-05-10 22:47:30', 0, 2, '[]');
INSERT INTO `oj_problem_submit` VALUES (146553058620141568, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * test\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":52,\"time\":15}', 0, 132682575988256768, 123615944728158208, '2024-05-10 22:50:32', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146787630322663424, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":218,\"time\":17}', 0, 132682575988256768, 123615944728158208, '2024-05-11 14:22:38', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146789043899580416, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":99,\"time\":11}', 0, 132682575988256768, 123615944728158208, '2024-05-11 14:28:15', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146789213114580992, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * test\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":109,\"time\":5}', 0, 132682575988256768, 123615944728158208, '2024-05-11 14:28:55', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146789893980143616, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * test\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":43,\"time\":15}', 0, 132682575988256768, 123615944728158208, '2024-05-11 14:31:37', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146793927017349120, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * test\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":102,\"time\":7}', 0, 132682575988256768, 123615944728158208, '2024-05-11 14:47:39', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146794371592601600, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * test\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":50,\"time\":12}', 0, 132682575988256768, 123615944728158208, '2024-05-11 14:49:25', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146794515557892096, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":43,\"time\":0}', 0, 132682575988256768, 123615944728158208, '2024-05-11 14:49:59', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146795038109450240, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":64,\"time\":10}', 0, 132682575988256768, 123615944728158208, '2024-05-11 14:52:04', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146796590387806208, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":77,\"time\":17}', 0, 132682575988256768, 123615944728158208, '2024-05-11 14:58:14', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146797652721123328, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":70,\"time\":17}', 0, 132682575988256768, 123615944728158208, '2024-05-11 15:02:27', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146797811588775936, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":48,\"time\":21}', 0, 132682575988256768, 123615944728158208, '2024-05-11 15:03:05', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146798005973794816, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":45,\"time\":12}', 0, 132682575988256768, 123615944728158208, '2024-05-11 15:03:52', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146798269304782848, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":44,\"time\":7}', 0, 132682575988256768, 123615944728158208, '2024-05-11 15:04:54', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146798322132041728, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":44,\"time\":7}', 0, 132682575988256768, 123615944728158208, '2024-05-11 15:05:07', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146798577707761664, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":44,\"time\":14}', 0, 132682575988256768, 123615944728158208, '2024-05-11 15:06:08', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (146798658439725056, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":46,\"time\":9}', 0, 132682575988256768, 123615944728158208, '2024-05-11 15:06:27', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (147515723807825920, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":1246,\"time\":28}', 0, 132682575988256768, 123615944728158208, '2024-05-13 14:35:49', '2024-05-13 14:42:46', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (147517294893432832, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":64,\"time\":11}', 0, 132682575988256768, 123615944728158208, '2024-05-13 14:42:03', '2024-05-13 14:42:08', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (147519255428562944, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":63,\"time\":11}', 0, 132682575988256768, 123615944728158208, '2024-05-13 14:49:51', '2024-05-13 14:49:52', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (147519447984865280, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":44,\"time\":13}', 0, 132682575988256768, 123615944728158208, '2024-05-13 14:50:37', '2024-05-13 14:50:38', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (147519882149855232, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":44,\"time\":24}', 0, 132682575988256768, 123615944728158208, '2024-05-13 14:52:20', '2024-05-13 14:52:21', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (147522152295923712, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":64,\"time\":15}', 0, 132682575988256768, 123615944728158208, '2024-05-13 15:01:21', '2024-05-13 15:01:23', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (147523023566110720, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":64,\"time\":13}', 0, 132682575988256768, 123615944728158208, '2024-05-13 15:04:49', '2024-05-13 15:04:50', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (147523108060364800, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":64,\"time\":15}', 0, 132682575988256768, 123615944728158208, '2024-05-13 15:05:09', '2024-05-13 15:05:10', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (148731886427734016, 'java', 'import java.util.Scanner;\r\n\r\n/**\r\n * Main\r\n */\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        sc.next();\r\n        System.out.println(\"asd\");\r\n    }\r\n\r\n}', '{\"message\":\"\",\"memory\":124,\"time\":10}', 0, 132682575988256768, 123615944728158208, '2024-05-16 23:08:25', '2024-05-16 23:08:26', 0, 2, '[\"asd\"]');
INSERT INTO `oj_problem_submit` VALUES (283021648313126912, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"26\");\r\n    }\r\n}', '{\"memory\":223,\"time\":152}', 3, 282012591318962176, 123615944728158208, '2025-05-22 12:47:59', '2025-05-22 12:48:01', 0, 2, '[\"26\"]');
INSERT INTO `oj_problem_submit` VALUES (283185632417779712, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"Hello World\");\r\n    }\r\n}', NULL, NULL, 282012591318962176, 123615944728158208, '2025-05-22 23:39:37', '2025-05-22 23:39:38', 0, 1, NULL);
INSERT INTO `oj_problem_submit` VALUES (283185758427254784, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"Hello World\");\r\n    }\r\n}', NULL, NULL, 282012591318962176, 123615944728158208, '2025-05-22 23:40:07', '2025-05-22 23:40:08', 0, 1, NULL);
INSERT INTO `oj_problem_submit` VALUES (283187286298963968, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"18\");\r\n    }\r\n}', NULL, NULL, 282012591318962176, 123615944728158208, '2025-05-22 23:46:12', '2025-05-22 23:46:12', 0, 1, NULL);
INSERT INTO `oj_problem_submit` VALUES (283187987150381056, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"18\");\r\n    }\r\n}', NULL, NULL, 282012591318962176, 123615944728158208, '2025-05-22 23:48:59', '2025-05-22 23:48:59', 0, 1, NULL);
INSERT INTO `oj_problem_submit` VALUES (283188720339902464, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"18\");\r\n    }\r\n}', '{\"memory\":213,\"time\":346}', 3, 282012591318962176, 123615944728158208, '2025-05-22 23:51:53', '2025-05-22 23:51:56', 0, 2, '[\"18\"]');
INSERT INTO `oj_problem_submit` VALUES (283189704864686080, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"18\");\r\n    }\r\n}', '{\"memory\":126,\"time\":227}', 0, 282012591318962176, 123615944728158208, '2025-05-22 23:55:48', '2025-05-22 23:55:51', 0, 2, '[\"18\"]');
INSERT INTO `oj_problem_submit` VALUES (283401996088668160, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"18\");\r\n    }\r\n}', NULL, NULL, 282012591318962176, 123615944728158208, '2025-05-23 13:59:20', '2025-05-23 13:59:42', 0, 2, NULL);
INSERT INTO `oj_problem_submit` VALUES (283402402755846144, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"18\");\r\n    }\r\n}', '{\"memory\":763,\"time\":274}', 3, 282012591318962176, 123615944728158208, '2025-05-23 14:00:57', '2025-05-23 14:00:59', 0, 2, '[\"18\"]');
INSERT INTO `oj_problem_submit` VALUES (283402847792472064, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"18\");\r\n    }\r\n}', '{\"memory\":240,\"time\":162}', 3, 282012591318962176, 123615944728158208, '2025-05-23 14:02:43', '2025-05-23 14:02:45', 0, 2, '[\"18\"]');
INSERT INTO `oj_problem_submit` VALUES (283403135626584064, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(\"18\");\r\n    }\r\n}', '{\"memory\":255,\"time\":135}', 3, 282012591318962176, 123615944728158208, '2025-05-23 14:03:52', '2025-05-23 14:03:53', 0, 2, '[\"18\"]');
INSERT INTO `oj_problem_submit` VALUES (285681476505198592, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(18);\r\n    }\r\n}', '{\"memory\":762,\"time\":358}', 3, 282011102005497856, 123615944728158208, '2025-05-29 20:57:11', '2025-05-29 20:57:14', 0, 2, '[\"18\"]');
INSERT INTO `oj_problem_submit` VALUES (285684715057340416, 'java', 'public class Main {\r\n    public static void main(String [] org) {\r\n        System.out.print(18);\r\n    }\r\n}', '{\"memory\":722,\"time\":260}', 3, 282011102005497856, 123615944728158208, '2025-05-29 21:10:04', '2025-05-29 21:10:05', 0, 2, '[\"18\"]');
INSERT INTO `oj_problem_submit` VALUES (292185192139644928, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        System.out.println(\"Hello World\");\n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":51,\"time\":328}', 0, 149777511676178432, 123615944728158208, '2025-06-16 19:40:38', '2025-06-16 19:40:38', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (292775695587266560, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        11\n        scan.close();\n    }\n}', NULL, 0, 149777511676178432, 123615944728158208, '2025-06-18 10:47:05', '2025-06-18 10:47:05', 0, 1, NULL);
INSERT INTO `oj_problem_submit` VALUES (292776135502684160, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        1111\n        scan.close();\n    }\n}', NULL, 0, 149777511676178432, 123615944728158208, '2025-06-18 10:48:50', '2025-06-18 10:48:50', 0, 1, NULL);
INSERT INTO `oj_problem_submit` VALUES (292776184555069440, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        1111\n        scan.close();\n    }\n}', NULL, 0, 149777511676178432, 123615944728158208, '2025-06-18 10:49:01', '2025-06-18 10:49:01', 0, 1, NULL);
INSERT INTO `oj_problem_submit` VALUES (292776280956952576, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        System.out.println(11);\n        scan.close();\n    }\n}', '{\"message\":\"Wrong Answer\",\"memory\":63,\"time\":513}', 1, 149777511676178432, 123615944728158208, '2025-06-18 10:49:24', '2025-06-18 10:49:24', 0, 2, '[\"11\"]');
INSERT INTO `oj_problem_submit` VALUES (292784111609274368, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":89,\"time\":395}', 0, 149777511676178432, 123615944728158208, '2025-06-18 11:20:31', '2025-06-18 11:20:31', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (292790945527193600, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        System.out.print(\"Hello World\");\n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":18,\"time\":332}', 0, 149777511676178432, 123615944728158208, '2025-06-18 11:47:41', '2025-06-18 11:47:41', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293129572757069824, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"out of Memory\",\"memory\":3927,\"time\":468}', 3, 149777511676178432, 123615944728158208, '2025-06-19 10:13:16', '2025-06-19 10:13:16', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293129650255224832, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":151,\"time\":334}', 0, 149777511676178432, 123615944728158208, '2025-06-19 10:13:34', '2025-06-19 10:13:34', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293131055426756608, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":152,\"time\":388}', 0, 149777511676178432, 123615944728158208, '2025-06-19 10:19:09', '2025-06-19 10:19:09', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293131079913103360, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":91,\"time\":395}', 0, 149777511676178432, 123615944728158208, '2025-06-19 10:19:15', '2025-06-19 10:19:15', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293131100200951808, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":76,\"time\":337}', 0, 149777511676178432, 123615944728158208, '2025-06-19 10:19:20', '2025-06-19 10:19:20', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293131119188566016, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":73,\"time\":345}', 0, 149777511676178432, 123615944728158208, '2025-06-19 10:19:25', '2025-06-19 10:19:25', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293131138213928960, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":127,\"time\":333}', 0, 149777511676178432, 123615944728158208, '2025-06-19 10:19:29', '2025-06-19 10:19:29', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293131240272723968, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":18,\"time\":355}', 0, 149777511676178432, 123615944728158208, '2025-06-19 10:19:53', '2025-06-19 10:19:53', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293131269209227264, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":126,\"time\":365}', 0, 149777511676178432, 123615944728158208, '2025-06-19 10:20:00', '2025-06-19 10:20:00', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293159718482407424, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":126,\"time\":451}', 0, 149777511676178432, 123615944728158208, '2025-06-19 12:13:03', '2025-06-19 12:13:03', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (293174145431511040, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":81,\"time\":417}', 0, 149777511676178432, 123615944728158208, '2025-06-19 13:10:23', '2025-06-19 13:10:23', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (296498349040181248, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', NULL, 0, 149777511676178432, 123615944728158208, '2025-06-28 17:19:36', '2025-06-28 17:19:36', 0, 1, NULL);
INSERT INTO `oj_problem_submit` VALUES (296498559241920512, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', NULL, 0, 149777511676178432, 123615944728158208, '2025-06-28 17:20:26', '2025-06-28 17:20:26', 0, 1, NULL);
INSERT INTO `oj_problem_submit` VALUES (296498624996024320, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"out of Memory\",\"memory\":3989,\"time\":934}', 3, 149777511676178432, 123615944728158208, '2025-06-28 17:20:42', '2025-06-28 17:20:42', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (296498744818900992, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":19,\"time\":550}', 0, 149777511676178432, 123615944728158208, '2025-06-28 17:21:10', '2025-06-28 17:21:10', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (296509741612900352, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"out of Memory\",\"memory\":4027,\"time\":509}', 3, 149777511676178432, 123615944728158208, '2025-06-28 18:04:51', '2025-06-28 18:04:51', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (296509790233272320, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":75,\"time\":449}', 0, 149777511676178432, 123615944728158208, '2025-06-28 18:05:02', '2025-06-28 18:05:02', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (296512168080678912, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n        System.out.print(\"Hello World\");\n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":68,\"time\":382}', 0, 149777511676178432, 123615944728158208, '2025-06-28 18:14:29', '2025-06-28 18:14:29', 0, 2, '[\"Hello World\"]');
INSERT INTO `oj_problem_submit` VALUES (296824891519668224, 'java', 'import java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        //在此输入您的代码...\n         System.out.print(\"Hello World\");   \n        scan.close();\n    }\n}', '{\"message\":\"Accepted\",\"memory\":10,\"time\":457}', 0, 149777511676178432, 123615944728158208, '2025-06-29 14:57:10', '2025-06-29 14:57:10', 0, 2, '[\"Hello World\"]');

-- ----------------------------
-- Table structure for school
-- ----------------------------
DROP TABLE IF EXISTS `school`;
CREATE TABLE `school`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `city` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `del_flag` int NULL DEFAULT 0 COMMENT '逻辑删除标志，0-未删除，1-已删除',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `school_pk`(`name` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of school
-- ----------------------------
INSERT INTO `school` VALUES (1, '东华校区', '泸州', 0, '2025-06-27 20:55:50');
INSERT INTO `school` VALUES (2, '云台校区', '泸州', 0, '2025-06-27 20:55:50');

-- ----------------------------
-- Table structure for sys_file
-- ----------------------------
DROP TABLE IF EXISTS `sys_file`;
CREATE TABLE `sys_file`  (
  `id` bigint NOT NULL COMMENT '主键',
  `file_name` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '文件名',
  `url` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '访问路径',
  `file_size` bigint NOT NULL COMMENT '文件大小',
  `creator` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `updater` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '更新人',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `del_flag` tinyint NULL DEFAULT NULL COMMENT '逻辑删除（0-未删除，1-已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '云文件信息表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_file
-- ----------------------------
INSERT INTO `sys_file` VALUES (138409947809300480, 'dMbMJ3hZNX-Snipaste_2024-04-09_10-17-42.png', 'zrxzrx-123615944728158208/2024-04-18/dMbMJ3hZNX-Snipaste_2024-04-09_10-17-42.png', 4791686, '123615944728158208', '2024-04-18 11:32:43', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (138458509871939584, 'DNCSEl6iUp-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-18/DNCSEl6iUp-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-18 14:45:41', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (138464038119800832, 'LqUopcWW4i-20220520210604_2423f.jpeg', 'zrxzrx-123615944728158208/2024-04-18/LqUopcWW4i-20220520210604_2423f.jpeg', 15532, '123615944728158208', '2024-04-18 15:07:39', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (138464091458764800, 'JEKxuWX7tz-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-18/JEKxuWX7tz-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-18 15:07:52', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (138729555334381568, 'pMQhbKMjN7-20220520210608_6b474.jpeg', 'zrxzrx-123615944728158208/2024-04-19/pMQhbKMjN7-20220520210608_6b474.jpeg', 24208, '123615944728158208', '2024-04-19 08:42:43', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (138729567233622016, 'rDhUtKTcAA-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-19/rDhUtKTcAA-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-19 08:42:46', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (138750448555085824, 'ebJc_6ARMz-20220801204303_cef03.thumb.400_0.jpeg', 'zrxzrx-123615944728158208/2024-04-19/ebJc_6ARMz-20220801204303_cef03.thumb.400_0.jpeg', 50818, '123615944728158208', '2024-04-19 10:05:45', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (138750459305086976, 'vS4JzK82wK-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-19/vS4JzK82wK-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-19 10:05:47', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (138752372486524928, 'nAKLy30fes-20220801204303_cef03.thumb.400_0.jpeg', 'zrxzrx-123615944728158208/2024-04-19/nAKLy30fes-20220801204303_cef03.thumb.400_0.jpeg', 50818, '123615944728158208', '2024-04-19 10:13:23', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (138752399086800896, '0I0D2L0XFj-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-19/0I0D2L0XFj-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-19 10:13:30', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139648226258104320, 'JQlk97drAD-20220801204303_cef03.thumb.400_0.jpeg', 'zrxzrx-123615944728158208/2024-04-21/JQlk97drAD-20220801204303_cef03.thumb.400_0.jpeg', 50818, '123615944728158208', '2024-04-21 21:33:12', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139648277768351744, '0G-tjjc1xT-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/0G-tjjc1xT-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 21:33:24', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139648376774897664, 'wafQFYvTqy-20220612164733_72d8b.jpg', 'zrxzrx-123615944728158208/2024-04-21/wafQFYvTqy-20220612164733_72d8b.jpg', 34352, '123615944728158208', '2024-04-21 21:33:48', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139648520471752704, 'UE2V-UflEJ-20220801204303_cef03.thumb.400_0.jpeg', 'zrxzrx-123615944728158208/2024-04-21/UE2V-UflEJ-20220801204303_cef03.thumb.400_0.jpeg', 50818, '123615944728158208', '2024-04-21 21:34:22', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139648619927089152, 'scF-rzVk8E-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/scF-rzVk8E-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 21:34:46', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139648907585040384, 'BewCotXzeU-20220801204303_cef03.thumb.400_0.jpeg', 'zrxzrx-123615944728158208/2024-04-21/BewCotXzeU-20220801204303_cef03.thumb.400_0.jpeg', 50818, '123615944728158208', '2024-04-21 21:35:54', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139648929017933824, 'fxEA-uUNrt-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/fxEA-uUNrt-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 21:35:59', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139648961498624000, 'LIpiVrNY5e-20220801204303_cef03.thumb.400_0.jpeg', 'zrxzrx-123615944728158208/2024-04-21/LIpiVrNY5e-20220801204303_cef03.thumb.400_0.jpeg', 50818, '123615944728158208', '2024-04-21 21:36:07', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139649026535501824, 'urFxUaJWSt-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/urFxUaJWSt-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 21:36:22', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139649195188465664, '43XKa_7VOM-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/43XKa_7VOM-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 21:37:03', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139649295587520512, 'GzPfFUeWED-20220801204303_cef03.thumb.400_0.jpeg', 'zrxzrx-123615944728158208/2024-04-21/GzPfFUeWED-20220801204303_cef03.thumb.400_0.jpeg', 50818, '123615944728158208', '2024-04-21 21:37:27', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139649457479266304, 'FyJXjLRYE2-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/FyJXjLRYE2-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 21:38:05', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139649489343393792, 'M1F9F1HsW0-20220801204303_cef03.thumb.400_0.jpeg', 'zrxzrx-123615944728158208/2024-04-21/M1F9F1HsW0-20220801204303_cef03.thumb.400_0.jpeg', 50818, '123615944728158208', '2024-04-21 21:38:13', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139649499283894272, '8asEvBjFTX-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/8asEvBjFTX-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 21:38:15', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139649622256693248, 'Ys6XJ4Tkti-20220520210604_2423f.jpeg', 'zrxzrx-123615944728158208/2024-04-21/Ys6XJ4Tkti-20220520210604_2423f.jpeg', 15532, '123615944728158208', '2024-04-21 21:38:45', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139650029934653440, 'qVLlwRgJ7A-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/qVLlwRgJ7A-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 21:40:22', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139651333763411968, 'EdRK5Ps_WM-20220801204303_cef03.thumb.400_0.jpeg', 'zrxzrx-123615944728158208/2024-04-21/EdRK5Ps_WM-20220801204303_cef03.thumb.400_0.jpeg', 50818, '123615944728158208', '2024-04-21 21:45:33', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139651774903529472, 'QlN4xdv7K7-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/QlN4xdv7K7-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 21:47:18', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139653488972967936, 'c8Z-3oBMB1-20220612164733_72d8b.jpg', 'zrxzrx-123615944728158208/2024-04-21/c8Z-3oBMB1-20220612164733_72d8b.jpg', 34352, '123615944728158208', '2024-04-21 21:54:06', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139654027072811008, 'gslR7IpaLW-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/gslR7IpaLW-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 21:56:15', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139656958853558272, '-kjn1FPII_-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/-kjn1FPII_-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 22:07:54', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139665598989774848, 'Dqc8Db9v4q-你的名字动漫壁纸_彼岸壁纸.jpg', 'zrxzrx-123615944728158208/2024-04-21/Dqc8Db9v4q-你的名字动漫壁纸_彼岸壁纸.jpg', 1100030, '123615944728158208', '2024-04-21 22:42:14', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139665783660785664, 'HrMQ9L7zXP-报纸墙 可爱马尾辫少女粉色长发动漫壁纸_彼岸壁纸.jpg', 'zrxzrx-123615944728158208/2024-04-21/HrMQ9L7zXP-报纸墙 可爱马尾辫少女粉色长发动漫壁纸_彼岸壁纸.jpg', 1625386, '123615944728158208', '2024-04-21 22:42:58', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139665898144313344, 'lHrFioqYuD-《你的名字 》立花泷 宫水三叶桌面壁纸_彼岸壁纸.jpg', 'zrxzrx-123615944728158208/2024-04-21/lHrFioqYuD-《你的名字 》立花泷 宫水三叶桌面壁纸_彼岸壁纸.jpg', 487288, '123615944728158208', '2024-04-21 22:43:25', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139667920356683776, 'ODEai8Y__G-报纸墙 可爱马尾辫少女粉色长发动漫壁纸_彼岸壁纸.jpg', 'zrxzrx-123615944728158208/2024-04-21/ODEai8Y__G-报纸墙 可爱马尾辫少女粉色长发动漫壁纸_彼岸壁纸.jpg', 1625386, '123615944728158208', '2024-04-21 22:51:27', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (139667980372979712, 'zh27l-STcH-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-21/zh27l-STcH-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-21 22:51:41', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (140386219839197184, 'gT-khenkds-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-23/gT-khenkds-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-23 22:25:43', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (140386233034477568, 'v7E8abpmwO-你的名字动漫壁纸_彼岸壁纸.jpg', 'zrxzrx-123615944728158208/2024-04-23/v7E8abpmwO-你的名字动漫壁纸_彼岸壁纸.jpg', 1100030, '123615944728158208', '2024-04-23 22:25:46', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (140386233906892800, 'wGbHrPqS0w-你的名字动漫壁纸_彼岸壁纸.jpg', 'zrxzrx-123615944728158208/2024-04-23/wGbHrPqS0w-你的名字动漫壁纸_彼岸壁纸.jpg', 1100030, '123615944728158208', '2024-04-23 22:25:46', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (140386242610073600, 'LdO6p7AzXT-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-23/LdO6p7AzXT-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-23 22:25:48', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (140387950828523520, '_6jBennMOo-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-23/_6jBennMOo-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-23 22:32:36', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (141305746168532992, 'tI3REATa-u-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-04-26/tI3REATa-u-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-04-26 11:19:35', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (141310083246682112, 'Hw03mO8KhL-20220520210604_2423f.jpeg', 'admin333-135186678792712192/2024-04-26/Hw03mO8KhL-20220520210604_2423f.jpeg', 15532, '135186678792712192', '2024-04-26 11:36:49', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (141518276442050560, 'b6q7YxVUAP-20220520210608_6b474.jpeg', 'admin333-135186678792712192/2024-04-27/b6q7YxVUAP-20220520210608_6b474.jpeg', 24208, '135186678792712192', '2024-04-27 01:24:06', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (141740359113506816, 'ZoraVSUNOK-20220709150824_97667.thumb.400_0.jpg', 'admin333-135186678792712192/2024-04-27/ZoraVSUNOK-20220709150824_97667.thumb.400_0.jpg', 53461, '135186678792712192', '2024-04-27 16:06:35', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (144617952636567552, 'tQtPBNPyni-20220709150824_97667.thumb.400_0.jpg', 'zrxzrx-123615944728158208/2024-05-05/tQtPBNPyni-20220709150824_97667.thumb.400_0.jpg', 53461, '123615944728158208', '2024-05-05 14:41:07', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (147813268387889152, '_Y_0nc4wHM-OIP-C.jpg', 'zrxzrx-123615944728158208/2024-05-14/_Y_0nc4wHM-OIP-C.jpg', 14879, '123615944728158208', '2024-05-14 10:18:09', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (147813338562789376, '1eS_m06Rwc-R-C.jpg', 'zrxzrx-123615944728158208/2024-05-14/1eS_m06Rwc-R-C.jpg', 561287, '123615944728158208', '2024-05-14 10:18:26', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (147815310816804864, 'cFdSrOdKoa-harmonyNext.jpg', 'zrxzrx-123615944728158208/2024-05-14/cFdSrOdKoa-harmonyNext.jpg', 14854, '123615944728158208', '2024-05-14 10:26:16', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (147866248306778112, 'SvSTvxsAhA-harmonyNext.jpg', 'zrxzrx-123615944728158208/2024-05-14/SvSTvxsAhA-harmonyNext.jpg', 14854, '123615944728158208', '2024-05-14 13:48:41', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (148008604385509376, '6Rg-4xlS5K-祁同伟.jpg', 'admin333-135186678792712192/2024-05-14/6Rg-4xlS5K-祁同伟.jpg', 80698, '135186678792712192', '2024-05-14 23:14:21', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (148008933671927808, '0Qt2P1-jvd-v2-cfe3fda988aba24ca19d0467e20114cb_720w.jpg', 'admin123-124716087158337536/2024-05-14/0Qt2P1-jvd-v2-cfe3fda988aba24ca19d0467e20114cb_720w.jpg', 17100, '124716087158337536', '2024-05-14 23:15:40', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (148011162592186368, 'jy6kIu-xq2-v2-cfe3fda988aba24ca19d0467e20114cb_720w.jpg', 'admin123-124716087158337536/2024-05-14/jy6kIu-xq2-v2-cfe3fda988aba24ca19d0467e20114cb_720w.jpg', 17100, '124716087158337536', '2024-05-14 23:24:31', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (148011228803469312, 'BLvrgjDmAO-v2-cfe3fda988aba24ca19d0467e20114cb_720w.jpg', 'admin123-124716087158337536/2024-05-14/BLvrgjDmAO-v2-cfe3fda988aba24ca19d0467e20114cb_720w.jpg', 17100, '124716087158337536', '2024-05-14 23:24:47', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (148013992296157184, '6NatnuYO1r-沙瑞金.jpg', 'admin-1067246875800000001/2024-05-14/6NatnuYO1r-沙瑞金.jpg', 32881, '1067246875800000001', '2024-05-14 23:35:46', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (148015123818713088, 'ajoiaLvb6q-马老师.jpg', 'zrxzrx-123615944728158208/2024-05-14/ajoiaLvb6q-马老师.jpg', 14312, '123615944728158208', '2024-05-14 23:40:16', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (149726602648678400, 'W3CtjgMinc-马老师.jpg', 'wuhudasima-149726522734604288/2024-05-19/W3CtjgMinc-马老师.jpg', 14312, '149726522734604288', '2024-05-19 17:01:04', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (282637669257711616, '9t6znkrhg--OIP-C.jpg', 'zrxzrx-123615944728158208/2025-05-21/9t6znkrhg--OIP-C.jpg', 16708, '123615944728158208', '2025-05-21 11:22:12', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (282638024217464832, 'ffqXaAKi1F-OIP-C.jpg', 'zrxzrx-123615944728158208/2025-05-21/ffqXaAKi1F-OIP-C.jpg', 16708, '123615944728158208', '2025-05-21 11:23:36', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (282638568793313280, 'zwz_A00Mj9-OIP-C.jpg', 'zrxzrx-123615944728158208/2025-05-21/zwz_A00Mj9-OIP-C.jpg', 16708, '123615944728158208', '2025-05-21 11:25:46', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (282640126423601152, 'hMMXeTw7a3-赵灯男.jpg', 'zrxzrx-123615944728158208/2025-05-21/hMMXeTw7a3-赵灯男.jpg', 130323, '123615944728158208', '2025-05-21 11:31:57', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (282640355277410304, 'OnXuqBApXY-OIP-C.jpg', 'zrxzrx-123615944728158208/2025-05-21/OnXuqBApXY-OIP-C.jpg', 16708, '123615944728158208', '2025-05-21 11:32:52', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (282641988992372736, 'Fk0iRrnxZ0-OIP-C.jpg', 'hmbb666-280442526429851648/2025-05-21/Fk0iRrnxZ0-OIP-C.jpg', 16708, '280442526429851648', '2025-05-21 11:39:21', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (282642220710891520, 'kN6FO0va51-OIP-C.jpg', 'hmbb666-280442526429851648/2025-05-21/kN6FO0va51-OIP-C.jpg', 16708, '280442526429851648', '2025-05-21 11:40:17', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (282714291881164800, '16UpcXYTuW-OIP-C.jpg', 'hmbb666-280442526429851648/2025-05-21/16UpcXYTuW-OIP-C.jpg', 16708, '280442526429851648', '2025-05-21 16:26:40', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (282973641180381184, 'sqkuYck6S0-OIP-C.jpg', 'hmbb666-280442526429851648/2025-05-22/sqkuYck6S0-OIP-C.jpg', 16708, '280442526429851648', '2025-05-22 09:37:13', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (285144672169594880, 'SBoy1Sbjsk-OIP-C.jpg', 'hmbb666-280442526429851648/2025-05-28/SBoy1Sbjsk-OIP-C.jpg', 16708, '280442526429851648', '2025-05-28 09:24:08', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (285146583484567552, 'vhOxY7GlUS-OIP-C.jpg', 'hmbb666-280442526429851648/2025-05-28/vhOxY7GlUS-OIP-C.jpg', 16708, '280442526429851648', '2025-05-28 09:31:43', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (285226998895370240, 'Iiry9oYim2-OIP-C.jpg', 'hmbb666-280442526429851648/2025-05-28/Iiry9oYim2-OIP-C.jpg', 16708, '280442526429851648', '2025-05-28 14:51:16', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (285227020533784576, 'd0uC1yxIlO-OIP-C.jpg', 'hmbb666-280442526429851648/2025-05-28/d0uC1yxIlO-OIP-C.jpg', 16708, '280442526429851648', '2025-05-28 14:51:21', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (285261272520491008, 'G2YFC_pbN_-OIP-C.jpg', 'hmbb666-280442526429851648/2025-05-28/G2YFC_pbN_-OIP-C.jpg', 16708, '280442526429851648', '2025-05-28 17:07:27', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (287672664460374016, 'NC7N4InCCT-20200520132047_3zEE3.jpeg', 'yzbban-287668746988826624/2025-06-04/NC7N4InCCT-20200520132047_3zEE3.jpeg', 240674, '287668746988826624', '2025-06-04 08:49:28', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (287672819544764416, 'CTw0wTVJVh-20200520132047_3zEE3.jpeg', 'yzbban-287668746988826624/2025-06-04/CTw0wTVJVh-20200520132047_3zEE3.jpeg', 240674, '287668746988826624', '2025-06-04 08:50:05', NULL, NULL, 0);
INSERT INTO `sys_file` VALUES (288031775878344704, 'hvj1-w9Z04-20200520132047_3zEE3.jpeg', 'yzbban-287668746988826624/2025-06-05/hvj1-w9Z04-20200520132047_3zEE3.jpeg', 240674, '287668746988826624', '2025-06-05 08:36:27', NULL, NULL, 0);

-- ----------------------------
-- Table structure for sys_manage
-- ----------------------------
DROP TABLE IF EXISTS `sys_manage`;
CREATE TABLE `sys_manage`  (
  `userId` varbinary(255) NULL DEFAULT NULL COMMENT '用户ID',
  `question` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '密保',
  `answer` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '答案'
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_manage
-- ----------------------------
INSERT INTO `sys_manage` VALUES (0x323830343432353236343239383531363438, '你母亲的名字是？', 'hhah');
INSERT INTO `sys_manage` VALUES (0x313233363135393434373238313538323038, '你最喜欢的电影是？', '梦幻西游');
INSERT INTO `sys_manage` VALUES (0x323932373733333834303335303238393932, '你最喜欢的电影是？', '少年的你');
INSERT INTO `sys_manage` VALUES (0x323932373832363134393133383335303038, '你最喜欢的电影是？', '少年的你');
INSERT INTO `sys_manage` VALUES (0x323932373839363838383731373732313630, '你最喜欢的电影是？', '少年的你');
INSERT INTO `sys_manage` VALUES (0x323933313238303934313933363036363536, '你最喜欢的电影是？', '少年的你');
INSERT INTO `sys_manage` VALUES (0x323933313538333337343430373036353630, '你最喜欢的电影是？', '少年的你');
INSERT INTO `sys_manage` VALUES (0x323933313732383837393730373833323332, '你最喜欢的电影是？', '少年的你');
INSERT INTO `sys_manage` VALUES (0x323936343937303739383934313232343936, '你最喜欢的电影是？', '少年的你');
INSERT INTO `sys_manage` VALUES (0x323936353038353738383334333931303430, '你最喜欢的电影是？', '少年的你');
INSERT INTO `sys_manage` VALUES (0x323936383233383430353032353833323936, '你最喜欢的电影是？', '少年的你');
INSERT INTO `sys_manage` VALUES (0x323936383335383439333130383334363838, '你最喜欢的电影是？', '少年的你');

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `id` bigint NOT NULL COMMENT 'id',
  `role_code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '角色标识',
  `sort` int NULL DEFAULT NULL COMMENT '排序（当前角色创建角色不可以创建大于自己最大权限的角色）',
  `remark` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `dept_id` bigint NULL DEFAULT NULL COMMENT '部门ID',
  `creator` bigint NULL DEFAULT NULL COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `updater` bigint NULL DEFAULT NULL COMMENT '更新者',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `del_flag` tinyint NULL DEFAULT NULL COMMENT '逻辑删除（0-正常，1-已删除）',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_dept_id`(`dept_id` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '角色管理' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES (1, 'super-admin', 0, '超级管理员', NULL, NULL, NULL, NULL, NULL, 0);
INSERT INTO `sys_role` VALUES (33554788141000117, 'admin', 1, '管理员', NULL, NULL, NULL, NULL, NULL, 0);
INSERT INTO `sys_role` VALUES (33615406334000157, 'user', 2, '普通用户', NULL, 123615944728158208, '2024-04-25 14:37:46', NULL, NULL, 0);
INSERT INTO `sys_role` VALUES (34724366549000174, 'tourist', 3, '游客', NULL, 123615944728158208, '2024-05-08 10:40:27', NULL, NULL, 1);
INSERT INTO `sys_role` VALUES (34724813704000117, 'second-admin', 1, '二级管理员', NULL, 123615944728158208, '2024-05-08 10:47:54', NULL, NULL, 1);
INSERT INTO `sys_role` VALUES (66612731473000133, 'bbp', 2, '超级无敌QQ弹弹口香糖', NULL, 123615944728158208, '2025-05-12 12:33:11', NULL, NULL, 1);

-- ----------------------------
-- Table structure for sys_role_permission
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_permission`;
CREATE TABLE `sys_role_permission`  (
  `id` bigint NOT NULL COMMENT 'id',
  `role_id` bigint NULL DEFAULT NULL COMMENT '角色ID',
  `permission_code` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '菜单项ID',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_role_id`(`role_id` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '角色数据权限' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_role_permission
-- ----------------------------
INSERT INTO `sys_role_permission` VALUES (1, 1, 'super-admin', '2024-03-08 16:28:25');

-- ----------------------------
-- Table structure for sys_role_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_user`;
CREATE TABLE `sys_role_user`  (
  `id` bigint NOT NULL COMMENT 'id',
  `role_id` bigint NULL DEFAULT NULL COMMENT '角色ID',
  `user_id` bigint NULL DEFAULT NULL COMMENT '用户ID',
  `creator` bigint NULL DEFAULT NULL COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `updater` bigint NULL DEFAULT NULL COMMENT '更新人',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_role_id`(`role_id` ASC) USING BTREE,
  INDEX `idx_user_id`(`user_id` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '角色用户关系' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_role_user
-- ----------------------------
INSERT INTO `sys_role_user` VALUES (141517931158556673, 33554788141000117, 124716087158337536, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (141518310273306624, 1, 123615944728158208, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (141518310273306625, 33554788141000117, 123615944728158208, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (142031551902605312, 33615406334000157, 142031551613198336, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (145024916684275712, 33615406334000157, 135186678792712192, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (145647908846870528, 33554788141000117, 1067246875800000001, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (279166370400088064, 33554788141000117, 149726522734604288, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (279394105269653504, 33615406334000157, 278265200815030272, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (279800353634746368, 33615406334000157, 279800353081098240, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (284824452561113088, 33615406334000157, 284824452078768128, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (287668747425034240, 33615406334000157, 287668746988826624, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (290201875363364864, 33615406334000157, 290201875157843968, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (291699887937011712, 33615406334000157, 291699887588884480, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292045120944459776, 33615406334000157, 292045120277565440, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292049984529354752, 33554788141000117, 280442526429851648, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292054437043003392, 33615406334000157, 292054435499499520, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292061026113937408, 33615406334000157, 292061025652563968, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292062633776742400, 33615406334000157, 292062633227288576, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292065185433133056, 33615406334000157, 292065184925622272, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292080945706610688, 33615406334000157, 292080945559810048, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292081688152944640, 33615406334000157, 292081688006144000, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292124981190291456, 33615406334000157, 292124981047685120, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292125778888192000, 33615406334000157, 292125778649116672, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292127186957897728, 33615406334000157, 292127186748182528, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292127534015582208, 33615406334000157, 292127533881364480, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292127852078043136, 33615406334000157, 292127851935436800, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292426439490396160, 33615406334000157, 292426439331012608, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292773384169246720, 33615406334000157, 292773384035028992, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292782615069024256, 33615406334000157, 292782614913835008, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292789689001795584, 33615406334000157, 292789688871772160, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (292821028504117248, 33615406334000157, 292821027317129216, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (293128096479502336, 33615406334000157, 293128094193606656, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (293158337763667968, 33615406334000157, 293158337440706560, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (293172888511848448, 33615406334000157, 293172887970783232, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (296497080489713664, 33615406334000157, 296497079894122496, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (296508579220267008, 33615406334000157, 296508578834391040, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (296796464225845248, 33615406334000157, 296796463827386368, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (296823840901042176, 33615406334000157, 296823840502583296, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (296829222662836224, 33615406334000157, 296829222130159616, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (296830427287547904, 33615406334000157, 296830427128164352, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_user` VALUES (296835849684127744, 33615406334000157, 296835849310834688, NULL, NULL, NULL, NULL);

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `id` bigint NOT NULL COMMENT 'id',
  `nick_name` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '密码',
  `salt` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '盐值',
  `real_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '姓名',
  `avatar` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像url',
  `gender` tinyint UNSIGNED NULL DEFAULT NULL COMMENT '性别   0：男   1：女    2：保密',
  `introduce` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '个人简介',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `mobile` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '手机号',
  `status` tinyint NULL DEFAULT NULL COMMENT '状态  0：正常   1：停用',
  `creator` bigint NULL DEFAULT NULL COMMENT '创建者',
  `create_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updater` bigint NULL DEFAULT NULL COMMENT '更新者',
  `update_time` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_username`(`username` ASC) USING BTREE,
  INDEX `idx_create_date`(`create_time` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '系统用户' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES (123615944728158208, '芜湖大司马', 'zrxzrx', '54d5a89000c9c46ed3d07c5ad765e5c6', 'PxXvNDTy', '大司马', '/user-avatars/123615944728158208.jpg', 0, '这波是肉蛋葱鸡', '1972814429@qq.com', '13064373217', 0, NULL, '2024-02-01 11:19:50', 123615944728158208, '2025-06-24 15:57:00');
INSERT INTO `sys_user` VALUES (124716087158337536, '省委高育良', 'admin123', 'f18f561a0d1a4d084607055693fe899e', 'msb28Yoe', '高育良', '/user-avatars/124716087158337536.jpg', 1, '工作时要称职务！', '1972814429@qq.com', '15726109130', 1, NULL, '2024-05-10 21:52:20', 123615944728158208, '2025-06-19 13:07:36');
INSERT INTO `sys_user` VALUES (135186678792712192, '省公安厅厅长祁同伟', 'admin333', '3a97f5aea471c52d060d5481982057de', 'Vr7uaJMY', '祁同伟', '/user-avatars/135186678792712192.jpg', 0, '改变我的不是知识，是权利', '1972814429@qq.com', '18154660615', 1, NULL, '2024-05-10 21:52:23', 123615944728158208, '2025-06-29 14:55:27');
INSERT INTO `sys_user` VALUES (149726522734604288, '芜湖大司马', 'wuhudasima', '37a694037fc040c379852de6112e3881', 'd3biczmy', '韩金轮', '/user-avatars/149726522734604288.png', NULL, '对面打野在哪里？如果你答不上来，那对不起，我不能认可你🫠', '15726109130@qq.com', '15726109130', 1, NULL, NULL, 123615944728158208, '2025-06-29 15:42:55');
INSERT INTO `sys_user` VALUES (278265200815030272, ' 吃土豆的比巴卜', 'bibap', 'fc981f15a7da85be4cf6bf47e53f4b14', 'sqvkkn5n', '比巴卜', '/user-avatars/278265200815030272.jpg', NULL, '妈祖点化牦牛精，许仙气死鸡大保', NULL, '13183458548', 0, NULL, NULL, 123615944728158208, '2025-06-29 15:42:47');
INSERT INTO `sys_user` VALUES (279800353081098240, '卡咪龟cc', 'ltlltl', '69db76dfe9f9d39799b0a302644af359', '9rk0oq9t', '卡咪龟', '/user-avatars/279800353081098240.jpg', NULL, '最有价值给最珍贵之人。', NULL, '19982556991', 0, NULL, '2025-05-13 15:27:42', NULL, '2025-05-13 15:27:42');
INSERT INTO `sys_user` VALUES (280442526429851648, '海绵小子', 'hmbb666', '2782e36e968a48b8310cac14537fbbbe', '3455j5t0', '黄色洗碗巾', '/user-avatars/280442526429851648.jpg', NULL, '黄色方块，最好的朋友是派大星', '2176311327@qq.com', '17711423506', 1, NULL, '2025-05-15 09:59:29', 123615944728158208, '2025-06-16 10:43:44');
INSERT INTO `sys_user` VALUES (287668746988826624, '火影男', 'yzbban', '1c2bacd9a77eab6e0272448419bc935b', 'yeibdu04', '宇智波·斑', '/user-avatars/287668746988826624.jpeg', NULL, '宇智波一族 的前任首领，不仅是前任 六道仙人 长子 因陀罗 的查克拉转世者，还是曾经宇智波一族的最强者。 擅长使用可以与 尾兽 匹敌的“完全体须佐能乎”，与 千手柱间 一同被称为“传说中的忍者”。 青年时期斑与柱间联手建立了忍界史上第一个忍村，并由斑将其命名为“木叶”。', '302691227@qq.com', '17711423506', 0, NULL, '2025-06-04 08:33:55', 287668746988826624, '2025-06-05 13:04:23');
INSERT INTO `sys_user` VALUES (292426439331012608, 'wahhh33', 'wahhh33', '8090189dd383adde0407c6849debe944', 'sv090o7a', 'wahhh33', '/user-avatars/001.jpg', NULL, NULL, '302691227@qq.com', '17711423506', 0, NULL, '2025-06-17 11:39:18', 292426439331012608, '2025-06-29 13:28:11');
INSERT INTO `sys_user` VALUES (292821027317129216, 'dxl123', 'dxl123', '2a4c846fbfc7e279e77b5dcecd4abf6a', 'y2kibsvn', 'dxl123', '/user-avatars/001.jpg', NULL, NULL, NULL, '18683083719', 0, NULL, '2025-06-18 13:47:16', NULL, '2025-06-18 13:47:16');
INSERT INTO `sys_user` VALUES (296796463827386368, 'qwert', 'qwert', '1da176e11636b4934d75de34be2f46db', '3dsgvv7o', 'qwert', '/user-avatars/001.jpg', NULL, NULL, NULL, '15283037738', 0, NULL, '2025-06-29 13:04:12', NULL, '2025-06-29 13:04:12');
INSERT INTO `sys_user` VALUES (296830427128164352, 'wahhh333', 'wahhh333', '5febfa004294fa587a8d3ac0e4c55f65', 'y7yqroqn', 'wahhh333', '/user-avatars/001.jpg', NULL, NULL, NULL, '17711423506', 0, NULL, '2025-06-29 15:19:12', NULL, '2025-06-29 15:19:12');
INSERT INTO `sys_user` VALUES (296835849310834688, '123123', '123123', '9e365e948e69801312d8d99169715f93', 'x0bh35sl', '123123', '/user-avatars/296835849310834688.jpg', NULL, '你好', '3373565034@qq.com', '17313950391', 0, NULL, '2025-06-29 15:40:42', 296835849310834688, '2025-06-29 15:41:50');
INSERT INTO `sys_user` VALUES (1067246875800000001, '省委沙瑞金', 'admin', '54d5a89000c9c46ed3d07c5ad765e5c6', 'PxXvNDTy', '沙瑞金', '/user-avatars/1067246875800000001.jpg', 0, '我不想干的事，别人也干不成', '1972814429@qq.com', '13612345678', 0, 1067246875800000001, '2024-03-08 15:21:37', 123615944728158208, '2025-06-29 15:50:16');

SET FOREIGN_KEY_CHECKS = 1;
